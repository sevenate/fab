//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.431
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Fab.Server.Import.UserServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserServiceReference.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GenerateUniqueLogin", ReplyAction="http://tempuri.org/IUserService/GenerateUniqueLoginResponse")]
        string GenerateUniqueLogin();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserService/GenerateUniqueLogin", ReplyAction="http://tempuri.org/IUserService/GenerateUniqueLoginResponse")]
        System.IAsyncResult BeginGenerateUniqueLogin(System.AsyncCallback callback, object asyncState);
        
        string EndGenerateUniqueLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/IsLoginAvailable", ReplyAction="http://tempuri.org/IUserService/IsLoginAvailableResponse")]
        bool IsLoginAvailable(string login);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserService/IsLoginAvailable", ReplyAction="http://tempuri.org/IUserService/IsLoginAvailableResponse")]
        System.IAsyncResult BeginIsLoginAvailable(string login, System.AsyncCallback callback, object asyncState);
        
        bool EndIsLoginAvailable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Register", ReplyAction="http://tempuri.org/IUserService/RegisterResponse")]
        System.Guid Register(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserService/Register", ReplyAction="http://tempuri.org/IUserService/RegisterResponse")]
        System.IAsyncResult BeginRegister(string login, string password, System.AsyncCallback callback, object asyncState);
        
        System.Guid EndRegister(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Update", ReplyAction="http://tempuri.org/IUserService/UpdateResponse")]
        void Update(System.Guid userId, string oldPassword, string newPassword, string newEmail);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserService/Update", ReplyAction="http://tempuri.org/IUserService/UpdateResponse")]
        System.IAsyncResult BeginUpdate(System.Guid userId, string oldPassword, string newPassword, string newEmail, System.AsyncCallback callback, object asyncState);
        
        void EndUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserId", ReplyAction="http://tempuri.org/IUserService/GetUserIdResponse")]
        System.Guid GetUserId(string login);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserService/GetUserId", ReplyAction="http://tempuri.org/IUserService/GetUserIdResponse")]
        System.IAsyncResult BeginGetUserId(string login, System.AsyncCallback callback, object asyncState);
        
        System.Guid EndGetUserId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ResetPassword", ReplyAction="http://tempuri.org/IUserService/ResetPasswordResponse")]
        void ResetPassword(string login, string email);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserService/ResetPassword", ReplyAction="http://tempuri.org/IUserService/ResetPasswordResponse")]
        System.IAsyncResult BeginResetPassword(string login, string email, System.AsyncCallback callback, object asyncState);
        
        void EndResetPassword(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : Fab.Server.Import.UserServiceReference.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GenerateUniqueLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GenerateUniqueLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsLoginAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsLoginAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Guid Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Guid Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<Fab.Server.Import.UserServiceReference.IUserService>, Fab.Server.Import.UserServiceReference.IUserService {
        
        private BeginOperationDelegate onBeginGenerateUniqueLoginDelegate;
        
        private EndOperationDelegate onEndGenerateUniqueLoginDelegate;
        
        private System.Threading.SendOrPostCallback onGenerateUniqueLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsLoginAvailableDelegate;
        
        private EndOperationDelegate onEndIsLoginAvailableDelegate;
        
        private System.Threading.SendOrPostCallback onIsLoginAvailableCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisterDelegate;
        
        private EndOperationDelegate onEndRegisterDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateDelegate;
        
        private EndOperationDelegate onEndUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserIdDelegate;
        
        private EndOperationDelegate onEndGetUserIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginResetPasswordDelegate;
        
        private EndOperationDelegate onEndResetPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onResetPasswordCompletedDelegate;
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GenerateUniqueLoginCompletedEventArgs> GenerateUniqueLoginCompleted;
        
        public event System.EventHandler<IsLoginAvailableCompletedEventArgs> IsLoginAvailableCompleted;
        
        public event System.EventHandler<RegisterCompletedEventArgs> RegisterCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateCompleted;
        
        public event System.EventHandler<GetUserIdCompletedEventArgs> GetUserIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ResetPasswordCompleted;
        
        public string GenerateUniqueLogin() {
            return base.Channel.GenerateUniqueLogin();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGenerateUniqueLogin(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGenerateUniqueLogin(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGenerateUniqueLogin(System.IAsyncResult result) {
            return base.Channel.EndGenerateUniqueLogin(result);
        }
        
        private System.IAsyncResult OnBeginGenerateUniqueLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGenerateUniqueLogin(callback, asyncState);
        }
        
        private object[] OnEndGenerateUniqueLogin(System.IAsyncResult result) {
            string retVal = this.EndGenerateUniqueLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGenerateUniqueLoginCompleted(object state) {
            if ((this.GenerateUniqueLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GenerateUniqueLoginCompleted(this, new GenerateUniqueLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GenerateUniqueLoginAsync() {
            this.GenerateUniqueLoginAsync(null);
        }
        
        public void GenerateUniqueLoginAsync(object userState) {
            if ((this.onBeginGenerateUniqueLoginDelegate == null)) {
                this.onBeginGenerateUniqueLoginDelegate = new BeginOperationDelegate(this.OnBeginGenerateUniqueLogin);
            }
            if ((this.onEndGenerateUniqueLoginDelegate == null)) {
                this.onEndGenerateUniqueLoginDelegate = new EndOperationDelegate(this.OnEndGenerateUniqueLogin);
            }
            if ((this.onGenerateUniqueLoginCompletedDelegate == null)) {
                this.onGenerateUniqueLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGenerateUniqueLoginCompleted);
            }
            base.InvokeAsync(this.onBeginGenerateUniqueLoginDelegate, null, this.onEndGenerateUniqueLoginDelegate, this.onGenerateUniqueLoginCompletedDelegate, userState);
        }
        
        public bool IsLoginAvailable(string login) {
            return base.Channel.IsLoginAvailable(login);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsLoginAvailable(string login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsLoginAvailable(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndIsLoginAvailable(System.IAsyncResult result) {
            return base.Channel.EndIsLoginAvailable(result);
        }
        
        private System.IAsyncResult OnBeginIsLoginAvailable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string login = ((string)(inValues[0]));
            return this.BeginIsLoginAvailable(login, callback, asyncState);
        }
        
        private object[] OnEndIsLoginAvailable(System.IAsyncResult result) {
            bool retVal = this.EndIsLoginAvailable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsLoginAvailableCompleted(object state) {
            if ((this.IsLoginAvailableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsLoginAvailableCompleted(this, new IsLoginAvailableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsLoginAvailableAsync(string login) {
            this.IsLoginAvailableAsync(login, null);
        }
        
        public void IsLoginAvailableAsync(string login, object userState) {
            if ((this.onBeginIsLoginAvailableDelegate == null)) {
                this.onBeginIsLoginAvailableDelegate = new BeginOperationDelegate(this.OnBeginIsLoginAvailable);
            }
            if ((this.onEndIsLoginAvailableDelegate == null)) {
                this.onEndIsLoginAvailableDelegate = new EndOperationDelegate(this.OnEndIsLoginAvailable);
            }
            if ((this.onIsLoginAvailableCompletedDelegate == null)) {
                this.onIsLoginAvailableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsLoginAvailableCompleted);
            }
            base.InvokeAsync(this.onBeginIsLoginAvailableDelegate, new object[] {
                        login}, this.onEndIsLoginAvailableDelegate, this.onIsLoginAvailableCompletedDelegate, userState);
        }
        
        public System.Guid Register(string login, string password) {
            return base.Channel.Register(login, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRegister(string login, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegister(login, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Guid EndRegister(System.IAsyncResult result) {
            return base.Channel.EndRegister(result);
        }
        
        private System.IAsyncResult OnBeginRegister(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string login = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return this.BeginRegister(login, password, callback, asyncState);
        }
        
        private object[] OnEndRegister(System.IAsyncResult result) {
            System.Guid retVal = this.EndRegister(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterCompleted(object state) {
            if ((this.RegisterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterCompleted(this, new RegisterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterAsync(string login, string password) {
            this.RegisterAsync(login, password, null);
        }
        
        public void RegisterAsync(string login, string password, object userState) {
            if ((this.onBeginRegisterDelegate == null)) {
                this.onBeginRegisterDelegate = new BeginOperationDelegate(this.OnBeginRegister);
            }
            if ((this.onEndRegisterDelegate == null)) {
                this.onEndRegisterDelegate = new EndOperationDelegate(this.OnEndRegister);
            }
            if ((this.onRegisterCompletedDelegate == null)) {
                this.onRegisterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterDelegate, new object[] {
                        login,
                        password}, this.onEndRegisterDelegate, this.onRegisterCompletedDelegate, userState);
        }
        
        public void Update(System.Guid userId, string oldPassword, string newPassword, string newEmail) {
            base.Channel.Update(userId, oldPassword, newPassword, newEmail);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdate(System.Guid userId, string oldPassword, string newPassword, string newEmail, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdate(userId, oldPassword, newPassword, newEmail, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdate(System.IAsyncResult result) {
            base.Channel.EndUpdate(result);
        }
        
        private System.IAsyncResult OnBeginUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string oldPassword = ((string)(inValues[1]));
            string newPassword = ((string)(inValues[2]));
            string newEmail = ((string)(inValues[3]));
            return this.BeginUpdate(userId, oldPassword, newPassword, newEmail, callback, asyncState);
        }
        
        private object[] OnEndUpdate(System.IAsyncResult result) {
            this.EndUpdate(result);
            return null;
        }
        
        private void OnUpdateCompleted(object state) {
            if ((this.UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateAsync(System.Guid userId, string oldPassword, string newPassword, string newEmail) {
            this.UpdateAsync(userId, oldPassword, newPassword, newEmail, null);
        }
        
        public void UpdateAsync(System.Guid userId, string oldPassword, string newPassword, string newEmail, object userState) {
            if ((this.onBeginUpdateDelegate == null)) {
                this.onBeginUpdateDelegate = new BeginOperationDelegate(this.OnBeginUpdate);
            }
            if ((this.onEndUpdateDelegate == null)) {
                this.onEndUpdateDelegate = new EndOperationDelegate(this.OnEndUpdate);
            }
            if ((this.onUpdateCompletedDelegate == null)) {
                this.onUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateDelegate, new object[] {
                        userId,
                        oldPassword,
                        newPassword,
                        newEmail}, this.onEndUpdateDelegate, this.onUpdateCompletedDelegate, userState);
        }
        
        public System.Guid GetUserId(string login) {
            return base.Channel.GetUserId(login);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserId(string login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserId(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Guid EndGetUserId(System.IAsyncResult result) {
            return base.Channel.EndGetUserId(result);
        }
        
        private System.IAsyncResult OnBeginGetUserId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string login = ((string)(inValues[0]));
            return this.BeginGetUserId(login, callback, asyncState);
        }
        
        private object[] OnEndGetUserId(System.IAsyncResult result) {
            System.Guid retVal = this.EndGetUserId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserIdCompleted(object state) {
            if ((this.GetUserIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserIdCompleted(this, new GetUserIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserIdAsync(string login) {
            this.GetUserIdAsync(login, null);
        }
        
        public void GetUserIdAsync(string login, object userState) {
            if ((this.onBeginGetUserIdDelegate == null)) {
                this.onBeginGetUserIdDelegate = new BeginOperationDelegate(this.OnBeginGetUserId);
            }
            if ((this.onEndGetUserIdDelegate == null)) {
                this.onEndGetUserIdDelegate = new EndOperationDelegate(this.OnEndGetUserId);
            }
            if ((this.onGetUserIdCompletedDelegate == null)) {
                this.onGetUserIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserIdDelegate, new object[] {
                        login}, this.onEndGetUserIdDelegate, this.onGetUserIdCompletedDelegate, userState);
        }
        
        public void ResetPassword(string login, string email) {
            base.Channel.ResetPassword(login, email);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginResetPassword(string login, string email, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResetPassword(login, email, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndResetPassword(System.IAsyncResult result) {
            base.Channel.EndResetPassword(result);
        }
        
        private System.IAsyncResult OnBeginResetPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string login = ((string)(inValues[0]));
            string email = ((string)(inValues[1]));
            return this.BeginResetPassword(login, email, callback, asyncState);
        }
        
        private object[] OnEndResetPassword(System.IAsyncResult result) {
            this.EndResetPassword(result);
            return null;
        }
        
        private void OnResetPasswordCompleted(object state) {
            if ((this.ResetPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResetPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResetPasswordAsync(string login, string email) {
            this.ResetPasswordAsync(login, email, null);
        }
        
        public void ResetPasswordAsync(string login, string email, object userState) {
            if ((this.onBeginResetPasswordDelegate == null)) {
                this.onBeginResetPasswordDelegate = new BeginOperationDelegate(this.OnBeginResetPassword);
            }
            if ((this.onEndResetPasswordDelegate == null)) {
                this.onEndResetPasswordDelegate = new EndOperationDelegate(this.OnEndResetPassword);
            }
            if ((this.onResetPasswordCompletedDelegate == null)) {
                this.onResetPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResetPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginResetPasswordDelegate, new object[] {
                        login,
                        email}, this.onEndResetPasswordDelegate, this.onResetPasswordCompletedDelegate, userState);
        }
    }
}
