//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.488
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace Fab.Client.MoneyServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccountDTO", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core.DTO")]
    public partial class AccountDTO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int AssetTypeIdField;
        
        private decimal BalanceField;
        
        private System.DateTime CreatedField;
        
        private System.Nullable<System.DateTime> FirstPostingDateField;
        
        private int IdField;
        
        private System.Nullable<System.DateTime> LastPostingDateField;
        
        private string NameField;
        
        private decimal PostingsCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AssetTypeId {
            get {
                return this.AssetTypeIdField;
            }
            set {
                if ((this.AssetTypeIdField.Equals(value) != true)) {
                    this.AssetTypeIdField = value;
                    this.RaisePropertyChanged("AssetTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Balance {
            get {
                return this.BalanceField;
            }
            set {
                if ((this.BalanceField.Equals(value) != true)) {
                    this.BalanceField = value;
                    this.RaisePropertyChanged("Balance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Created {
            get {
                return this.CreatedField;
            }
            set {
                if ((this.CreatedField.Equals(value) != true)) {
                    this.CreatedField = value;
                    this.RaisePropertyChanged("Created");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> FirstPostingDate {
            get {
                return this.FirstPostingDateField;
            }
            set {
                if ((this.FirstPostingDateField.Equals(value) != true)) {
                    this.FirstPostingDateField = value;
                    this.RaisePropertyChanged("FirstPostingDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastPostingDate {
            get {
                return this.LastPostingDateField;
            }
            set {
                if ((this.LastPostingDateField.Equals(value) != true)) {
                    this.LastPostingDateField = value;
                    this.RaisePropertyChanged("LastPostingDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PostingsCount {
            get {
                return this.PostingsCountField;
            }
            set {
                if ((this.PostingsCountField.Equals(value) != true)) {
                    this.PostingsCountField = value;
                    this.RaisePropertyChanged("PostingsCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CategoryType", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core.Enums")]
    public enum CategoryType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Common = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Withdrawal = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deposit = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CategoryDTO", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core.DTO")]
    public partial class CategoryDTO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Fab.Client.MoneyServiceReference.CategoryType CategoryTypeField;
        
        private int IdField;
        
        private string NameField;
        
        private int PopularityField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.MoneyServiceReference.CategoryType CategoryType {
            get {
                return this.CategoryTypeField;
            }
            set {
                if ((this.CategoryTypeField.Equals(value) != true)) {
                    this.CategoryTypeField = value;
                    this.RaisePropertyChanged("CategoryType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Popularity {
            get {
                return this.PopularityField;
            }
            set {
                if ((this.PopularityField.Equals(value) != true)) {
                    this.PopularityField = value;
                    this.RaisePropertyChanged("Popularity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JournalDTO", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core.DTO")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.TransactionDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.DepositDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.WithdrawalDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.TransferDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.IncomingTransferDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.OutgoingTransferDTO))]
    public partial class JournalDTO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private decimal AmountField;
        
        private string CommentField;
        
        private System.DateTime DateField;
        
        private int IdField;
        
        private decimal QuantityField;
        
        private decimal RateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Rate {
            get {
                return this.RateField;
            }
            set {
                if ((this.RateField.Equals(value) != true)) {
                    this.RateField = value;
                    this.RaisePropertyChanged("Rate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransactionDTO", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core.DTO")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.DepositDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.WithdrawalDTO))]
    public partial class TransactionDTO : Fab.Client.MoneyServiceReference.JournalDTO {
        
        private System.Nullable<int> CategoryIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DepositDTO", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core.DTO")]
    public partial class DepositDTO : Fab.Client.MoneyServiceReference.TransactionDTO {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WithdrawalDTO", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core.DTO")]
    public partial class WithdrawalDTO : Fab.Client.MoneyServiceReference.TransactionDTO {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransferDTO", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core.DTO")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.IncomingTransferDTO))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.OutgoingTransferDTO))]
    public partial class TransferDTO : Fab.Client.MoneyServiceReference.JournalDTO {
        
        private System.Nullable<int> SecondAccountIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SecondAccountId {
            get {
                return this.SecondAccountIdField;
            }
            set {
                if ((this.SecondAccountIdField.Equals(value) != true)) {
                    this.SecondAccountIdField = value;
                    this.RaisePropertyChanged("SecondAccountId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IncomingTransferDTO", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core.DTO")]
    public partial class IncomingTransferDTO : Fab.Client.MoneyServiceReference.TransferDTO {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OutgoingTransferDTO", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core.DTO")]
    public partial class OutgoingTransferDTO : Fab.Client.MoneyServiceReference.TransferDTO {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AssetTypeDTO", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core.DTO")]
    public partial class AssetTypeDTO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryFilter", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core.Filters")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.CategoryFilter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.TextSearchFilter))]
    public partial class QueryFilter : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<System.DateTime> NotOlderThenField;
        
        private System.Nullable<int> SkipField;
        
        private System.Nullable<int> TakeField;
        
        private System.Nullable<System.DateTime> UptoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> NotOlderThen {
            get {
                return this.NotOlderThenField;
            }
            set {
                if ((this.NotOlderThenField.Equals(value) != true)) {
                    this.NotOlderThenField = value;
                    this.RaisePropertyChanged("NotOlderThen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Skip {
            get {
                return this.SkipField;
            }
            set {
                if ((this.SkipField.Equals(value) != true)) {
                    this.SkipField = value;
                    this.RaisePropertyChanged("Skip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Take {
            get {
                return this.TakeField;
            }
            set {
                if ((this.TakeField.Equals(value) != true)) {
                    this.TakeField = value;
                    this.RaisePropertyChanged("Take");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Upto {
            get {
                return this.UptoField;
            }
            set {
                if ((this.UptoField.Equals(value) != true)) {
                    this.UptoField = value;
                    this.RaisePropertyChanged("Upto");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CategoryFilter", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core.Filters")]
    public partial class CategoryFilter : Fab.Client.MoneyServiceReference.QueryFilter {
        
        private System.Nullable<int> CategoryIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TextSearchFilter", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core.Filters")]
    public partial class TextSearchFilter : Fab.Client.MoneyServiceReference.QueryFilter {
        
        private string ContainsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Contains {
            get {
                return this.ContainsField;
            }
            set {
                if ((object.ReferenceEquals(this.ContainsField, value) != true)) {
                    this.ContainsField = value;
                    this.RaisePropertyChanged("Contains");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MoneyServiceReference.IMoneyService")]
    public interface IMoneyService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/CreateAccount", ReplyAction="http://tempuri.org/IMoneyService/CreateAccountResponse")]
        System.IAsyncResult BeginCreateAccount(System.Guid userId, string name, int assetTypeId, System.AsyncCallback callback, object asyncState);
        
        int EndCreateAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/GetAccount", ReplyAction="http://tempuri.org/IMoneyService/GetAccountResponse")]
        System.IAsyncResult BeginGetAccount(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState);
        
        Fab.Client.MoneyServiceReference.AccountDTO EndGetAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/UpdateAccount", ReplyAction="http://tempuri.org/IMoneyService/UpdateAccountResponse")]
        System.IAsyncResult BeginUpdateAccount(System.Guid userId, int accountId, string name, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/DeleteAccount", ReplyAction="http://tempuri.org/IMoneyService/DeleteAccountResponse")]
        System.IAsyncResult BeginDeleteAccount(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/GetAllAccounts", ReplyAction="http://tempuri.org/IMoneyService/GetAllAccountsResponse")]
        System.IAsyncResult BeginGetAllAccounts(System.Guid userId, System.AsyncCallback callback, object asyncState);
        
        Fab.Client.MoneyServiceReference.AccountDTO[] EndGetAllAccounts(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/GetAccountBalance", ReplyAction="http://tempuri.org/IMoneyService/GetAccountBalanceResponse")]
        System.IAsyncResult BeginGetAccountBalance(System.Guid userId, int accountId, System.DateTime dateTime, System.AsyncCallback callback, object asyncState);
        
        decimal EndGetAccountBalance(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/CreateCategory", ReplyAction="http://tempuri.org/IMoneyService/CreateCategoryResponse")]
        System.IAsyncResult BeginCreateCategory(System.Guid userId, string name, Fab.Client.MoneyServiceReference.CategoryType categoryType, System.AsyncCallback callback, object asyncState);
        
        int EndCreateCategory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/GetCategory", ReplyAction="http://tempuri.org/IMoneyService/GetCategoryResponse")]
        System.IAsyncResult BeginGetCategory(System.Guid userId, int categoryId, System.AsyncCallback callback, object asyncState);
        
        Fab.Client.MoneyServiceReference.CategoryDTO EndGetCategory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/UpdateCategory", ReplyAction="http://tempuri.org/IMoneyService/UpdateCategoryResponse")]
        System.IAsyncResult BeginUpdateCategory(System.Guid userId, int categoryId, string name, Fab.Client.MoneyServiceReference.CategoryType categoryType, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateCategory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/DeleteCategory", ReplyAction="http://tempuri.org/IMoneyService/DeleteCategoryResponse")]
        System.IAsyncResult BeginDeleteCategory(System.Guid userId, int categoryId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteCategory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/GetAllCategories", ReplyAction="http://tempuri.org/IMoneyService/GetAllCategoriesResponse")]
        System.IAsyncResult BeginGetAllCategories(System.Guid userId, System.AsyncCallback callback, object asyncState);
        
        Fab.Client.MoneyServiceReference.CategoryDTO[] EndGetAllCategories(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/DeleteJournal", ReplyAction="http://tempuri.org/IMoneyService/DeleteJournalResponse")]
        System.IAsyncResult BeginDeleteJournal(System.Guid userId, int accountId, int journalId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteJournal(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/GetJournal", ReplyAction="http://tempuri.org/IMoneyService/GetJournalResponse")]
        System.IAsyncResult BeginGetJournal(System.Guid userId, int accountId, int journalId, System.AsyncCallback callback, object asyncState);
        
        Fab.Client.MoneyServiceReference.JournalDTO EndGetJournal(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/GetJournalsCount", ReplyAction="http://tempuri.org/IMoneyService/GetJournalsCountResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.CategoryType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.DepositDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.TransactionDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.JournalDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.WithdrawalDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.IncomingTransferDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.TransferDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.OutgoingTransferDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.AccountDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.AccountDTO[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.CategoryDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.CategoryDTO[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.JournalDTO[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.AssetTypeDTO[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.AssetTypeDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.TextSearchFilter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.QueryFilter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.CategoryFilter))]
        System.IAsyncResult BeginGetJournalsCount(System.Guid userId, int accountId, object queryFilter, System.AsyncCallback callback, object asyncState);
        
        int EndGetJournalsCount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/GetJournals", ReplyAction="http://tempuri.org/IMoneyService/GetJournalsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.CategoryType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.DepositDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.TransactionDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.JournalDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.WithdrawalDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.IncomingTransferDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.TransferDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.OutgoingTransferDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.AccountDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.AccountDTO[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.CategoryDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.CategoryDTO[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.JournalDTO[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.AssetTypeDTO[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.AssetTypeDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.TextSearchFilter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.QueryFilter))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Fab.Client.MoneyServiceReference.CategoryFilter))]
        System.IAsyncResult BeginGetJournals(System.Guid userId, int accountId, object queryFilter, System.AsyncCallback callback, object asyncState);
        
        Fab.Client.MoneyServiceReference.JournalDTO[] EndGetJournals(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/GetAllAssetTypes", ReplyAction="http://tempuri.org/IMoneyService/GetAllAssetTypesResponse")]
        System.IAsyncResult BeginGetAllAssetTypes(System.Guid userId, System.AsyncCallback callback, object asyncState);
        
        Fab.Client.MoneyServiceReference.AssetTypeDTO[] EndGetAllAssetTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/Deposit", ReplyAction="http://tempuri.org/IMoneyService/DepositResponse")]
        System.IAsyncResult BeginDeposit(System.Guid userId, int accountId, System.DateTime date, decimal rate, decimal quantity, System.Nullable<int> categoryId, string comment, System.AsyncCallback callback, object asyncState);
        
        int EndDeposit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/Withdrawal", ReplyAction="http://tempuri.org/IMoneyService/WithdrawalResponse")]
        System.IAsyncResult BeginWithdrawal(System.Guid userId, int accountId, System.DateTime date, decimal rate, decimal quantity, System.Nullable<int> categoryId, string comment, System.AsyncCallback callback, object asyncState);
        
        int EndWithdrawal(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/UpdateTransaction", ReplyAction="http://tempuri.org/IMoneyService/UpdateTransactionResponse")]
        System.IAsyncResult BeginUpdateTransaction(System.Guid userId, int accountId, int transactionId, bool isDeposit, System.DateTime date, decimal rate, decimal quantity, System.Nullable<int> categoryId, string comment, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateTransaction(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/Transfer", ReplyAction="http://tempuri.org/IMoneyService/TransferResponse")]
        System.IAsyncResult BeginTransfer(System.Guid userId, int fromAccountId, int toAccountId, System.DateTime date, decimal rate, decimal quantity, string comment, System.AsyncCallback callback, object asyncState);
        
        int EndTransfer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/UpdateTransfer", ReplyAction="http://tempuri.org/IMoneyService/UpdateTransferResponse")]
        System.IAsyncResult BeginUpdateTransfer(System.Guid userId, int transactionId, int fromAccountId, int toAccountId, System.DateTime date, decimal rate, decimal quantity, string comment, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateTransfer(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMoneyServiceChannel : Fab.Client.MoneyServiceReference.IMoneyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Fab.Client.MoneyServiceReference.AccountDTO Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Fab.Client.MoneyServiceReference.AccountDTO)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllAccountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllAccountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Fab.Client.MoneyServiceReference.AccountDTO[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Fab.Client.MoneyServiceReference.AccountDTO[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccountBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccountBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public decimal Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((decimal)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Fab.Client.MoneyServiceReference.CategoryDTO Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Fab.Client.MoneyServiceReference.CategoryDTO)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllCategoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllCategoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Fab.Client.MoneyServiceReference.CategoryDTO[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Fab.Client.MoneyServiceReference.CategoryDTO[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetJournalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetJournalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Fab.Client.MoneyServiceReference.JournalDTO Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Fab.Client.MoneyServiceReference.JournalDTO)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetJournalsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetJournalsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetJournalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetJournalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Fab.Client.MoneyServiceReference.JournalDTO[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Fab.Client.MoneyServiceReference.JournalDTO[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllAssetTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllAssetTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Fab.Client.MoneyServiceReference.AssetTypeDTO[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Fab.Client.MoneyServiceReference.AssetTypeDTO[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DepositCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DepositCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WithdrawalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public WithdrawalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TransferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MoneyServiceClient : System.ServiceModel.ClientBase<Fab.Client.MoneyServiceReference.IMoneyService>, Fab.Client.MoneyServiceReference.IMoneyService {
        
        private BeginOperationDelegate onBeginCreateAccountDelegate;
        
        private EndOperationDelegate onEndCreateAccountDelegate;
        
        private System.Threading.SendOrPostCallback onCreateAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccountDelegate;
        
        private EndOperationDelegate onEndGetAccountDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateAccountDelegate;
        
        private EndOperationDelegate onEndUpdateAccountDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteAccountDelegate;
        
        private EndOperationDelegate onEndDeleteAccountDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllAccountsDelegate;
        
        private EndOperationDelegate onEndGetAllAccountsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllAccountsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccountBalanceDelegate;
        
        private EndOperationDelegate onEndGetAccountBalanceDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccountBalanceCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateCategoryDelegate;
        
        private EndOperationDelegate onEndCreateCategoryDelegate;
        
        private System.Threading.SendOrPostCallback onCreateCategoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCategoryDelegate;
        
        private EndOperationDelegate onEndGetCategoryDelegate;
        
        private System.Threading.SendOrPostCallback onGetCategoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateCategoryDelegate;
        
        private EndOperationDelegate onEndUpdateCategoryDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCategoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteCategoryDelegate;
        
        private EndOperationDelegate onEndDeleteCategoryDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCategoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllCategoriesDelegate;
        
        private EndOperationDelegate onEndGetAllCategoriesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllCategoriesCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteJournalDelegate;
        
        private EndOperationDelegate onEndDeleteJournalDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteJournalCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetJournalDelegate;
        
        private EndOperationDelegate onEndGetJournalDelegate;
        
        private System.Threading.SendOrPostCallback onGetJournalCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetJournalsCountDelegate;
        
        private EndOperationDelegate onEndGetJournalsCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetJournalsCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetJournalsDelegate;
        
        private EndOperationDelegate onEndGetJournalsDelegate;
        
        private System.Threading.SendOrPostCallback onGetJournalsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllAssetTypesDelegate;
        
        private EndOperationDelegate onEndGetAllAssetTypesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllAssetTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginDepositDelegate;
        
        private EndOperationDelegate onEndDepositDelegate;
        
        private System.Threading.SendOrPostCallback onDepositCompletedDelegate;
        
        private BeginOperationDelegate onBeginWithdrawalDelegate;
        
        private EndOperationDelegate onEndWithdrawalDelegate;
        
        private System.Threading.SendOrPostCallback onWithdrawalCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTransactionDelegate;
        
        private EndOperationDelegate onEndUpdateTransactionDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTransactionCompletedDelegate;
        
        private BeginOperationDelegate onBeginTransferDelegate;
        
        private EndOperationDelegate onEndTransferDelegate;
        
        private System.Threading.SendOrPostCallback onTransferCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTransferDelegate;
        
        private EndOperationDelegate onEndUpdateTransferDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTransferCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MoneyServiceClient() {
        }
        
        public MoneyServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MoneyServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MoneyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MoneyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<CreateAccountCompletedEventArgs> CreateAccountCompleted;
        
        public event System.EventHandler<GetAccountCompletedEventArgs> GetAccountCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateAccountCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteAccountCompleted;
        
        public event System.EventHandler<GetAllAccountsCompletedEventArgs> GetAllAccountsCompleted;
        
        public event System.EventHandler<GetAccountBalanceCompletedEventArgs> GetAccountBalanceCompleted;
        
        public event System.EventHandler<CreateCategoryCompletedEventArgs> CreateCategoryCompleted;
        
        public event System.EventHandler<GetCategoryCompletedEventArgs> GetCategoryCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateCategoryCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteCategoryCompleted;
        
        public event System.EventHandler<GetAllCategoriesCompletedEventArgs> GetAllCategoriesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteJournalCompleted;
        
        public event System.EventHandler<GetJournalCompletedEventArgs> GetJournalCompleted;
        
        public event System.EventHandler<GetJournalsCountCompletedEventArgs> GetJournalsCountCompleted;
        
        public event System.EventHandler<GetJournalsCompletedEventArgs> GetJournalsCompleted;
        
        public event System.EventHandler<GetAllAssetTypesCompletedEventArgs> GetAllAssetTypesCompleted;
        
        public event System.EventHandler<DepositCompletedEventArgs> DepositCompleted;
        
        public event System.EventHandler<WithdrawalCompletedEventArgs> WithdrawalCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateTransactionCompleted;
        
        public event System.EventHandler<TransferCompletedEventArgs> TransferCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateTransferCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginCreateAccount(System.Guid userId, string name, int assetTypeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateAccount(userId, name, assetTypeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Fab.Client.MoneyServiceReference.IMoneyService.EndCreateAccount(System.IAsyncResult result) {
            return base.Channel.EndCreateAccount(result);
        }
        
        private System.IAsyncResult OnBeginCreateAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string name = ((string)(inValues[1]));
            int assetTypeId = ((int)(inValues[2]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginCreateAccount(userId, name, assetTypeId, callback, asyncState);
        }
        
        private object[] OnEndCreateAccount(System.IAsyncResult result) {
            int retVal = ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndCreateAccount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateAccountCompleted(object state) {
            if ((this.CreateAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateAccountCompleted(this, new CreateAccountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateAccountAsync(System.Guid userId, string name, int assetTypeId) {
            this.CreateAccountAsync(userId, name, assetTypeId, null);
        }
        
        public void CreateAccountAsync(System.Guid userId, string name, int assetTypeId, object userState) {
            if ((this.onBeginCreateAccountDelegate == null)) {
                this.onBeginCreateAccountDelegate = new BeginOperationDelegate(this.OnBeginCreateAccount);
            }
            if ((this.onEndCreateAccountDelegate == null)) {
                this.onEndCreateAccountDelegate = new EndOperationDelegate(this.OnEndCreateAccount);
            }
            if ((this.onCreateAccountCompletedDelegate == null)) {
                this.onCreateAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateAccountCompleted);
            }
            base.InvokeAsync(this.onBeginCreateAccountDelegate, new object[] {
                        userId,
                        name,
                        assetTypeId}, this.onEndCreateAccountDelegate, this.onCreateAccountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginGetAccount(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccount(userId, accountId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Fab.Client.MoneyServiceReference.AccountDTO Fab.Client.MoneyServiceReference.IMoneyService.EndGetAccount(System.IAsyncResult result) {
            return base.Channel.EndGetAccount(result);
        }
        
        private System.IAsyncResult OnBeginGetAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginGetAccount(userId, accountId, callback, asyncState);
        }
        
        private object[] OnEndGetAccount(System.IAsyncResult result) {
            Fab.Client.MoneyServiceReference.AccountDTO retVal = ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndGetAccount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccountCompleted(object state) {
            if ((this.GetAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccountCompleted(this, new GetAccountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccountAsync(System.Guid userId, int accountId) {
            this.GetAccountAsync(userId, accountId, null);
        }
        
        public void GetAccountAsync(System.Guid userId, int accountId, object userState) {
            if ((this.onBeginGetAccountDelegate == null)) {
                this.onBeginGetAccountDelegate = new BeginOperationDelegate(this.OnBeginGetAccount);
            }
            if ((this.onEndGetAccountDelegate == null)) {
                this.onEndGetAccountDelegate = new EndOperationDelegate(this.OnEndGetAccount);
            }
            if ((this.onGetAccountCompletedDelegate == null)) {
                this.onGetAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccountCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccountDelegate, new object[] {
                        userId,
                        accountId}, this.onEndGetAccountDelegate, this.onGetAccountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginUpdateAccount(System.Guid userId, int accountId, string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateAccount(userId, accountId, name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.MoneyServiceReference.IMoneyService.EndUpdateAccount(System.IAsyncResult result) {
            base.Channel.EndUpdateAccount(result);
        }
        
        private System.IAsyncResult OnBeginUpdateAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            string name = ((string)(inValues[2]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginUpdateAccount(userId, accountId, name, callback, asyncState);
        }
        
        private object[] OnEndUpdateAccount(System.IAsyncResult result) {
            ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndUpdateAccount(result);
            return null;
        }
        
        private void OnUpdateAccountCompleted(object state) {
            if ((this.UpdateAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateAccountAsync(System.Guid userId, int accountId, string name) {
            this.UpdateAccountAsync(userId, accountId, name, null);
        }
        
        public void UpdateAccountAsync(System.Guid userId, int accountId, string name, object userState) {
            if ((this.onBeginUpdateAccountDelegate == null)) {
                this.onBeginUpdateAccountDelegate = new BeginOperationDelegate(this.OnBeginUpdateAccount);
            }
            if ((this.onEndUpdateAccountDelegate == null)) {
                this.onEndUpdateAccountDelegate = new EndOperationDelegate(this.OnEndUpdateAccount);
            }
            if ((this.onUpdateAccountCompletedDelegate == null)) {
                this.onUpdateAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateAccountCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateAccountDelegate, new object[] {
                        userId,
                        accountId,
                        name}, this.onEndUpdateAccountDelegate, this.onUpdateAccountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginDeleteAccount(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteAccount(userId, accountId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.MoneyServiceReference.IMoneyService.EndDeleteAccount(System.IAsyncResult result) {
            base.Channel.EndDeleteAccount(result);
        }
        
        private System.IAsyncResult OnBeginDeleteAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginDeleteAccount(userId, accountId, callback, asyncState);
        }
        
        private object[] OnEndDeleteAccount(System.IAsyncResult result) {
            ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndDeleteAccount(result);
            return null;
        }
        
        private void OnDeleteAccountCompleted(object state) {
            if ((this.DeleteAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteAccountAsync(System.Guid userId, int accountId) {
            this.DeleteAccountAsync(userId, accountId, null);
        }
        
        public void DeleteAccountAsync(System.Guid userId, int accountId, object userState) {
            if ((this.onBeginDeleteAccountDelegate == null)) {
                this.onBeginDeleteAccountDelegate = new BeginOperationDelegate(this.OnBeginDeleteAccount);
            }
            if ((this.onEndDeleteAccountDelegate == null)) {
                this.onEndDeleteAccountDelegate = new EndOperationDelegate(this.OnEndDeleteAccount);
            }
            if ((this.onDeleteAccountCompletedDelegate == null)) {
                this.onDeleteAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteAccountCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteAccountDelegate, new object[] {
                        userId,
                        accountId}, this.onEndDeleteAccountDelegate, this.onDeleteAccountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginGetAllAccounts(System.Guid userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllAccounts(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Fab.Client.MoneyServiceReference.AccountDTO[] Fab.Client.MoneyServiceReference.IMoneyService.EndGetAllAccounts(System.IAsyncResult result) {
            return base.Channel.EndGetAllAccounts(result);
        }
        
        private System.IAsyncResult OnBeginGetAllAccounts(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginGetAllAccounts(userId, callback, asyncState);
        }
        
        private object[] OnEndGetAllAccounts(System.IAsyncResult result) {
            Fab.Client.MoneyServiceReference.AccountDTO[] retVal = ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndGetAllAccounts(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllAccountsCompleted(object state) {
            if ((this.GetAllAccountsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllAccountsCompleted(this, new GetAllAccountsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllAccountsAsync(System.Guid userId) {
            this.GetAllAccountsAsync(userId, null);
        }
        
        public void GetAllAccountsAsync(System.Guid userId, object userState) {
            if ((this.onBeginGetAllAccountsDelegate == null)) {
                this.onBeginGetAllAccountsDelegate = new BeginOperationDelegate(this.OnBeginGetAllAccounts);
            }
            if ((this.onEndGetAllAccountsDelegate == null)) {
                this.onEndGetAllAccountsDelegate = new EndOperationDelegate(this.OnEndGetAllAccounts);
            }
            if ((this.onGetAllAccountsCompletedDelegate == null)) {
                this.onGetAllAccountsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllAccountsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllAccountsDelegate, new object[] {
                        userId}, this.onEndGetAllAccountsDelegate, this.onGetAllAccountsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginGetAccountBalance(System.Guid userId, int accountId, System.DateTime dateTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccountBalance(userId, accountId, dateTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        decimal Fab.Client.MoneyServiceReference.IMoneyService.EndGetAccountBalance(System.IAsyncResult result) {
            return base.Channel.EndGetAccountBalance(result);
        }
        
        private System.IAsyncResult OnBeginGetAccountBalance(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            System.DateTime dateTime = ((System.DateTime)(inValues[2]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginGetAccountBalance(userId, accountId, dateTime, callback, asyncState);
        }
        
        private object[] OnEndGetAccountBalance(System.IAsyncResult result) {
            decimal retVal = ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndGetAccountBalance(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccountBalanceCompleted(object state) {
            if ((this.GetAccountBalanceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccountBalanceCompleted(this, new GetAccountBalanceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccountBalanceAsync(System.Guid userId, int accountId, System.DateTime dateTime) {
            this.GetAccountBalanceAsync(userId, accountId, dateTime, null);
        }
        
        public void GetAccountBalanceAsync(System.Guid userId, int accountId, System.DateTime dateTime, object userState) {
            if ((this.onBeginGetAccountBalanceDelegate == null)) {
                this.onBeginGetAccountBalanceDelegate = new BeginOperationDelegate(this.OnBeginGetAccountBalance);
            }
            if ((this.onEndGetAccountBalanceDelegate == null)) {
                this.onEndGetAccountBalanceDelegate = new EndOperationDelegate(this.OnEndGetAccountBalance);
            }
            if ((this.onGetAccountBalanceCompletedDelegate == null)) {
                this.onGetAccountBalanceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccountBalanceCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccountBalanceDelegate, new object[] {
                        userId,
                        accountId,
                        dateTime}, this.onEndGetAccountBalanceDelegate, this.onGetAccountBalanceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginCreateCategory(System.Guid userId, string name, Fab.Client.MoneyServiceReference.CategoryType categoryType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateCategory(userId, name, categoryType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Fab.Client.MoneyServiceReference.IMoneyService.EndCreateCategory(System.IAsyncResult result) {
            return base.Channel.EndCreateCategory(result);
        }
        
        private System.IAsyncResult OnBeginCreateCategory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string name = ((string)(inValues[1]));
            Fab.Client.MoneyServiceReference.CategoryType categoryType = ((Fab.Client.MoneyServiceReference.CategoryType)(inValues[2]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginCreateCategory(userId, name, categoryType, callback, asyncState);
        }
        
        private object[] OnEndCreateCategory(System.IAsyncResult result) {
            int retVal = ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndCreateCategory(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateCategoryCompleted(object state) {
            if ((this.CreateCategoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateCategoryCompleted(this, new CreateCategoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateCategoryAsync(System.Guid userId, string name, Fab.Client.MoneyServiceReference.CategoryType categoryType) {
            this.CreateCategoryAsync(userId, name, categoryType, null);
        }
        
        public void CreateCategoryAsync(System.Guid userId, string name, Fab.Client.MoneyServiceReference.CategoryType categoryType, object userState) {
            if ((this.onBeginCreateCategoryDelegate == null)) {
                this.onBeginCreateCategoryDelegate = new BeginOperationDelegate(this.OnBeginCreateCategory);
            }
            if ((this.onEndCreateCategoryDelegate == null)) {
                this.onEndCreateCategoryDelegate = new EndOperationDelegate(this.OnEndCreateCategory);
            }
            if ((this.onCreateCategoryCompletedDelegate == null)) {
                this.onCreateCategoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateCategoryCompleted);
            }
            base.InvokeAsync(this.onBeginCreateCategoryDelegate, new object[] {
                        userId,
                        name,
                        categoryType}, this.onEndCreateCategoryDelegate, this.onCreateCategoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginGetCategory(System.Guid userId, int categoryId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCategory(userId, categoryId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Fab.Client.MoneyServiceReference.CategoryDTO Fab.Client.MoneyServiceReference.IMoneyService.EndGetCategory(System.IAsyncResult result) {
            return base.Channel.EndGetCategory(result);
        }
        
        private System.IAsyncResult OnBeginGetCategory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int categoryId = ((int)(inValues[1]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginGetCategory(userId, categoryId, callback, asyncState);
        }
        
        private object[] OnEndGetCategory(System.IAsyncResult result) {
            Fab.Client.MoneyServiceReference.CategoryDTO retVal = ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndGetCategory(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCategoryCompleted(object state) {
            if ((this.GetCategoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCategoryCompleted(this, new GetCategoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCategoryAsync(System.Guid userId, int categoryId) {
            this.GetCategoryAsync(userId, categoryId, null);
        }
        
        public void GetCategoryAsync(System.Guid userId, int categoryId, object userState) {
            if ((this.onBeginGetCategoryDelegate == null)) {
                this.onBeginGetCategoryDelegate = new BeginOperationDelegate(this.OnBeginGetCategory);
            }
            if ((this.onEndGetCategoryDelegate == null)) {
                this.onEndGetCategoryDelegate = new EndOperationDelegate(this.OnEndGetCategory);
            }
            if ((this.onGetCategoryCompletedDelegate == null)) {
                this.onGetCategoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCategoryCompleted);
            }
            base.InvokeAsync(this.onBeginGetCategoryDelegate, new object[] {
                        userId,
                        categoryId}, this.onEndGetCategoryDelegate, this.onGetCategoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginUpdateCategory(System.Guid userId, int categoryId, string name, Fab.Client.MoneyServiceReference.CategoryType categoryType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateCategory(userId, categoryId, name, categoryType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.MoneyServiceReference.IMoneyService.EndUpdateCategory(System.IAsyncResult result) {
            base.Channel.EndUpdateCategory(result);
        }
        
        private System.IAsyncResult OnBeginUpdateCategory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int categoryId = ((int)(inValues[1]));
            string name = ((string)(inValues[2]));
            Fab.Client.MoneyServiceReference.CategoryType categoryType = ((Fab.Client.MoneyServiceReference.CategoryType)(inValues[3]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginUpdateCategory(userId, categoryId, name, categoryType, callback, asyncState);
        }
        
        private object[] OnEndUpdateCategory(System.IAsyncResult result) {
            ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndUpdateCategory(result);
            return null;
        }
        
        private void OnUpdateCategoryCompleted(object state) {
            if ((this.UpdateCategoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateCategoryAsync(System.Guid userId, int categoryId, string name, Fab.Client.MoneyServiceReference.CategoryType categoryType) {
            this.UpdateCategoryAsync(userId, categoryId, name, categoryType, null);
        }
        
        public void UpdateCategoryAsync(System.Guid userId, int categoryId, string name, Fab.Client.MoneyServiceReference.CategoryType categoryType, object userState) {
            if ((this.onBeginUpdateCategoryDelegate == null)) {
                this.onBeginUpdateCategoryDelegate = new BeginOperationDelegate(this.OnBeginUpdateCategory);
            }
            if ((this.onEndUpdateCategoryDelegate == null)) {
                this.onEndUpdateCategoryDelegate = new EndOperationDelegate(this.OnEndUpdateCategory);
            }
            if ((this.onUpdateCategoryCompletedDelegate == null)) {
                this.onUpdateCategoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCategoryCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateCategoryDelegate, new object[] {
                        userId,
                        categoryId,
                        name,
                        categoryType}, this.onEndUpdateCategoryDelegate, this.onUpdateCategoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginDeleteCategory(System.Guid userId, int categoryId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteCategory(userId, categoryId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.MoneyServiceReference.IMoneyService.EndDeleteCategory(System.IAsyncResult result) {
            base.Channel.EndDeleteCategory(result);
        }
        
        private System.IAsyncResult OnBeginDeleteCategory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int categoryId = ((int)(inValues[1]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginDeleteCategory(userId, categoryId, callback, asyncState);
        }
        
        private object[] OnEndDeleteCategory(System.IAsyncResult result) {
            ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndDeleteCategory(result);
            return null;
        }
        
        private void OnDeleteCategoryCompleted(object state) {
            if ((this.DeleteCategoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteCategoryAsync(System.Guid userId, int categoryId) {
            this.DeleteCategoryAsync(userId, categoryId, null);
        }
        
        public void DeleteCategoryAsync(System.Guid userId, int categoryId, object userState) {
            if ((this.onBeginDeleteCategoryDelegate == null)) {
                this.onBeginDeleteCategoryDelegate = new BeginOperationDelegate(this.OnBeginDeleteCategory);
            }
            if ((this.onEndDeleteCategoryDelegate == null)) {
                this.onEndDeleteCategoryDelegate = new EndOperationDelegate(this.OnEndDeleteCategory);
            }
            if ((this.onDeleteCategoryCompletedDelegate == null)) {
                this.onDeleteCategoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCategoryCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteCategoryDelegate, new object[] {
                        userId,
                        categoryId}, this.onEndDeleteCategoryDelegate, this.onDeleteCategoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginGetAllCategories(System.Guid userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllCategories(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Fab.Client.MoneyServiceReference.CategoryDTO[] Fab.Client.MoneyServiceReference.IMoneyService.EndGetAllCategories(System.IAsyncResult result) {
            return base.Channel.EndGetAllCategories(result);
        }
        
        private System.IAsyncResult OnBeginGetAllCategories(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginGetAllCategories(userId, callback, asyncState);
        }
        
        private object[] OnEndGetAllCategories(System.IAsyncResult result) {
            Fab.Client.MoneyServiceReference.CategoryDTO[] retVal = ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndGetAllCategories(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllCategoriesCompleted(object state) {
            if ((this.GetAllCategoriesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllCategoriesCompleted(this, new GetAllCategoriesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllCategoriesAsync(System.Guid userId) {
            this.GetAllCategoriesAsync(userId, null);
        }
        
        public void GetAllCategoriesAsync(System.Guid userId, object userState) {
            if ((this.onBeginGetAllCategoriesDelegate == null)) {
                this.onBeginGetAllCategoriesDelegate = new BeginOperationDelegate(this.OnBeginGetAllCategories);
            }
            if ((this.onEndGetAllCategoriesDelegate == null)) {
                this.onEndGetAllCategoriesDelegate = new EndOperationDelegate(this.OnEndGetAllCategories);
            }
            if ((this.onGetAllCategoriesCompletedDelegate == null)) {
                this.onGetAllCategoriesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllCategoriesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllCategoriesDelegate, new object[] {
                        userId}, this.onEndGetAllCategoriesDelegate, this.onGetAllCategoriesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginDeleteJournal(System.Guid userId, int accountId, int journalId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteJournal(userId, accountId, journalId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.MoneyServiceReference.IMoneyService.EndDeleteJournal(System.IAsyncResult result) {
            base.Channel.EndDeleteJournal(result);
        }
        
        private System.IAsyncResult OnBeginDeleteJournal(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            int journalId = ((int)(inValues[2]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginDeleteJournal(userId, accountId, journalId, callback, asyncState);
        }
        
        private object[] OnEndDeleteJournal(System.IAsyncResult result) {
            ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndDeleteJournal(result);
            return null;
        }
        
        private void OnDeleteJournalCompleted(object state) {
            if ((this.DeleteJournalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteJournalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteJournalAsync(System.Guid userId, int accountId, int journalId) {
            this.DeleteJournalAsync(userId, accountId, journalId, null);
        }
        
        public void DeleteJournalAsync(System.Guid userId, int accountId, int journalId, object userState) {
            if ((this.onBeginDeleteJournalDelegate == null)) {
                this.onBeginDeleteJournalDelegate = new BeginOperationDelegate(this.OnBeginDeleteJournal);
            }
            if ((this.onEndDeleteJournalDelegate == null)) {
                this.onEndDeleteJournalDelegate = new EndOperationDelegate(this.OnEndDeleteJournal);
            }
            if ((this.onDeleteJournalCompletedDelegate == null)) {
                this.onDeleteJournalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteJournalCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteJournalDelegate, new object[] {
                        userId,
                        accountId,
                        journalId}, this.onEndDeleteJournalDelegate, this.onDeleteJournalCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginGetJournal(System.Guid userId, int accountId, int journalId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetJournal(userId, accountId, journalId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Fab.Client.MoneyServiceReference.JournalDTO Fab.Client.MoneyServiceReference.IMoneyService.EndGetJournal(System.IAsyncResult result) {
            return base.Channel.EndGetJournal(result);
        }
        
        private System.IAsyncResult OnBeginGetJournal(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            int journalId = ((int)(inValues[2]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginGetJournal(userId, accountId, journalId, callback, asyncState);
        }
        
        private object[] OnEndGetJournal(System.IAsyncResult result) {
            Fab.Client.MoneyServiceReference.JournalDTO retVal = ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndGetJournal(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetJournalCompleted(object state) {
            if ((this.GetJournalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetJournalCompleted(this, new GetJournalCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetJournalAsync(System.Guid userId, int accountId, int journalId) {
            this.GetJournalAsync(userId, accountId, journalId, null);
        }
        
        public void GetJournalAsync(System.Guid userId, int accountId, int journalId, object userState) {
            if ((this.onBeginGetJournalDelegate == null)) {
                this.onBeginGetJournalDelegate = new BeginOperationDelegate(this.OnBeginGetJournal);
            }
            if ((this.onEndGetJournalDelegate == null)) {
                this.onEndGetJournalDelegate = new EndOperationDelegate(this.OnEndGetJournal);
            }
            if ((this.onGetJournalCompletedDelegate == null)) {
                this.onGetJournalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetJournalCompleted);
            }
            base.InvokeAsync(this.onBeginGetJournalDelegate, new object[] {
                        userId,
                        accountId,
                        journalId}, this.onEndGetJournalDelegate, this.onGetJournalCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginGetJournalsCount(System.Guid userId, int accountId, object queryFilter, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetJournalsCount(userId, accountId, queryFilter, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Fab.Client.MoneyServiceReference.IMoneyService.EndGetJournalsCount(System.IAsyncResult result) {
            return base.Channel.EndGetJournalsCount(result);
        }
        
        private System.IAsyncResult OnBeginGetJournalsCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            object queryFilter = ((object)(inValues[2]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginGetJournalsCount(userId, accountId, queryFilter, callback, asyncState);
        }
        
        private object[] OnEndGetJournalsCount(System.IAsyncResult result) {
            int retVal = ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndGetJournalsCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetJournalsCountCompleted(object state) {
            if ((this.GetJournalsCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetJournalsCountCompleted(this, new GetJournalsCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetJournalsCountAsync(System.Guid userId, int accountId, object queryFilter) {
            this.GetJournalsCountAsync(userId, accountId, queryFilter, null);
        }
        
        public void GetJournalsCountAsync(System.Guid userId, int accountId, object queryFilter, object userState) {
            if ((this.onBeginGetJournalsCountDelegate == null)) {
                this.onBeginGetJournalsCountDelegate = new BeginOperationDelegate(this.OnBeginGetJournalsCount);
            }
            if ((this.onEndGetJournalsCountDelegate == null)) {
                this.onEndGetJournalsCountDelegate = new EndOperationDelegate(this.OnEndGetJournalsCount);
            }
            if ((this.onGetJournalsCountCompletedDelegate == null)) {
                this.onGetJournalsCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetJournalsCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetJournalsCountDelegate, new object[] {
                        userId,
                        accountId,
                        queryFilter}, this.onEndGetJournalsCountDelegate, this.onGetJournalsCountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginGetJournals(System.Guid userId, int accountId, object queryFilter, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetJournals(userId, accountId, queryFilter, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Fab.Client.MoneyServiceReference.JournalDTO[] Fab.Client.MoneyServiceReference.IMoneyService.EndGetJournals(System.IAsyncResult result) {
            return base.Channel.EndGetJournals(result);
        }
        
        private System.IAsyncResult OnBeginGetJournals(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            object queryFilter = ((object)(inValues[2]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginGetJournals(userId, accountId, queryFilter, callback, asyncState);
        }
        
        private object[] OnEndGetJournals(System.IAsyncResult result) {
            Fab.Client.MoneyServiceReference.JournalDTO[] retVal = ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndGetJournals(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetJournalsCompleted(object state) {
            if ((this.GetJournalsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetJournalsCompleted(this, new GetJournalsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetJournalsAsync(System.Guid userId, int accountId, object queryFilter) {
            this.GetJournalsAsync(userId, accountId, queryFilter, null);
        }
        
        public void GetJournalsAsync(System.Guid userId, int accountId, object queryFilter, object userState) {
            if ((this.onBeginGetJournalsDelegate == null)) {
                this.onBeginGetJournalsDelegate = new BeginOperationDelegate(this.OnBeginGetJournals);
            }
            if ((this.onEndGetJournalsDelegate == null)) {
                this.onEndGetJournalsDelegate = new EndOperationDelegate(this.OnEndGetJournals);
            }
            if ((this.onGetJournalsCompletedDelegate == null)) {
                this.onGetJournalsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetJournalsCompleted);
            }
            base.InvokeAsync(this.onBeginGetJournalsDelegate, new object[] {
                        userId,
                        accountId,
                        queryFilter}, this.onEndGetJournalsDelegate, this.onGetJournalsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginGetAllAssetTypes(System.Guid userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllAssetTypes(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Fab.Client.MoneyServiceReference.AssetTypeDTO[] Fab.Client.MoneyServiceReference.IMoneyService.EndGetAllAssetTypes(System.IAsyncResult result) {
            return base.Channel.EndGetAllAssetTypes(result);
        }
        
        private System.IAsyncResult OnBeginGetAllAssetTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginGetAllAssetTypes(userId, callback, asyncState);
        }
        
        private object[] OnEndGetAllAssetTypes(System.IAsyncResult result) {
            Fab.Client.MoneyServiceReference.AssetTypeDTO[] retVal = ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndGetAllAssetTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllAssetTypesCompleted(object state) {
            if ((this.GetAllAssetTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllAssetTypesCompleted(this, new GetAllAssetTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllAssetTypesAsync(System.Guid userId) {
            this.GetAllAssetTypesAsync(userId, null);
        }
        
        public void GetAllAssetTypesAsync(System.Guid userId, object userState) {
            if ((this.onBeginGetAllAssetTypesDelegate == null)) {
                this.onBeginGetAllAssetTypesDelegate = new BeginOperationDelegate(this.OnBeginGetAllAssetTypes);
            }
            if ((this.onEndGetAllAssetTypesDelegate == null)) {
                this.onEndGetAllAssetTypesDelegate = new EndOperationDelegate(this.OnEndGetAllAssetTypes);
            }
            if ((this.onGetAllAssetTypesCompletedDelegate == null)) {
                this.onGetAllAssetTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllAssetTypesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllAssetTypesDelegate, new object[] {
                        userId}, this.onEndGetAllAssetTypesDelegate, this.onGetAllAssetTypesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginDeposit(System.Guid userId, int accountId, System.DateTime date, decimal rate, decimal quantity, System.Nullable<int> categoryId, string comment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeposit(userId, accountId, date, rate, quantity, categoryId, comment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Fab.Client.MoneyServiceReference.IMoneyService.EndDeposit(System.IAsyncResult result) {
            return base.Channel.EndDeposit(result);
        }
        
        private System.IAsyncResult OnBeginDeposit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            System.DateTime date = ((System.DateTime)(inValues[2]));
            decimal rate = ((decimal)(inValues[3]));
            decimal quantity = ((decimal)(inValues[4]));
            System.Nullable<int> categoryId = ((System.Nullable<int>)(inValues[5]));
            string comment = ((string)(inValues[6]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginDeposit(userId, accountId, date, rate, quantity, categoryId, comment, callback, asyncState);
        }
        
        private object[] OnEndDeposit(System.IAsyncResult result) {
            int retVal = ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndDeposit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDepositCompleted(object state) {
            if ((this.DepositCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DepositCompleted(this, new DepositCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DepositAsync(System.Guid userId, int accountId, System.DateTime date, decimal rate, decimal quantity, System.Nullable<int> categoryId, string comment) {
            this.DepositAsync(userId, accountId, date, rate, quantity, categoryId, comment, null);
        }
        
        public void DepositAsync(System.Guid userId, int accountId, System.DateTime date, decimal rate, decimal quantity, System.Nullable<int> categoryId, string comment, object userState) {
            if ((this.onBeginDepositDelegate == null)) {
                this.onBeginDepositDelegate = new BeginOperationDelegate(this.OnBeginDeposit);
            }
            if ((this.onEndDepositDelegate == null)) {
                this.onEndDepositDelegate = new EndOperationDelegate(this.OnEndDeposit);
            }
            if ((this.onDepositCompletedDelegate == null)) {
                this.onDepositCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDepositCompleted);
            }
            base.InvokeAsync(this.onBeginDepositDelegate, new object[] {
                        userId,
                        accountId,
                        date,
                        rate,
                        quantity,
                        categoryId,
                        comment}, this.onEndDepositDelegate, this.onDepositCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginWithdrawal(System.Guid userId, int accountId, System.DateTime date, decimal rate, decimal quantity, System.Nullable<int> categoryId, string comment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginWithdrawal(userId, accountId, date, rate, quantity, categoryId, comment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Fab.Client.MoneyServiceReference.IMoneyService.EndWithdrawal(System.IAsyncResult result) {
            return base.Channel.EndWithdrawal(result);
        }
        
        private System.IAsyncResult OnBeginWithdrawal(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            System.DateTime date = ((System.DateTime)(inValues[2]));
            decimal rate = ((decimal)(inValues[3]));
            decimal quantity = ((decimal)(inValues[4]));
            System.Nullable<int> categoryId = ((System.Nullable<int>)(inValues[5]));
            string comment = ((string)(inValues[6]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginWithdrawal(userId, accountId, date, rate, quantity, categoryId, comment, callback, asyncState);
        }
        
        private object[] OnEndWithdrawal(System.IAsyncResult result) {
            int retVal = ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndWithdrawal(result);
            return new object[] {
                    retVal};
        }
        
        private void OnWithdrawalCompleted(object state) {
            if ((this.WithdrawalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.WithdrawalCompleted(this, new WithdrawalCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void WithdrawalAsync(System.Guid userId, int accountId, System.DateTime date, decimal rate, decimal quantity, System.Nullable<int> categoryId, string comment) {
            this.WithdrawalAsync(userId, accountId, date, rate, quantity, categoryId, comment, null);
        }
        
        public void WithdrawalAsync(System.Guid userId, int accountId, System.DateTime date, decimal rate, decimal quantity, System.Nullable<int> categoryId, string comment, object userState) {
            if ((this.onBeginWithdrawalDelegate == null)) {
                this.onBeginWithdrawalDelegate = new BeginOperationDelegate(this.OnBeginWithdrawal);
            }
            if ((this.onEndWithdrawalDelegate == null)) {
                this.onEndWithdrawalDelegate = new EndOperationDelegate(this.OnEndWithdrawal);
            }
            if ((this.onWithdrawalCompletedDelegate == null)) {
                this.onWithdrawalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnWithdrawalCompleted);
            }
            base.InvokeAsync(this.onBeginWithdrawalDelegate, new object[] {
                        userId,
                        accountId,
                        date,
                        rate,
                        quantity,
                        categoryId,
                        comment}, this.onEndWithdrawalDelegate, this.onWithdrawalCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginUpdateTransaction(System.Guid userId, int accountId, int transactionId, bool isDeposit, System.DateTime date, decimal rate, decimal quantity, System.Nullable<int> categoryId, string comment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateTransaction(userId, accountId, transactionId, isDeposit, date, rate, quantity, categoryId, comment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.MoneyServiceReference.IMoneyService.EndUpdateTransaction(System.IAsyncResult result) {
            base.Channel.EndUpdateTransaction(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTransaction(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            int transactionId = ((int)(inValues[2]));
            bool isDeposit = ((bool)(inValues[3]));
            System.DateTime date = ((System.DateTime)(inValues[4]));
            decimal rate = ((decimal)(inValues[5]));
            decimal quantity = ((decimal)(inValues[6]));
            System.Nullable<int> categoryId = ((System.Nullable<int>)(inValues[7]));
            string comment = ((string)(inValues[8]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginUpdateTransaction(userId, accountId, transactionId, isDeposit, date, rate, quantity, categoryId, comment, callback, asyncState);
        }
        
        private object[] OnEndUpdateTransaction(System.IAsyncResult result) {
            ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndUpdateTransaction(result);
            return null;
        }
        
        private void OnUpdateTransactionCompleted(object state) {
            if ((this.UpdateTransactionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTransactionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTransactionAsync(System.Guid userId, int accountId, int transactionId, bool isDeposit, System.DateTime date, decimal rate, decimal quantity, System.Nullable<int> categoryId, string comment) {
            this.UpdateTransactionAsync(userId, accountId, transactionId, isDeposit, date, rate, quantity, categoryId, comment, null);
        }
        
        public void UpdateTransactionAsync(System.Guid userId, int accountId, int transactionId, bool isDeposit, System.DateTime date, decimal rate, decimal quantity, System.Nullable<int> categoryId, string comment, object userState) {
            if ((this.onBeginUpdateTransactionDelegate == null)) {
                this.onBeginUpdateTransactionDelegate = new BeginOperationDelegate(this.OnBeginUpdateTransaction);
            }
            if ((this.onEndUpdateTransactionDelegate == null)) {
                this.onEndUpdateTransactionDelegate = new EndOperationDelegate(this.OnEndUpdateTransaction);
            }
            if ((this.onUpdateTransactionCompletedDelegate == null)) {
                this.onUpdateTransactionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTransactionCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTransactionDelegate, new object[] {
                        userId,
                        accountId,
                        transactionId,
                        isDeposit,
                        date,
                        rate,
                        quantity,
                        categoryId,
                        comment}, this.onEndUpdateTransactionDelegate, this.onUpdateTransactionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginTransfer(System.Guid userId, int fromAccountId, int toAccountId, System.DateTime date, decimal rate, decimal quantity, string comment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTransfer(userId, fromAccountId, toAccountId, date, rate, quantity, comment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Fab.Client.MoneyServiceReference.IMoneyService.EndTransfer(System.IAsyncResult result) {
            return base.Channel.EndTransfer(result);
        }
        
        private System.IAsyncResult OnBeginTransfer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int fromAccountId = ((int)(inValues[1]));
            int toAccountId = ((int)(inValues[2]));
            System.DateTime date = ((System.DateTime)(inValues[3]));
            decimal rate = ((decimal)(inValues[4]));
            decimal quantity = ((decimal)(inValues[5]));
            string comment = ((string)(inValues[6]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginTransfer(userId, fromAccountId, toAccountId, date, rate, quantity, comment, callback, asyncState);
        }
        
        private object[] OnEndTransfer(System.IAsyncResult result) {
            int retVal = ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndTransfer(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTransferCompleted(object state) {
            if ((this.TransferCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TransferCompleted(this, new TransferCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TransferAsync(System.Guid userId, int fromAccountId, int toAccountId, System.DateTime date, decimal rate, decimal quantity, string comment) {
            this.TransferAsync(userId, fromAccountId, toAccountId, date, rate, quantity, comment, null);
        }
        
        public void TransferAsync(System.Guid userId, int fromAccountId, int toAccountId, System.DateTime date, decimal rate, decimal quantity, string comment, object userState) {
            if ((this.onBeginTransferDelegate == null)) {
                this.onBeginTransferDelegate = new BeginOperationDelegate(this.OnBeginTransfer);
            }
            if ((this.onEndTransferDelegate == null)) {
                this.onEndTransferDelegate = new EndOperationDelegate(this.OnEndTransfer);
            }
            if ((this.onTransferCompletedDelegate == null)) {
                this.onTransferCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTransferCompleted);
            }
            base.InvokeAsync(this.onBeginTransferDelegate, new object[] {
                        userId,
                        fromAccountId,
                        toAccountId,
                        date,
                        rate,
                        quantity,
                        comment}, this.onEndTransferDelegate, this.onTransferCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginUpdateTransfer(System.Guid userId, int transactionId, int fromAccountId, int toAccountId, System.DateTime date, decimal rate, decimal quantity, string comment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateTransfer(userId, transactionId, fromAccountId, toAccountId, date, rate, quantity, comment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.MoneyServiceReference.IMoneyService.EndUpdateTransfer(System.IAsyncResult result) {
            base.Channel.EndUpdateTransfer(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTransfer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int transactionId = ((int)(inValues[1]));
            int fromAccountId = ((int)(inValues[2]));
            int toAccountId = ((int)(inValues[3]));
            System.DateTime date = ((System.DateTime)(inValues[4]));
            decimal rate = ((decimal)(inValues[5]));
            decimal quantity = ((decimal)(inValues[6]));
            string comment = ((string)(inValues[7]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginUpdateTransfer(userId, transactionId, fromAccountId, toAccountId, date, rate, quantity, comment, callback, asyncState);
        }
        
        private object[] OnEndUpdateTransfer(System.IAsyncResult result) {
            ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndUpdateTransfer(result);
            return null;
        }
        
        private void OnUpdateTransferCompleted(object state) {
            if ((this.UpdateTransferCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTransferCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTransferAsync(System.Guid userId, int transactionId, int fromAccountId, int toAccountId, System.DateTime date, decimal rate, decimal quantity, string comment) {
            this.UpdateTransferAsync(userId, transactionId, fromAccountId, toAccountId, date, rate, quantity, comment, null);
        }
        
        public void UpdateTransferAsync(System.Guid userId, int transactionId, int fromAccountId, int toAccountId, System.DateTime date, decimal rate, decimal quantity, string comment, object userState) {
            if ((this.onBeginUpdateTransferDelegate == null)) {
                this.onBeginUpdateTransferDelegate = new BeginOperationDelegate(this.OnBeginUpdateTransfer);
            }
            if ((this.onEndUpdateTransferDelegate == null)) {
                this.onEndUpdateTransferDelegate = new EndOperationDelegate(this.OnEndUpdateTransfer);
            }
            if ((this.onUpdateTransferCompletedDelegate == null)) {
                this.onUpdateTransferCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTransferCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTransferDelegate, new object[] {
                        userId,
                        transactionId,
                        fromAccountId,
                        toAccountId,
                        date,
                        rate,
                        quantity,
                        comment}, this.onEndUpdateTransferDelegate, this.onUpdateTransferCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Fab.Client.MoneyServiceReference.IMoneyService CreateChannel() {
            return new MoneyServiceClientChannel(this);
        }
        
        private class MoneyServiceClientChannel : ChannelBase<Fab.Client.MoneyServiceReference.IMoneyService>, Fab.Client.MoneyServiceReference.IMoneyService {
            
            public MoneyServiceClientChannel(System.ServiceModel.ClientBase<Fab.Client.MoneyServiceReference.IMoneyService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCreateAccount(System.Guid userId, string name, int assetTypeId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = name;
                _args[2] = assetTypeId;
                System.IAsyncResult _result = base.BeginInvoke("CreateAccount", _args, callback, asyncState);
                return _result;
            }
            
            public int EndCreateAccount(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("CreateAccount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAccount(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = accountId;
                System.IAsyncResult _result = base.BeginInvoke("GetAccount", _args, callback, asyncState);
                return _result;
            }
            
            public Fab.Client.MoneyServiceReference.AccountDTO EndGetAccount(System.IAsyncResult result) {
                object[] _args = new object[0];
                Fab.Client.MoneyServiceReference.AccountDTO _result = ((Fab.Client.MoneyServiceReference.AccountDTO)(base.EndInvoke("GetAccount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateAccount(System.Guid userId, int accountId, string name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = accountId;
                _args[2] = name;
                System.IAsyncResult _result = base.BeginInvoke("UpdateAccount", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateAccount(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateAccount", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteAccount(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = accountId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteAccount", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteAccount(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteAccount", _args, result);
            }
            
            public System.IAsyncResult BeginGetAllAccounts(System.Guid userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userId;
                System.IAsyncResult _result = base.BeginInvoke("GetAllAccounts", _args, callback, asyncState);
                return _result;
            }
            
            public Fab.Client.MoneyServiceReference.AccountDTO[] EndGetAllAccounts(System.IAsyncResult result) {
                object[] _args = new object[0];
                Fab.Client.MoneyServiceReference.AccountDTO[] _result = ((Fab.Client.MoneyServiceReference.AccountDTO[])(base.EndInvoke("GetAllAccounts", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAccountBalance(System.Guid userId, int accountId, System.DateTime dateTime, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = accountId;
                _args[2] = dateTime;
                System.IAsyncResult _result = base.BeginInvoke("GetAccountBalance", _args, callback, asyncState);
                return _result;
            }
            
            public decimal EndGetAccountBalance(System.IAsyncResult result) {
                object[] _args = new object[0];
                decimal _result = ((decimal)(base.EndInvoke("GetAccountBalance", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateCategory(System.Guid userId, string name, Fab.Client.MoneyServiceReference.CategoryType categoryType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = name;
                _args[2] = categoryType;
                System.IAsyncResult _result = base.BeginInvoke("CreateCategory", _args, callback, asyncState);
                return _result;
            }
            
            public int EndCreateCategory(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("CreateCategory", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCategory(System.Guid userId, int categoryId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = categoryId;
                System.IAsyncResult _result = base.BeginInvoke("GetCategory", _args, callback, asyncState);
                return _result;
            }
            
            public Fab.Client.MoneyServiceReference.CategoryDTO EndGetCategory(System.IAsyncResult result) {
                object[] _args = new object[0];
                Fab.Client.MoneyServiceReference.CategoryDTO _result = ((Fab.Client.MoneyServiceReference.CategoryDTO)(base.EndInvoke("GetCategory", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateCategory(System.Guid userId, int categoryId, string name, Fab.Client.MoneyServiceReference.CategoryType categoryType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userId;
                _args[1] = categoryId;
                _args[2] = name;
                _args[3] = categoryType;
                System.IAsyncResult _result = base.BeginInvoke("UpdateCategory", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateCategory(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateCategory", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteCategory(System.Guid userId, int categoryId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = categoryId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteCategory", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteCategory(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteCategory", _args, result);
            }
            
            public System.IAsyncResult BeginGetAllCategories(System.Guid userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userId;
                System.IAsyncResult _result = base.BeginInvoke("GetAllCategories", _args, callback, asyncState);
                return _result;
            }
            
            public Fab.Client.MoneyServiceReference.CategoryDTO[] EndGetAllCategories(System.IAsyncResult result) {
                object[] _args = new object[0];
                Fab.Client.MoneyServiceReference.CategoryDTO[] _result = ((Fab.Client.MoneyServiceReference.CategoryDTO[])(base.EndInvoke("GetAllCategories", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteJournal(System.Guid userId, int accountId, int journalId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = accountId;
                _args[2] = journalId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteJournal", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteJournal(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteJournal", _args, result);
            }
            
            public System.IAsyncResult BeginGetJournal(System.Guid userId, int accountId, int journalId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = accountId;
                _args[2] = journalId;
                System.IAsyncResult _result = base.BeginInvoke("GetJournal", _args, callback, asyncState);
                return _result;
            }
            
            public Fab.Client.MoneyServiceReference.JournalDTO EndGetJournal(System.IAsyncResult result) {
                object[] _args = new object[0];
                Fab.Client.MoneyServiceReference.JournalDTO _result = ((Fab.Client.MoneyServiceReference.JournalDTO)(base.EndInvoke("GetJournal", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetJournalsCount(System.Guid userId, int accountId, object queryFilter, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = accountId;
                _args[2] = queryFilter;
                System.IAsyncResult _result = base.BeginInvoke("GetJournalsCount", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetJournalsCount(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetJournalsCount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetJournals(System.Guid userId, int accountId, object queryFilter, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = accountId;
                _args[2] = queryFilter;
                System.IAsyncResult _result = base.BeginInvoke("GetJournals", _args, callback, asyncState);
                return _result;
            }
            
            public Fab.Client.MoneyServiceReference.JournalDTO[] EndGetJournals(System.IAsyncResult result) {
                object[] _args = new object[0];
                Fab.Client.MoneyServiceReference.JournalDTO[] _result = ((Fab.Client.MoneyServiceReference.JournalDTO[])(base.EndInvoke("GetJournals", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllAssetTypes(System.Guid userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userId;
                System.IAsyncResult _result = base.BeginInvoke("GetAllAssetTypes", _args, callback, asyncState);
                return _result;
            }
            
            public Fab.Client.MoneyServiceReference.AssetTypeDTO[] EndGetAllAssetTypes(System.IAsyncResult result) {
                object[] _args = new object[0];
                Fab.Client.MoneyServiceReference.AssetTypeDTO[] _result = ((Fab.Client.MoneyServiceReference.AssetTypeDTO[])(base.EndInvoke("GetAllAssetTypes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeposit(System.Guid userId, int accountId, System.DateTime date, decimal rate, decimal quantity, System.Nullable<int> categoryId, string comment, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = userId;
                _args[1] = accountId;
                _args[2] = date;
                _args[3] = rate;
                _args[4] = quantity;
                _args[5] = categoryId;
                _args[6] = comment;
                System.IAsyncResult _result = base.BeginInvoke("Deposit", _args, callback, asyncState);
                return _result;
            }
            
            public int EndDeposit(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("Deposit", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginWithdrawal(System.Guid userId, int accountId, System.DateTime date, decimal rate, decimal quantity, System.Nullable<int> categoryId, string comment, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = userId;
                _args[1] = accountId;
                _args[2] = date;
                _args[3] = rate;
                _args[4] = quantity;
                _args[5] = categoryId;
                _args[6] = comment;
                System.IAsyncResult _result = base.BeginInvoke("Withdrawal", _args, callback, asyncState);
                return _result;
            }
            
            public int EndWithdrawal(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("Withdrawal", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateTransaction(System.Guid userId, int accountId, int transactionId, bool isDeposit, System.DateTime date, decimal rate, decimal quantity, System.Nullable<int> categoryId, string comment, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[9];
                _args[0] = userId;
                _args[1] = accountId;
                _args[2] = transactionId;
                _args[3] = isDeposit;
                _args[4] = date;
                _args[5] = rate;
                _args[6] = quantity;
                _args[7] = categoryId;
                _args[8] = comment;
                System.IAsyncResult _result = base.BeginInvoke("UpdateTransaction", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateTransaction(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateTransaction", _args, result);
            }
            
            public System.IAsyncResult BeginTransfer(System.Guid userId, int fromAccountId, int toAccountId, System.DateTime date, decimal rate, decimal quantity, string comment, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = userId;
                _args[1] = fromAccountId;
                _args[2] = toAccountId;
                _args[3] = date;
                _args[4] = rate;
                _args[5] = quantity;
                _args[6] = comment;
                System.IAsyncResult _result = base.BeginInvoke("Transfer", _args, callback, asyncState);
                return _result;
            }
            
            public int EndTransfer(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("Transfer", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateTransfer(System.Guid userId, int transactionId, int fromAccountId, int toAccountId, System.DateTime date, decimal rate, decimal quantity, string comment, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = userId;
                _args[1] = transactionId;
                _args[2] = fromAccountId;
                _args[3] = toAccountId;
                _args[4] = date;
                _args[5] = rate;
                _args[6] = quantity;
                _args[7] = comment;
                System.IAsyncResult _result = base.BeginInvoke("UpdateTransfer", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateTransfer(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateTransfer", _args, result);
            }
        }
    }
}
