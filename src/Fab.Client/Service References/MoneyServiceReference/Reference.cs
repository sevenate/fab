//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace Fab.Client.MoneyServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccountDTO", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core.DTO")]
    public partial class AccountDTO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Fab.Client.MoneyServiceReference.AssetTypeDTO AssetTypeField;
        
        private System.DateTime CreatedField;
        
        private int IdField;
        
        private bool IsDeletedField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.MoneyServiceReference.AssetTypeDTO AssetType {
            get {
                return this.AssetTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.AssetTypeField, value) != true)) {
                    this.AssetTypeField = value;
                    this.RaisePropertyChanged("AssetType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Created {
            get {
                return this.CreatedField;
            }
            set {
                if ((this.CreatedField.Equals(value) != true)) {
                    this.CreatedField = value;
                    this.RaisePropertyChanged("Created");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AssetTypeDTO", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core.DTO")]
    public partial class AssetTypeDTO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CategoryDTO", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core.DTO")]
    public partial class CategoryDTO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private byte CategoryTypeField;
        
        private int IdField;
        
        private bool IsDeletedField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte CategoryType {
            get {
                return this.CategoryTypeField;
            }
            set {
                if ((this.CategoryTypeField.Equals(value) != true)) {
                    this.CategoryTypeField = value;
                    this.RaisePropertyChanged("CategoryType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransactionDTO", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core.DTO")]
    public partial class TransactionDTO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Fab.Client.MoneyServiceReference.CategoryDTO CategoryField;
        
        private string CommentField;
        
        private int IdField;
        
        private bool IsDeletedField;
        
        private byte JournalTypeField;
        
        private Fab.Client.MoneyServiceReference.PostingDTO[] PostingsField;
        
        private decimal PriceField;
        
        private decimal QuantityField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.MoneyServiceReference.CategoryDTO Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte JournalType {
            get {
                return this.JournalTypeField;
            }
            set {
                if ((this.JournalTypeField.Equals(value) != true)) {
                    this.JournalTypeField = value;
                    this.RaisePropertyChanged("JournalType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.MoneyServiceReference.PostingDTO[] Postings {
            get {
                return this.PostingsField;
            }
            set {
                if ((object.ReferenceEquals(this.PostingsField, value) != true)) {
                    this.PostingsField = value;
                    this.RaisePropertyChanged("Postings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PostingDTO", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core.DTO")]
    public partial class PostingDTO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Fab.Client.MoneyServiceReference.AccountDTO AccountField;
        
        private decimal AmountField;
        
        private System.DateTime DateField;
        
        private int IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.MoneyServiceReference.AccountDTO Account {
            get {
                return this.AccountField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountField, value) != true)) {
                    this.AccountField = value;
                    this.RaisePropertyChanged("Account");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransactionRecord", Namespace="http://schemas.datacontract.org/2004/07/Fab.Server.Core")]
    public partial class TransactionRecord : object, System.ComponentModel.INotifyPropertyChanged {
        
        private decimal BalanceField;
        
        private Fab.Client.MoneyServiceReference.CategoryDTO CategoryField;
        
        private string CommentField;
        
        private System.DateTime DateField;
        
        private decimal ExpenseField;
        
        private decimal IncomeField;
        
        private int TransactionIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Balance {
            get {
                return this.BalanceField;
            }
            set {
                if ((this.BalanceField.Equals(value) != true)) {
                    this.BalanceField = value;
                    this.RaisePropertyChanged("Balance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Fab.Client.MoneyServiceReference.CategoryDTO Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Expense {
            get {
                return this.ExpenseField;
            }
            set {
                if ((this.ExpenseField.Equals(value) != true)) {
                    this.ExpenseField = value;
                    this.RaisePropertyChanged("Expense");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Income {
            get {
                return this.IncomeField;
            }
            set {
                if ((this.IncomeField.Equals(value) != true)) {
                    this.IncomeField = value;
                    this.RaisePropertyChanged("Income");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TransactionId {
            get {
                return this.TransactionIdField;
            }
            set {
                if ((this.TransactionIdField.Equals(value) != true)) {
                    this.TransactionIdField = value;
                    this.RaisePropertyChanged("TransactionId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MoneyServiceReference.IMoneyService")]
    public interface IMoneyService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/CreateAccount", ReplyAction="http://tempuri.org/IMoneyService/CreateAccountResponse")]
        System.IAsyncResult BeginCreateAccount(System.Guid userId, string name, int assetTypeId, System.AsyncCallback callback, object asyncState);
        
        void EndCreateAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/UpdateAccount", ReplyAction="http://tempuri.org/IMoneyService/UpdateAccountResponse")]
        System.IAsyncResult BeginUpdateAccount(System.Guid userId, int accountId, string name, int assetTypeId, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/DeleteAccount", ReplyAction="http://tempuri.org/IMoneyService/DeleteAccountResponse")]
        System.IAsyncResult BeginDeleteAccount(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/GetAllAccounts", ReplyAction="http://tempuri.org/IMoneyService/GetAllAccountsResponse")]
        System.IAsyncResult BeginGetAllAccounts(System.Guid userId, System.AsyncCallback callback, object asyncState);
        
        Fab.Client.MoneyServiceReference.AccountDTO[] EndGetAllAccounts(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/GetAccountBalance", ReplyAction="http://tempuri.org/IMoneyService/GetAccountBalanceResponse")]
        System.IAsyncResult BeginGetAccountBalance(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState);
        
        decimal EndGetAccountBalance(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/CreateCategory", ReplyAction="http://tempuri.org/IMoneyService/CreateCategoryResponse")]
        System.IAsyncResult BeginCreateCategory(System.Guid userId, string name, byte categoryType, System.AsyncCallback callback, object asyncState);
        
        void EndCreateCategory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/UpdateCategory", ReplyAction="http://tempuri.org/IMoneyService/UpdateCategoryResponse")]
        System.IAsyncResult BeginUpdateCategory(System.Guid userId, int categoryId, string name, byte categoryType, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateCategory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/DeleteCategory", ReplyAction="http://tempuri.org/IMoneyService/DeleteCategoryResponse")]
        System.IAsyncResult BeginDeleteCategory(System.Guid userId, int categoryId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteCategory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/GetAllCategories", ReplyAction="http://tempuri.org/IMoneyService/GetAllCategoriesResponse")]
        System.IAsyncResult BeginGetAllCategories(System.Guid userId, System.AsyncCallback callback, object asyncState);
        
        Fab.Client.MoneyServiceReference.CategoryDTO[] EndGetAllCategories(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/GetAllAssetTypes", ReplyAction="http://tempuri.org/IMoneyService/GetAllAssetTypesResponse")]
        System.IAsyncResult BeginGetAllAssetTypes(System.AsyncCallback callback, object asyncState);
        
        Fab.Client.MoneyServiceReference.AssetTypeDTO[] EndGetAllAssetTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/Deposit", ReplyAction="http://tempuri.org/IMoneyService/DepositResponse")]
        System.IAsyncResult BeginDeposit(System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId, System.AsyncCallback callback, object asyncState);
        
        void EndDeposit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/Withdrawal", ReplyAction="http://tempuri.org/IMoneyService/WithdrawalResponse")]
        System.IAsyncResult BeginWithdrawal(System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId, System.AsyncCallback callback, object asyncState);
        
        void EndWithdrawal(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/Transfer", ReplyAction="http://tempuri.org/IMoneyService/TransferResponse")]
        System.IAsyncResult BeginTransfer(System.Guid user1Id, int account1Id, System.Guid user2Id, int account2Id, System.DateTime operationDate, decimal amount, string comment, System.AsyncCallback callback, object asyncState);
        
        void EndTransfer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/GetTransaction", ReplyAction="http://tempuri.org/IMoneyService/GetTransactionResponse")]
        System.IAsyncResult BeginGetTransaction(System.Guid userId, int accountId, int transactionId, System.AsyncCallback callback, object asyncState);
        
        Fab.Client.MoneyServiceReference.TransactionDTO EndGetTransaction(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/DeleteTransaction", ReplyAction="http://tempuri.org/IMoneyService/DeleteTransactionResponse")]
        System.IAsyncResult BeginDeleteTransaction(System.Guid userId, int accountId, int transactionId, System.DateTime operationDate, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteTransaction(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/UpdateTransaction", ReplyAction="http://tempuri.org/IMoneyService/UpdateTransactionResponse")]
        System.IAsyncResult BeginUpdateTransaction(int transactionId, System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId, bool isDeposit, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateTransaction(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/UpdateTransfer", ReplyAction="http://tempuri.org/IMoneyService/UpdateTransferResponse")]
        System.IAsyncResult BeginUpdateTransfer(int transactionId, System.Guid user1Id, int account1Id, System.Guid user2Id, int account2Id, System.DateTime operationDate, decimal amount, string comment, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateTransfer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMoneyService/GetAllTransactions", ReplyAction="http://tempuri.org/IMoneyService/GetAllTransactionsResponse")]
        System.IAsyncResult BeginGetAllTransactions(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState);
        
        Fab.Client.MoneyServiceReference.TransactionRecord[] EndGetAllTransactions(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMoneyServiceChannel : Fab.Client.MoneyServiceReference.IMoneyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllAccountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllAccountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Fab.Client.MoneyServiceReference.AccountDTO[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Fab.Client.MoneyServiceReference.AccountDTO[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccountBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccountBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public decimal Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((decimal)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllCategoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllCategoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Fab.Client.MoneyServiceReference.CategoryDTO[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Fab.Client.MoneyServiceReference.CategoryDTO[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllAssetTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllAssetTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Fab.Client.MoneyServiceReference.AssetTypeDTO[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Fab.Client.MoneyServiceReference.AssetTypeDTO[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Fab.Client.MoneyServiceReference.TransactionDTO Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Fab.Client.MoneyServiceReference.TransactionDTO)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllTransactionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllTransactionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Fab.Client.MoneyServiceReference.TransactionRecord[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Fab.Client.MoneyServiceReference.TransactionRecord[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MoneyServiceClient : System.ServiceModel.ClientBase<Fab.Client.MoneyServiceReference.IMoneyService>, Fab.Client.MoneyServiceReference.IMoneyService {
        
        private BeginOperationDelegate onBeginCreateAccountDelegate;
        
        private EndOperationDelegate onEndCreateAccountDelegate;
        
        private System.Threading.SendOrPostCallback onCreateAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateAccountDelegate;
        
        private EndOperationDelegate onEndUpdateAccountDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteAccountDelegate;
        
        private EndOperationDelegate onEndDeleteAccountDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllAccountsDelegate;
        
        private EndOperationDelegate onEndGetAllAccountsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllAccountsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccountBalanceDelegate;
        
        private EndOperationDelegate onEndGetAccountBalanceDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccountBalanceCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateCategoryDelegate;
        
        private EndOperationDelegate onEndCreateCategoryDelegate;
        
        private System.Threading.SendOrPostCallback onCreateCategoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateCategoryDelegate;
        
        private EndOperationDelegate onEndUpdateCategoryDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCategoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteCategoryDelegate;
        
        private EndOperationDelegate onEndDeleteCategoryDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCategoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllCategoriesDelegate;
        
        private EndOperationDelegate onEndGetAllCategoriesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllCategoriesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllAssetTypesDelegate;
        
        private EndOperationDelegate onEndGetAllAssetTypesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllAssetTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginDepositDelegate;
        
        private EndOperationDelegate onEndDepositDelegate;
        
        private System.Threading.SendOrPostCallback onDepositCompletedDelegate;
        
        private BeginOperationDelegate onBeginWithdrawalDelegate;
        
        private EndOperationDelegate onEndWithdrawalDelegate;
        
        private System.Threading.SendOrPostCallback onWithdrawalCompletedDelegate;
        
        private BeginOperationDelegate onBeginTransferDelegate;
        
        private EndOperationDelegate onEndTransferDelegate;
        
        private System.Threading.SendOrPostCallback onTransferCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTransactionDelegate;
        
        private EndOperationDelegate onEndGetTransactionDelegate;
        
        private System.Threading.SendOrPostCallback onGetTransactionCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteTransactionDelegate;
        
        private EndOperationDelegate onEndDeleteTransactionDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteTransactionCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTransactionDelegate;
        
        private EndOperationDelegate onEndUpdateTransactionDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTransactionCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTransferDelegate;
        
        private EndOperationDelegate onEndUpdateTransferDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTransferCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllTransactionsDelegate;
        
        private EndOperationDelegate onEndGetAllTransactionsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllTransactionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MoneyServiceClient() {
        }
        
        public MoneyServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MoneyServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MoneyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MoneyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreateAccountCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateAccountCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteAccountCompleted;
        
        public event System.EventHandler<GetAllAccountsCompletedEventArgs> GetAllAccountsCompleted;
        
        public event System.EventHandler<GetAccountBalanceCompletedEventArgs> GetAccountBalanceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreateCategoryCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateCategoryCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteCategoryCompleted;
        
        public event System.EventHandler<GetAllCategoriesCompletedEventArgs> GetAllCategoriesCompleted;
        
        public event System.EventHandler<GetAllAssetTypesCompletedEventArgs> GetAllAssetTypesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DepositCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> WithdrawalCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TransferCompleted;
        
        public event System.EventHandler<GetTransactionCompletedEventArgs> GetTransactionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteTransactionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateTransactionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateTransferCompleted;
        
        public event System.EventHandler<GetAllTransactionsCompletedEventArgs> GetAllTransactionsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginCreateAccount(System.Guid userId, string name, int assetTypeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateAccount(userId, name, assetTypeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.MoneyServiceReference.IMoneyService.EndCreateAccount(System.IAsyncResult result) {
            base.Channel.EndCreateAccount(result);
        }
        
        private System.IAsyncResult OnBeginCreateAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string name = ((string)(inValues[1]));
            int assetTypeId = ((int)(inValues[2]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginCreateAccount(userId, name, assetTypeId, callback, asyncState);
        }
        
        private object[] OnEndCreateAccount(System.IAsyncResult result) {
            ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndCreateAccount(result);
            return null;
        }
        
        private void OnCreateAccountCompleted(object state) {
            if ((this.CreateAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateAccountAsync(System.Guid userId, string name, int assetTypeId) {
            this.CreateAccountAsync(userId, name, assetTypeId, null);
        }
        
        public void CreateAccountAsync(System.Guid userId, string name, int assetTypeId, object userState) {
            if ((this.onBeginCreateAccountDelegate == null)) {
                this.onBeginCreateAccountDelegate = new BeginOperationDelegate(this.OnBeginCreateAccount);
            }
            if ((this.onEndCreateAccountDelegate == null)) {
                this.onEndCreateAccountDelegate = new EndOperationDelegate(this.OnEndCreateAccount);
            }
            if ((this.onCreateAccountCompletedDelegate == null)) {
                this.onCreateAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateAccountCompleted);
            }
            base.InvokeAsync(this.onBeginCreateAccountDelegate, new object[] {
                        userId,
                        name,
                        assetTypeId}, this.onEndCreateAccountDelegate, this.onCreateAccountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginUpdateAccount(System.Guid userId, int accountId, string name, int assetTypeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateAccount(userId, accountId, name, assetTypeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.MoneyServiceReference.IMoneyService.EndUpdateAccount(System.IAsyncResult result) {
            base.Channel.EndUpdateAccount(result);
        }
        
        private System.IAsyncResult OnBeginUpdateAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            string name = ((string)(inValues[2]));
            int assetTypeId = ((int)(inValues[3]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginUpdateAccount(userId, accountId, name, assetTypeId, callback, asyncState);
        }
        
        private object[] OnEndUpdateAccount(System.IAsyncResult result) {
            ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndUpdateAccount(result);
            return null;
        }
        
        private void OnUpdateAccountCompleted(object state) {
            if ((this.UpdateAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateAccountAsync(System.Guid userId, int accountId, string name, int assetTypeId) {
            this.UpdateAccountAsync(userId, accountId, name, assetTypeId, null);
        }
        
        public void UpdateAccountAsync(System.Guid userId, int accountId, string name, int assetTypeId, object userState) {
            if ((this.onBeginUpdateAccountDelegate == null)) {
                this.onBeginUpdateAccountDelegate = new BeginOperationDelegate(this.OnBeginUpdateAccount);
            }
            if ((this.onEndUpdateAccountDelegate == null)) {
                this.onEndUpdateAccountDelegate = new EndOperationDelegate(this.OnEndUpdateAccount);
            }
            if ((this.onUpdateAccountCompletedDelegate == null)) {
                this.onUpdateAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateAccountCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateAccountDelegate, new object[] {
                        userId,
                        accountId,
                        name,
                        assetTypeId}, this.onEndUpdateAccountDelegate, this.onUpdateAccountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginDeleteAccount(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteAccount(userId, accountId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.MoneyServiceReference.IMoneyService.EndDeleteAccount(System.IAsyncResult result) {
            base.Channel.EndDeleteAccount(result);
        }
        
        private System.IAsyncResult OnBeginDeleteAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginDeleteAccount(userId, accountId, callback, asyncState);
        }
        
        private object[] OnEndDeleteAccount(System.IAsyncResult result) {
            ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndDeleteAccount(result);
            return null;
        }
        
        private void OnDeleteAccountCompleted(object state) {
            if ((this.DeleteAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteAccountAsync(System.Guid userId, int accountId) {
            this.DeleteAccountAsync(userId, accountId, null);
        }
        
        public void DeleteAccountAsync(System.Guid userId, int accountId, object userState) {
            if ((this.onBeginDeleteAccountDelegate == null)) {
                this.onBeginDeleteAccountDelegate = new BeginOperationDelegate(this.OnBeginDeleteAccount);
            }
            if ((this.onEndDeleteAccountDelegate == null)) {
                this.onEndDeleteAccountDelegate = new EndOperationDelegate(this.OnEndDeleteAccount);
            }
            if ((this.onDeleteAccountCompletedDelegate == null)) {
                this.onDeleteAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteAccountCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteAccountDelegate, new object[] {
                        userId,
                        accountId}, this.onEndDeleteAccountDelegate, this.onDeleteAccountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginGetAllAccounts(System.Guid userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllAccounts(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Fab.Client.MoneyServiceReference.AccountDTO[] Fab.Client.MoneyServiceReference.IMoneyService.EndGetAllAccounts(System.IAsyncResult result) {
            return base.Channel.EndGetAllAccounts(result);
        }
        
        private System.IAsyncResult OnBeginGetAllAccounts(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginGetAllAccounts(userId, callback, asyncState);
        }
        
        private object[] OnEndGetAllAccounts(System.IAsyncResult result) {
            Fab.Client.MoneyServiceReference.AccountDTO[] retVal = ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndGetAllAccounts(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllAccountsCompleted(object state) {
            if ((this.GetAllAccountsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllAccountsCompleted(this, new GetAllAccountsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllAccountsAsync(System.Guid userId) {
            this.GetAllAccountsAsync(userId, null);
        }
        
        public void GetAllAccountsAsync(System.Guid userId, object userState) {
            if ((this.onBeginGetAllAccountsDelegate == null)) {
                this.onBeginGetAllAccountsDelegate = new BeginOperationDelegate(this.OnBeginGetAllAccounts);
            }
            if ((this.onEndGetAllAccountsDelegate == null)) {
                this.onEndGetAllAccountsDelegate = new EndOperationDelegate(this.OnEndGetAllAccounts);
            }
            if ((this.onGetAllAccountsCompletedDelegate == null)) {
                this.onGetAllAccountsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllAccountsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllAccountsDelegate, new object[] {
                        userId}, this.onEndGetAllAccountsDelegate, this.onGetAllAccountsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginGetAccountBalance(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccountBalance(userId, accountId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        decimal Fab.Client.MoneyServiceReference.IMoneyService.EndGetAccountBalance(System.IAsyncResult result) {
            return base.Channel.EndGetAccountBalance(result);
        }
        
        private System.IAsyncResult OnBeginGetAccountBalance(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginGetAccountBalance(userId, accountId, callback, asyncState);
        }
        
        private object[] OnEndGetAccountBalance(System.IAsyncResult result) {
            decimal retVal = ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndGetAccountBalance(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccountBalanceCompleted(object state) {
            if ((this.GetAccountBalanceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccountBalanceCompleted(this, new GetAccountBalanceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccountBalanceAsync(System.Guid userId, int accountId) {
            this.GetAccountBalanceAsync(userId, accountId, null);
        }
        
        public void GetAccountBalanceAsync(System.Guid userId, int accountId, object userState) {
            if ((this.onBeginGetAccountBalanceDelegate == null)) {
                this.onBeginGetAccountBalanceDelegate = new BeginOperationDelegate(this.OnBeginGetAccountBalance);
            }
            if ((this.onEndGetAccountBalanceDelegate == null)) {
                this.onEndGetAccountBalanceDelegate = new EndOperationDelegate(this.OnEndGetAccountBalance);
            }
            if ((this.onGetAccountBalanceCompletedDelegate == null)) {
                this.onGetAccountBalanceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccountBalanceCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccountBalanceDelegate, new object[] {
                        userId,
                        accountId}, this.onEndGetAccountBalanceDelegate, this.onGetAccountBalanceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginCreateCategory(System.Guid userId, string name, byte categoryType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateCategory(userId, name, categoryType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.MoneyServiceReference.IMoneyService.EndCreateCategory(System.IAsyncResult result) {
            base.Channel.EndCreateCategory(result);
        }
        
        private System.IAsyncResult OnBeginCreateCategory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string name = ((string)(inValues[1]));
            byte categoryType = ((byte)(inValues[2]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginCreateCategory(userId, name, categoryType, callback, asyncState);
        }
        
        private object[] OnEndCreateCategory(System.IAsyncResult result) {
            ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndCreateCategory(result);
            return null;
        }
        
        private void OnCreateCategoryCompleted(object state) {
            if ((this.CreateCategoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateCategoryAsync(System.Guid userId, string name, byte categoryType) {
            this.CreateCategoryAsync(userId, name, categoryType, null);
        }
        
        public void CreateCategoryAsync(System.Guid userId, string name, byte categoryType, object userState) {
            if ((this.onBeginCreateCategoryDelegate == null)) {
                this.onBeginCreateCategoryDelegate = new BeginOperationDelegate(this.OnBeginCreateCategory);
            }
            if ((this.onEndCreateCategoryDelegate == null)) {
                this.onEndCreateCategoryDelegate = new EndOperationDelegate(this.OnEndCreateCategory);
            }
            if ((this.onCreateCategoryCompletedDelegate == null)) {
                this.onCreateCategoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateCategoryCompleted);
            }
            base.InvokeAsync(this.onBeginCreateCategoryDelegate, new object[] {
                        userId,
                        name,
                        categoryType}, this.onEndCreateCategoryDelegate, this.onCreateCategoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginUpdateCategory(System.Guid userId, int categoryId, string name, byte categoryType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateCategory(userId, categoryId, name, categoryType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.MoneyServiceReference.IMoneyService.EndUpdateCategory(System.IAsyncResult result) {
            base.Channel.EndUpdateCategory(result);
        }
        
        private System.IAsyncResult OnBeginUpdateCategory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int categoryId = ((int)(inValues[1]));
            string name = ((string)(inValues[2]));
            byte categoryType = ((byte)(inValues[3]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginUpdateCategory(userId, categoryId, name, categoryType, callback, asyncState);
        }
        
        private object[] OnEndUpdateCategory(System.IAsyncResult result) {
            ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndUpdateCategory(result);
            return null;
        }
        
        private void OnUpdateCategoryCompleted(object state) {
            if ((this.UpdateCategoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateCategoryAsync(System.Guid userId, int categoryId, string name, byte categoryType) {
            this.UpdateCategoryAsync(userId, categoryId, name, categoryType, null);
        }
        
        public void UpdateCategoryAsync(System.Guid userId, int categoryId, string name, byte categoryType, object userState) {
            if ((this.onBeginUpdateCategoryDelegate == null)) {
                this.onBeginUpdateCategoryDelegate = new BeginOperationDelegate(this.OnBeginUpdateCategory);
            }
            if ((this.onEndUpdateCategoryDelegate == null)) {
                this.onEndUpdateCategoryDelegate = new EndOperationDelegate(this.OnEndUpdateCategory);
            }
            if ((this.onUpdateCategoryCompletedDelegate == null)) {
                this.onUpdateCategoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCategoryCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateCategoryDelegate, new object[] {
                        userId,
                        categoryId,
                        name,
                        categoryType}, this.onEndUpdateCategoryDelegate, this.onUpdateCategoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginDeleteCategory(System.Guid userId, int categoryId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteCategory(userId, categoryId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.MoneyServiceReference.IMoneyService.EndDeleteCategory(System.IAsyncResult result) {
            base.Channel.EndDeleteCategory(result);
        }
        
        private System.IAsyncResult OnBeginDeleteCategory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int categoryId = ((int)(inValues[1]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginDeleteCategory(userId, categoryId, callback, asyncState);
        }
        
        private object[] OnEndDeleteCategory(System.IAsyncResult result) {
            ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndDeleteCategory(result);
            return null;
        }
        
        private void OnDeleteCategoryCompleted(object state) {
            if ((this.DeleteCategoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteCategoryAsync(System.Guid userId, int categoryId) {
            this.DeleteCategoryAsync(userId, categoryId, null);
        }
        
        public void DeleteCategoryAsync(System.Guid userId, int categoryId, object userState) {
            if ((this.onBeginDeleteCategoryDelegate == null)) {
                this.onBeginDeleteCategoryDelegate = new BeginOperationDelegate(this.OnBeginDeleteCategory);
            }
            if ((this.onEndDeleteCategoryDelegate == null)) {
                this.onEndDeleteCategoryDelegate = new EndOperationDelegate(this.OnEndDeleteCategory);
            }
            if ((this.onDeleteCategoryCompletedDelegate == null)) {
                this.onDeleteCategoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCategoryCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteCategoryDelegate, new object[] {
                        userId,
                        categoryId}, this.onEndDeleteCategoryDelegate, this.onDeleteCategoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginGetAllCategories(System.Guid userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllCategories(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Fab.Client.MoneyServiceReference.CategoryDTO[] Fab.Client.MoneyServiceReference.IMoneyService.EndGetAllCategories(System.IAsyncResult result) {
            return base.Channel.EndGetAllCategories(result);
        }
        
        private System.IAsyncResult OnBeginGetAllCategories(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginGetAllCategories(userId, callback, asyncState);
        }
        
        private object[] OnEndGetAllCategories(System.IAsyncResult result) {
            Fab.Client.MoneyServiceReference.CategoryDTO[] retVal = ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndGetAllCategories(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllCategoriesCompleted(object state) {
            if ((this.GetAllCategoriesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllCategoriesCompleted(this, new GetAllCategoriesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllCategoriesAsync(System.Guid userId) {
            this.GetAllCategoriesAsync(userId, null);
        }
        
        public void GetAllCategoriesAsync(System.Guid userId, object userState) {
            if ((this.onBeginGetAllCategoriesDelegate == null)) {
                this.onBeginGetAllCategoriesDelegate = new BeginOperationDelegate(this.OnBeginGetAllCategories);
            }
            if ((this.onEndGetAllCategoriesDelegate == null)) {
                this.onEndGetAllCategoriesDelegate = new EndOperationDelegate(this.OnEndGetAllCategories);
            }
            if ((this.onGetAllCategoriesCompletedDelegate == null)) {
                this.onGetAllCategoriesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllCategoriesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllCategoriesDelegate, new object[] {
                        userId}, this.onEndGetAllCategoriesDelegate, this.onGetAllCategoriesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginGetAllAssetTypes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllAssetTypes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Fab.Client.MoneyServiceReference.AssetTypeDTO[] Fab.Client.MoneyServiceReference.IMoneyService.EndGetAllAssetTypes(System.IAsyncResult result) {
            return base.Channel.EndGetAllAssetTypes(result);
        }
        
        private System.IAsyncResult OnBeginGetAllAssetTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginGetAllAssetTypes(callback, asyncState);
        }
        
        private object[] OnEndGetAllAssetTypes(System.IAsyncResult result) {
            Fab.Client.MoneyServiceReference.AssetTypeDTO[] retVal = ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndGetAllAssetTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllAssetTypesCompleted(object state) {
            if ((this.GetAllAssetTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllAssetTypesCompleted(this, new GetAllAssetTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllAssetTypesAsync() {
            this.GetAllAssetTypesAsync(null);
        }
        
        public void GetAllAssetTypesAsync(object userState) {
            if ((this.onBeginGetAllAssetTypesDelegate == null)) {
                this.onBeginGetAllAssetTypesDelegate = new BeginOperationDelegate(this.OnBeginGetAllAssetTypes);
            }
            if ((this.onEndGetAllAssetTypesDelegate == null)) {
                this.onEndGetAllAssetTypesDelegate = new EndOperationDelegate(this.OnEndGetAllAssetTypes);
            }
            if ((this.onGetAllAssetTypesCompletedDelegate == null)) {
                this.onGetAllAssetTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllAssetTypesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllAssetTypesDelegate, null, this.onEndGetAllAssetTypesDelegate, this.onGetAllAssetTypesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginDeposit(System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeposit(userId, accountId, operationDate, price, quantity, comment, categoryId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.MoneyServiceReference.IMoneyService.EndDeposit(System.IAsyncResult result) {
            base.Channel.EndDeposit(result);
        }
        
        private System.IAsyncResult OnBeginDeposit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            System.DateTime operationDate = ((System.DateTime)(inValues[2]));
            decimal price = ((decimal)(inValues[3]));
            decimal quantity = ((decimal)(inValues[4]));
            string comment = ((string)(inValues[5]));
            System.Nullable<int> categoryId = ((System.Nullable<int>)(inValues[6]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginDeposit(userId, accountId, operationDate, price, quantity, comment, categoryId, callback, asyncState);
        }
        
        private object[] OnEndDeposit(System.IAsyncResult result) {
            ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndDeposit(result);
            return null;
        }
        
        private void OnDepositCompleted(object state) {
            if ((this.DepositCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DepositCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DepositAsync(System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId) {
            this.DepositAsync(userId, accountId, operationDate, price, quantity, comment, categoryId, null);
        }
        
        public void DepositAsync(System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId, object userState) {
            if ((this.onBeginDepositDelegate == null)) {
                this.onBeginDepositDelegate = new BeginOperationDelegate(this.OnBeginDeposit);
            }
            if ((this.onEndDepositDelegate == null)) {
                this.onEndDepositDelegate = new EndOperationDelegate(this.OnEndDeposit);
            }
            if ((this.onDepositCompletedDelegate == null)) {
                this.onDepositCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDepositCompleted);
            }
            base.InvokeAsync(this.onBeginDepositDelegate, new object[] {
                        userId,
                        accountId,
                        operationDate,
                        price,
                        quantity,
                        comment,
                        categoryId}, this.onEndDepositDelegate, this.onDepositCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginWithdrawal(System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginWithdrawal(userId, accountId, operationDate, price, quantity, comment, categoryId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.MoneyServiceReference.IMoneyService.EndWithdrawal(System.IAsyncResult result) {
            base.Channel.EndWithdrawal(result);
        }
        
        private System.IAsyncResult OnBeginWithdrawal(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            System.DateTime operationDate = ((System.DateTime)(inValues[2]));
            decimal price = ((decimal)(inValues[3]));
            decimal quantity = ((decimal)(inValues[4]));
            string comment = ((string)(inValues[5]));
            System.Nullable<int> categoryId = ((System.Nullable<int>)(inValues[6]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginWithdrawal(userId, accountId, operationDate, price, quantity, comment, categoryId, callback, asyncState);
        }
        
        private object[] OnEndWithdrawal(System.IAsyncResult result) {
            ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndWithdrawal(result);
            return null;
        }
        
        private void OnWithdrawalCompleted(object state) {
            if ((this.WithdrawalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.WithdrawalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void WithdrawalAsync(System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId) {
            this.WithdrawalAsync(userId, accountId, operationDate, price, quantity, comment, categoryId, null);
        }
        
        public void WithdrawalAsync(System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId, object userState) {
            if ((this.onBeginWithdrawalDelegate == null)) {
                this.onBeginWithdrawalDelegate = new BeginOperationDelegate(this.OnBeginWithdrawal);
            }
            if ((this.onEndWithdrawalDelegate == null)) {
                this.onEndWithdrawalDelegate = new EndOperationDelegate(this.OnEndWithdrawal);
            }
            if ((this.onWithdrawalCompletedDelegate == null)) {
                this.onWithdrawalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnWithdrawalCompleted);
            }
            base.InvokeAsync(this.onBeginWithdrawalDelegate, new object[] {
                        userId,
                        accountId,
                        operationDate,
                        price,
                        quantity,
                        comment,
                        categoryId}, this.onEndWithdrawalDelegate, this.onWithdrawalCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginTransfer(System.Guid user1Id, int account1Id, System.Guid user2Id, int account2Id, System.DateTime operationDate, decimal amount, string comment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTransfer(user1Id, account1Id, user2Id, account2Id, operationDate, amount, comment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.MoneyServiceReference.IMoneyService.EndTransfer(System.IAsyncResult result) {
            base.Channel.EndTransfer(result);
        }
        
        private System.IAsyncResult OnBeginTransfer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid user1Id = ((System.Guid)(inValues[0]));
            int account1Id = ((int)(inValues[1]));
            System.Guid user2Id = ((System.Guid)(inValues[2]));
            int account2Id = ((int)(inValues[3]));
            System.DateTime operationDate = ((System.DateTime)(inValues[4]));
            decimal amount = ((decimal)(inValues[5]));
            string comment = ((string)(inValues[6]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginTransfer(user1Id, account1Id, user2Id, account2Id, operationDate, amount, comment, callback, asyncState);
        }
        
        private object[] OnEndTransfer(System.IAsyncResult result) {
            ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndTransfer(result);
            return null;
        }
        
        private void OnTransferCompleted(object state) {
            if ((this.TransferCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TransferCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TransferAsync(System.Guid user1Id, int account1Id, System.Guid user2Id, int account2Id, System.DateTime operationDate, decimal amount, string comment) {
            this.TransferAsync(user1Id, account1Id, user2Id, account2Id, operationDate, amount, comment, null);
        }
        
        public void TransferAsync(System.Guid user1Id, int account1Id, System.Guid user2Id, int account2Id, System.DateTime operationDate, decimal amount, string comment, object userState) {
            if ((this.onBeginTransferDelegate == null)) {
                this.onBeginTransferDelegate = new BeginOperationDelegate(this.OnBeginTransfer);
            }
            if ((this.onEndTransferDelegate == null)) {
                this.onEndTransferDelegate = new EndOperationDelegate(this.OnEndTransfer);
            }
            if ((this.onTransferCompletedDelegate == null)) {
                this.onTransferCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTransferCompleted);
            }
            base.InvokeAsync(this.onBeginTransferDelegate, new object[] {
                        user1Id,
                        account1Id,
                        user2Id,
                        account2Id,
                        operationDate,
                        amount,
                        comment}, this.onEndTransferDelegate, this.onTransferCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginGetTransaction(System.Guid userId, int accountId, int transactionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTransaction(userId, accountId, transactionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Fab.Client.MoneyServiceReference.TransactionDTO Fab.Client.MoneyServiceReference.IMoneyService.EndGetTransaction(System.IAsyncResult result) {
            return base.Channel.EndGetTransaction(result);
        }
        
        private System.IAsyncResult OnBeginGetTransaction(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            int transactionId = ((int)(inValues[2]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginGetTransaction(userId, accountId, transactionId, callback, asyncState);
        }
        
        private object[] OnEndGetTransaction(System.IAsyncResult result) {
            Fab.Client.MoneyServiceReference.TransactionDTO retVal = ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndGetTransaction(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTransactionCompleted(object state) {
            if ((this.GetTransactionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTransactionCompleted(this, new GetTransactionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTransactionAsync(System.Guid userId, int accountId, int transactionId) {
            this.GetTransactionAsync(userId, accountId, transactionId, null);
        }
        
        public void GetTransactionAsync(System.Guid userId, int accountId, int transactionId, object userState) {
            if ((this.onBeginGetTransactionDelegate == null)) {
                this.onBeginGetTransactionDelegate = new BeginOperationDelegate(this.OnBeginGetTransaction);
            }
            if ((this.onEndGetTransactionDelegate == null)) {
                this.onEndGetTransactionDelegate = new EndOperationDelegate(this.OnEndGetTransaction);
            }
            if ((this.onGetTransactionCompletedDelegate == null)) {
                this.onGetTransactionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTransactionCompleted);
            }
            base.InvokeAsync(this.onBeginGetTransactionDelegate, new object[] {
                        userId,
                        accountId,
                        transactionId}, this.onEndGetTransactionDelegate, this.onGetTransactionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginDeleteTransaction(System.Guid userId, int accountId, int transactionId, System.DateTime operationDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteTransaction(userId, accountId, transactionId, operationDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.MoneyServiceReference.IMoneyService.EndDeleteTransaction(System.IAsyncResult result) {
            base.Channel.EndDeleteTransaction(result);
        }
        
        private System.IAsyncResult OnBeginDeleteTransaction(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            int transactionId = ((int)(inValues[2]));
            System.DateTime operationDate = ((System.DateTime)(inValues[3]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginDeleteTransaction(userId, accountId, transactionId, operationDate, callback, asyncState);
        }
        
        private object[] OnEndDeleteTransaction(System.IAsyncResult result) {
            ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndDeleteTransaction(result);
            return null;
        }
        
        private void OnDeleteTransactionCompleted(object state) {
            if ((this.DeleteTransactionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteTransactionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteTransactionAsync(System.Guid userId, int accountId, int transactionId, System.DateTime operationDate) {
            this.DeleteTransactionAsync(userId, accountId, transactionId, operationDate, null);
        }
        
        public void DeleteTransactionAsync(System.Guid userId, int accountId, int transactionId, System.DateTime operationDate, object userState) {
            if ((this.onBeginDeleteTransactionDelegate == null)) {
                this.onBeginDeleteTransactionDelegate = new BeginOperationDelegate(this.OnBeginDeleteTransaction);
            }
            if ((this.onEndDeleteTransactionDelegate == null)) {
                this.onEndDeleteTransactionDelegate = new EndOperationDelegate(this.OnEndDeleteTransaction);
            }
            if ((this.onDeleteTransactionCompletedDelegate == null)) {
                this.onDeleteTransactionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteTransactionCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteTransactionDelegate, new object[] {
                        userId,
                        accountId,
                        transactionId,
                        operationDate}, this.onEndDeleteTransactionDelegate, this.onDeleteTransactionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginUpdateTransaction(int transactionId, System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId, bool isDeposit, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateTransaction(transactionId, userId, accountId, operationDate, price, quantity, comment, categoryId, isDeposit, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.MoneyServiceReference.IMoneyService.EndUpdateTransaction(System.IAsyncResult result) {
            base.Channel.EndUpdateTransaction(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTransaction(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int transactionId = ((int)(inValues[0]));
            System.Guid userId = ((System.Guid)(inValues[1]));
            int accountId = ((int)(inValues[2]));
            System.DateTime operationDate = ((System.DateTime)(inValues[3]));
            decimal price = ((decimal)(inValues[4]));
            decimal quantity = ((decimal)(inValues[5]));
            string comment = ((string)(inValues[6]));
            System.Nullable<int> categoryId = ((System.Nullable<int>)(inValues[7]));
            bool isDeposit = ((bool)(inValues[8]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginUpdateTransaction(transactionId, userId, accountId, operationDate, price, quantity, comment, categoryId, isDeposit, callback, asyncState);
        }
        
        private object[] OnEndUpdateTransaction(System.IAsyncResult result) {
            ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndUpdateTransaction(result);
            return null;
        }
        
        private void OnUpdateTransactionCompleted(object state) {
            if ((this.UpdateTransactionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTransactionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTransactionAsync(int transactionId, System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId, bool isDeposit) {
            this.UpdateTransactionAsync(transactionId, userId, accountId, operationDate, price, quantity, comment, categoryId, isDeposit, null);
        }
        
        public void UpdateTransactionAsync(int transactionId, System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId, bool isDeposit, object userState) {
            if ((this.onBeginUpdateTransactionDelegate == null)) {
                this.onBeginUpdateTransactionDelegate = new BeginOperationDelegate(this.OnBeginUpdateTransaction);
            }
            if ((this.onEndUpdateTransactionDelegate == null)) {
                this.onEndUpdateTransactionDelegate = new EndOperationDelegate(this.OnEndUpdateTransaction);
            }
            if ((this.onUpdateTransactionCompletedDelegate == null)) {
                this.onUpdateTransactionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTransactionCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTransactionDelegate, new object[] {
                        transactionId,
                        userId,
                        accountId,
                        operationDate,
                        price,
                        quantity,
                        comment,
                        categoryId,
                        isDeposit}, this.onEndUpdateTransactionDelegate, this.onUpdateTransactionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginUpdateTransfer(int transactionId, System.Guid user1Id, int account1Id, System.Guid user2Id, int account2Id, System.DateTime operationDate, decimal amount, string comment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateTransfer(transactionId, user1Id, account1Id, user2Id, account2Id, operationDate, amount, comment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Fab.Client.MoneyServiceReference.IMoneyService.EndUpdateTransfer(System.IAsyncResult result) {
            base.Channel.EndUpdateTransfer(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTransfer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int transactionId = ((int)(inValues[0]));
            System.Guid user1Id = ((System.Guid)(inValues[1]));
            int account1Id = ((int)(inValues[2]));
            System.Guid user2Id = ((System.Guid)(inValues[3]));
            int account2Id = ((int)(inValues[4]));
            System.DateTime operationDate = ((System.DateTime)(inValues[5]));
            decimal amount = ((decimal)(inValues[6]));
            string comment = ((string)(inValues[7]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginUpdateTransfer(transactionId, user1Id, account1Id, user2Id, account2Id, operationDate, amount, comment, callback, asyncState);
        }
        
        private object[] OnEndUpdateTransfer(System.IAsyncResult result) {
            ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndUpdateTransfer(result);
            return null;
        }
        
        private void OnUpdateTransferCompleted(object state) {
            if ((this.UpdateTransferCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTransferCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTransferAsync(int transactionId, System.Guid user1Id, int account1Id, System.Guid user2Id, int account2Id, System.DateTime operationDate, decimal amount, string comment) {
            this.UpdateTransferAsync(transactionId, user1Id, account1Id, user2Id, account2Id, operationDate, amount, comment, null);
        }
        
        public void UpdateTransferAsync(int transactionId, System.Guid user1Id, int account1Id, System.Guid user2Id, int account2Id, System.DateTime operationDate, decimal amount, string comment, object userState) {
            if ((this.onBeginUpdateTransferDelegate == null)) {
                this.onBeginUpdateTransferDelegate = new BeginOperationDelegate(this.OnBeginUpdateTransfer);
            }
            if ((this.onEndUpdateTransferDelegate == null)) {
                this.onEndUpdateTransferDelegate = new EndOperationDelegate(this.OnEndUpdateTransfer);
            }
            if ((this.onUpdateTransferCompletedDelegate == null)) {
                this.onUpdateTransferCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTransferCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTransferDelegate, new object[] {
                        transactionId,
                        user1Id,
                        account1Id,
                        user2Id,
                        account2Id,
                        operationDate,
                        amount,
                        comment}, this.onEndUpdateTransferDelegate, this.onUpdateTransferCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Fab.Client.MoneyServiceReference.IMoneyService.BeginGetAllTransactions(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllTransactions(userId, accountId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Fab.Client.MoneyServiceReference.TransactionRecord[] Fab.Client.MoneyServiceReference.IMoneyService.EndGetAllTransactions(System.IAsyncResult result) {
            return base.Channel.EndGetAllTransactions(result);
        }
        
        private System.IAsyncResult OnBeginGetAllTransactions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            int accountId = ((int)(inValues[1]));
            return ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).BeginGetAllTransactions(userId, accountId, callback, asyncState);
        }
        
        private object[] OnEndGetAllTransactions(System.IAsyncResult result) {
            Fab.Client.MoneyServiceReference.TransactionRecord[] retVal = ((Fab.Client.MoneyServiceReference.IMoneyService)(this)).EndGetAllTransactions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllTransactionsCompleted(object state) {
            if ((this.GetAllTransactionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllTransactionsCompleted(this, new GetAllTransactionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllTransactionsAsync(System.Guid userId, int accountId) {
            this.GetAllTransactionsAsync(userId, accountId, null);
        }
        
        public void GetAllTransactionsAsync(System.Guid userId, int accountId, object userState) {
            if ((this.onBeginGetAllTransactionsDelegate == null)) {
                this.onBeginGetAllTransactionsDelegate = new BeginOperationDelegate(this.OnBeginGetAllTransactions);
            }
            if ((this.onEndGetAllTransactionsDelegate == null)) {
                this.onEndGetAllTransactionsDelegate = new EndOperationDelegate(this.OnEndGetAllTransactions);
            }
            if ((this.onGetAllTransactionsCompletedDelegate == null)) {
                this.onGetAllTransactionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllTransactionsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllTransactionsDelegate, new object[] {
                        userId,
                        accountId}, this.onEndGetAllTransactionsDelegate, this.onGetAllTransactionsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Fab.Client.MoneyServiceReference.IMoneyService CreateChannel() {
            return new MoneyServiceClientChannel(this);
        }
        
        private class MoneyServiceClientChannel : ChannelBase<Fab.Client.MoneyServiceReference.IMoneyService>, Fab.Client.MoneyServiceReference.IMoneyService {
            
            public MoneyServiceClientChannel(System.ServiceModel.ClientBase<Fab.Client.MoneyServiceReference.IMoneyService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCreateAccount(System.Guid userId, string name, int assetTypeId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = name;
                _args[2] = assetTypeId;
                System.IAsyncResult _result = base.BeginInvoke("CreateAccount", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCreateAccount(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CreateAccount", _args, result);
            }
            
            public System.IAsyncResult BeginUpdateAccount(System.Guid userId, int accountId, string name, int assetTypeId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userId;
                _args[1] = accountId;
                _args[2] = name;
                _args[3] = assetTypeId;
                System.IAsyncResult _result = base.BeginInvoke("UpdateAccount", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateAccount(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateAccount", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteAccount(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = accountId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteAccount", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteAccount(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteAccount", _args, result);
            }
            
            public System.IAsyncResult BeginGetAllAccounts(System.Guid userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userId;
                System.IAsyncResult _result = base.BeginInvoke("GetAllAccounts", _args, callback, asyncState);
                return _result;
            }
            
            public Fab.Client.MoneyServiceReference.AccountDTO[] EndGetAllAccounts(System.IAsyncResult result) {
                object[] _args = new object[0];
                Fab.Client.MoneyServiceReference.AccountDTO[] _result = ((Fab.Client.MoneyServiceReference.AccountDTO[])(base.EndInvoke("GetAllAccounts", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAccountBalance(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = accountId;
                System.IAsyncResult _result = base.BeginInvoke("GetAccountBalance", _args, callback, asyncState);
                return _result;
            }
            
            public decimal EndGetAccountBalance(System.IAsyncResult result) {
                object[] _args = new object[0];
                decimal _result = ((decimal)(base.EndInvoke("GetAccountBalance", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateCategory(System.Guid userId, string name, byte categoryType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = name;
                _args[2] = categoryType;
                System.IAsyncResult _result = base.BeginInvoke("CreateCategory", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCreateCategory(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CreateCategory", _args, result);
            }
            
            public System.IAsyncResult BeginUpdateCategory(System.Guid userId, int categoryId, string name, byte categoryType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userId;
                _args[1] = categoryId;
                _args[2] = name;
                _args[3] = categoryType;
                System.IAsyncResult _result = base.BeginInvoke("UpdateCategory", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateCategory(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateCategory", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteCategory(System.Guid userId, int categoryId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = categoryId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteCategory", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteCategory(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteCategory", _args, result);
            }
            
            public System.IAsyncResult BeginGetAllCategories(System.Guid userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userId;
                System.IAsyncResult _result = base.BeginInvoke("GetAllCategories", _args, callback, asyncState);
                return _result;
            }
            
            public Fab.Client.MoneyServiceReference.CategoryDTO[] EndGetAllCategories(System.IAsyncResult result) {
                object[] _args = new object[0];
                Fab.Client.MoneyServiceReference.CategoryDTO[] _result = ((Fab.Client.MoneyServiceReference.CategoryDTO[])(base.EndInvoke("GetAllCategories", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllAssetTypes(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllAssetTypes", _args, callback, asyncState);
                return _result;
            }
            
            public Fab.Client.MoneyServiceReference.AssetTypeDTO[] EndGetAllAssetTypes(System.IAsyncResult result) {
                object[] _args = new object[0];
                Fab.Client.MoneyServiceReference.AssetTypeDTO[] _result = ((Fab.Client.MoneyServiceReference.AssetTypeDTO[])(base.EndInvoke("GetAllAssetTypes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeposit(System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = userId;
                _args[1] = accountId;
                _args[2] = operationDate;
                _args[3] = price;
                _args[4] = quantity;
                _args[5] = comment;
                _args[6] = categoryId;
                System.IAsyncResult _result = base.BeginInvoke("Deposit", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeposit(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Deposit", _args, result);
            }
            
            public System.IAsyncResult BeginWithdrawal(System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = userId;
                _args[1] = accountId;
                _args[2] = operationDate;
                _args[3] = price;
                _args[4] = quantity;
                _args[5] = comment;
                _args[6] = categoryId;
                System.IAsyncResult _result = base.BeginInvoke("Withdrawal", _args, callback, asyncState);
                return _result;
            }
            
            public void EndWithdrawal(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Withdrawal", _args, result);
            }
            
            public System.IAsyncResult BeginTransfer(System.Guid user1Id, int account1Id, System.Guid user2Id, int account2Id, System.DateTime operationDate, decimal amount, string comment, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = user1Id;
                _args[1] = account1Id;
                _args[2] = user2Id;
                _args[3] = account2Id;
                _args[4] = operationDate;
                _args[5] = amount;
                _args[6] = comment;
                System.IAsyncResult _result = base.BeginInvoke("Transfer", _args, callback, asyncState);
                return _result;
            }
            
            public void EndTransfer(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Transfer", _args, result);
            }
            
            public System.IAsyncResult BeginGetTransaction(System.Guid userId, int accountId, int transactionId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = accountId;
                _args[2] = transactionId;
                System.IAsyncResult _result = base.BeginInvoke("GetTransaction", _args, callback, asyncState);
                return _result;
            }
            
            public Fab.Client.MoneyServiceReference.TransactionDTO EndGetTransaction(System.IAsyncResult result) {
                object[] _args = new object[0];
                Fab.Client.MoneyServiceReference.TransactionDTO _result = ((Fab.Client.MoneyServiceReference.TransactionDTO)(base.EndInvoke("GetTransaction", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteTransaction(System.Guid userId, int accountId, int transactionId, System.DateTime operationDate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userId;
                _args[1] = accountId;
                _args[2] = transactionId;
                _args[3] = operationDate;
                System.IAsyncResult _result = base.BeginInvoke("DeleteTransaction", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteTransaction(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteTransaction", _args, result);
            }
            
            public System.IAsyncResult BeginUpdateTransaction(int transactionId, System.Guid userId, int accountId, System.DateTime operationDate, decimal price, decimal quantity, string comment, System.Nullable<int> categoryId, bool isDeposit, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[9];
                _args[0] = transactionId;
                _args[1] = userId;
                _args[2] = accountId;
                _args[3] = operationDate;
                _args[4] = price;
                _args[5] = quantity;
                _args[6] = comment;
                _args[7] = categoryId;
                _args[8] = isDeposit;
                System.IAsyncResult _result = base.BeginInvoke("UpdateTransaction", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateTransaction(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateTransaction", _args, result);
            }
            
            public System.IAsyncResult BeginUpdateTransfer(int transactionId, System.Guid user1Id, int account1Id, System.Guid user2Id, int account2Id, System.DateTime operationDate, decimal amount, string comment, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = transactionId;
                _args[1] = user1Id;
                _args[2] = account1Id;
                _args[3] = user2Id;
                _args[4] = account2Id;
                _args[5] = operationDate;
                _args[6] = amount;
                _args[7] = comment;
                System.IAsyncResult _result = base.BeginInvoke("UpdateTransfer", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateTransfer(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateTransfer", _args, result);
            }
            
            public System.IAsyncResult BeginGetAllTransactions(System.Guid userId, int accountId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = accountId;
                System.IAsyncResult _result = base.BeginInvoke("GetAllTransactions", _args, callback, asyncState);
                return _result;
            }
            
            public Fab.Client.MoneyServiceReference.TransactionRecord[] EndGetAllTransactions(System.IAsyncResult result) {
                object[] _args = new object[0];
                Fab.Client.MoneyServiceReference.TransactionRecord[] _result = ((Fab.Client.MoneyServiceReference.TransactionRecord[])(base.EndInvoke("GetAllTransactions", _args, result)));
                return _result;
            }
        }
    }
}
