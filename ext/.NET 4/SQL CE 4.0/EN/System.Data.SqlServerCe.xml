<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Data.SqlServerCe</name>
    </assembly>
    <members>
        <member name="M:System.Data.SqlServerCe.SqlCeUtil.GetModuleInstallPath(System.String)">
            <summary>
            Returns the full path for the given module expanded with central install registry key
            Obviously, this method is useful only when the installation type is central
            </summary>
            <param name="moduleName">Native module name</param>
            <returns>Full path of the native module with central installation folder</returns>
        </member>
        <member name="T:System.Data.SqlServerCe.ConStringUtil">
            <summary>
            Helper class which exposes the connection string handling and 
            manipulation APIs.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.ConStringUtil.#cctor">
            <summary>
            Static constructor which initializes the supported keywords and encryption information.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.ConStringUtil.RemoveKeyValuesFromString(System.String,System.String)">
            <summary>
            Function to remove key value pairs from connection strings.
            </summary>
            <param name="conString">Connection String</param>
            <param name="removeKey">Connection token which needs to be removed</param>
            <returns>Updated connection string with the connections token and its value removed (if found)</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.ConStringUtil.ReplaceDataDirectory(System.String)">
            <summary>
            Helper API to replace the |DataDirectory| macro with proper path.
            </summary>
            <param name="inputString">Data source keyword value</param>
            <returns>Parsed data source keyword value</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.ConStringUtil.MapToOledbConnectionString(System.String)">
            <summary>
            Maps ADO.NET connection string to equivalent OLDEB connection string
            </summary>
            <param name="conString">ADO.NET connection string</param>
            <returns>Equivalent OLEDB connection string</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.ConStringUtil.SkipWhiteSpace(System.String,System.Int32@)">
            <summary>
            This function updates the passed variable 'index' to be the location of the
            first non-space character in the passed string 'conString', starting from the
            initial value of 'index'.  It skips tabs as well
            </summary>
            <param name="conString">Connection String to be parsed</param>
            <param name="index">Index in the connection string after the white-spaces are skipped</param>
        </member>
        <member name="M:System.Data.SqlServerCe.ConStringUtil.InsertKeyValue(System.Collections.Generic.Dictionary{System.String,System.String},System.String@,System.String)">
            <summary>
            This function inserts the key/value pair into the passed values Hashtable.  It will
            return a status bool indicating whether execution completed successfully.
            </summary>
            <param name="values"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:System.Data.SqlServerCe.ConStringUtil.ParserState">
            <summary>
            Transistion states used for parsing
            </summary>
        </member>
        <member name="T:System.Data.SqlServerCe.KeywordMapper">
            <summary>
            Helper class to hold all the SQL CE keyword mappings.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.KeywordMapper.#cctor">
            <summary>
            Static constructor which initializes the keywords information.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.KeywordMapper.KeywordSynonymsMapping">
            <summary>
            Hash-table containing the keyword and synonyms mapping.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.KeywordMapper.OledbAdoDotNetKeywordsMapping">
            <summary>
            Hash-table containing the OLEDB keywords and ADO.NET keywords mapping.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.KeywordMapper.ValidKeywords">
            <summary>
            List of supported keywords.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.KeywordMapper.KeywordsDictionary">
            <summary>
            Dictionary containing the [keywords, synonyms] => id mapping.
            </summary>
        </member>
        <member name="T:System.Data.SqlServerCe.Keywords">
            <summary>
            SQL CE (ADO.NET Provider) supported keywords.
            </summary>
        </member>
        <member name="T:System.Data.SqlServerCe.ResCategoryAttribute">
            <summary>
            Specifies the name of the category in which to group the property or event when 
            displayed in a PropertyGrid control set to Categorized mode.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.ResCategoryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of ResCategoryAttribute class
            </summary>
            <param name="category">Name of the category</param>
        </member>
        <member name="M:System.Data.SqlServerCe.ResCategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            Looks up the localized name of the specified category.
            </summary>
            <param name="value">The identifer for the category to look up. </param>
            <returns>The localized name of the category, or null reference (Nothing in Visual Basic) if a localized name does not exist.</returns>
        </member>
        <member name="T:System.Data.SqlServerCe.ResDescriptionAttribute">
            <summary>
            Specifies a description for a property or event.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.ResDescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ResDescriptionAttribute class.
            </summary>
            <param name="description">The description text.</param>
        </member>
        <member name="P:System.Data.SqlServerCe.ResDescriptionAttribute.Description">
            <summary>
            Gets the description stored in this attribute.
            </summary>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeConnectionStringDefaults">
            <summary>
            Helper class defining all supported keywords default values.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringDefaults.AutoShrinkThreshold">
            <summary>
            The percent of free space in the database file that is allowed before autoshrink begins. 
            A value of 100 disables autoshrink. If not specified, the default value is 60
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringDefaults.CaseSensitive">
            <summary>
            A Boolean value that determines whether or not the database collation is case-sensitive. 
            By default the case-sensitive flag is set to false.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringDefaults.DataSource">
            <summary>
            The file path and name of the SQL Mobile database.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringDefaults.DefaultLockEscalation">
            <summary>
            The number of locks a transaction will acquire before attempting escalation from row to page, or from page to table. 
            If not specified, the default value is 100.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringDefaults.DefaultLockTimeOut">
            <summary>
            The default number of milliseconds that a transaction will wait for a lock.
            If not specified, the default value is 2000.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringDefaults.Encrypt">
            <summary>
            A Boolean value that determines whether or not the database is encrypted. 
            Must be set to true to enable encryption or false for no encryption. 
            If not specified, the default value is false.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringDefaults.EncryptionMode">
            <summary>
            Encryption mode with which the database is to be created against.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringDefaults.Enlist">
            <summary>
            By default, enlist value is false. This can be set to true. 
            If a connection database is opened by using Enlist set to true, the connection is promoted to a transaction.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringDefaults.FileMode">
            <summary>
            The mode to use when opening the database file. 
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringDefaults.FlushInterval">
            <summary>
            Specified the interval time (in seconds) before all committed transactions are flushed to disk. 
            If not specified, the default value is 10.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringDefaults.Lcid">
            <summary>
            The locale ID (LCID) to use with the database.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringDefaults.MaxBufferSize">
            <summary>
            The largest amount of memory, in kilobytes, that SQL Server Mobile can use before it starts flushing changes to disk. 
            If not specified, the default value is 640.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringDefaults.MaxDatabaseSize">
            <summary>
            The maximum size of the database, in Megabytes. If not specified, the default value is 128.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringDefaults.Password">
            <summary>
            The database password, which can be up to 40 characters in length. 
            If not specified, the default value is no password. 
            This property is required if you enable encryption on the database. 
            If you specify a password, encryption is automatically enabled on the database.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringDefaults.PersistSecurityInfo">
            <summary>
            When set to false (which is strongly recommended), security-sensitive information, such as the password, 
            is not returned as part of the connection if the connection is open or has ever been in an open state. 
            Resetting the connection string resets all connection string values, including the password. 
            The default value is false.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringDefaults.TempFileMaxSize">
            <summary>
            The maximum size of the temporary database file, in Megabytes. 
            If not specified, the default value is 128.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringDefaults.TempFilePath">
            <summary>
            The location of the temporary database. 
            </summary>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeConnectionStringBuilder">
            <summary>
            Provides a simple way to create and manage the contents of connection strings used by the SqlCeConnection class. 
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.#cctor">
            <summary>
            Static constructor which initializes the supported keywords information.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.#ctor">
            <summary>
            Initializes a new instance of the SqlCeConnectionStringBuilder class.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SqlCeConnectionStringBuilder class. 
            The provided connection string provides the data for the instance's internal connection information.
            </summary>
            <param name="connectionString">Connection String</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.Clear">
            <summary>
            Clears the contents of the SqlCeConnectionStringBuilder instance.
            (Overrides DbConnectionStringBuilder.Clear().)
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.ContainsKey(System.String)">
            <summary>
            Determines whether the SqlCeConnectionStringBuilder contains a specific key. 
            (Overrides DbConnectionStringBuilder.ContainsKey(String).)
            </summary>
            <param name="keyword">The key to locate in the SqlCeConnectionStringBuilder.</param>
            <returns>true if the SqlCeConnectionStringBuilder contains an element that has the specified key; otherwise, false.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.ShouldSerialize(System.String)">
            <summary>
            Indicates whether the specified key exists in this SqlCeConnectionStringBuilder instance. 
            (Overrides DbConnectionStringBuilder.ShouldSerialize(String).)
            </summary>
            <param name="keyword">The key to locate in the SqlCeConnectionStringBuilder.</param>
            <returns>true if the SqlCeConnectionStringBuilder contains an entry with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
            <summary>
            Retrieves a value corresponding to the supplied key from this SqlCeConnectionStringBuilder.
            </summary>
            <param name="keyword">The key of the item to retrieve.</param>
            <param name="value">The value corresponding to keyword.</param>
            <returns>true if keyword was found within the connection string; otherwise, false.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.Remove(System.String)">
            <summary>
            Removes the entry with the specified key from the SqlCeConnectionStringBuilder instance.
            </summary>
            <param name="keyword">The key of the key/value pair to be removed from the connection string in this SqlCeConnectionStringBuilder.</param>
            <returns>true if the key existed within the connection string and was removed; false if the key did not exist.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.ConvertToBoolean(System.Object)">
            <summary>
            Helper API to convert the object to boolean representation (if possible).
            </summary>
            <param name="value">Object containing the boolean value.</param>
            <returns>Boolean representation of the value.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.ConvertToInt32(System.Object)">
            <summary>
            Helper API to convert the object to integer representation (if possible).
            </summary>
            <param name="value">Object containing the integer value.</param>
            <returns>Integer representation of the value.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.ConvertToString(System.Object)">
            <summary>
            Helper API to convert the object to string representation (if possible).
            </summary>
            <param name="value">Object containing the string value.</param>
            <returns>String representation of the value.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.GetAt(System.Data.SqlServerCe.Keywords)">
            <summary>
            Helper API to get the value of the connection string token as specified by the keyword.
            </summary>
            <param name="index">The key of the item to retrieve the value.</param>
            <returns>The value associated with the specified key.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.GetIndex(System.String)">
            <summary>
            Helper API to get the ID given the keyword name.
            </summary>
            <param name="keyword">Keyword name</param>
            <returns>ID of the keyword</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.Reset(System.Data.SqlServerCe.Keywords)">
            <summary>
            Resets the connection token to the default value.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.SetValue(System.String,System.Boolean)">
            <summary>
            Helper API to set the value of the connection string token as specified by the keyword.
            </summary>
            <param name="keyword">The key of the item to set the value</param>
            <param name="value">The value to be set for the specified keyword</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.SetValue(System.String,System.Int32)">
            <summary>
            Helper API to set the value of the connection string token as specified by the keyword.
            </summary>
            <param name="keyword">The key of the item to set the value</param>
            <param name="value">The value to be set for the specified keyword</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.SetValue(System.String,System.String)">
            <summary>
            Helper API to set the value of the connection string token as specified by the keyword.
            </summary>
            <param name="keyword">The key of the item to set the value</param>
            <param name="value">The value to be set for the specified keyword</param>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key. In C#, this property is the indexer.
            </summary>
            <param name="keyword">The key of the item to get or set.</param>
            <returns>The value associated with the specified key. </returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.AutoshrinkThreshold">
            <summary>
            The percent of free space in the database file that is allowed before autoshrink begins. 
            A value of 100 disables autoshrink. If not specified, the default value is 60.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.CaseSensitive">
            <summary>
            A Boolean value that determines whether or not the database collation is case-sensitive. 
            By default the case-sensitive flag is set to false.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.DataSource">
            <summary>
            The file path and name of the SQL Mobile database.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.DefaultLockEscalation">
            <summary>
            The number of locks a transaction will acquire before attempting escalation from row to page, or from page to table. 
            If not specified, the default value is 100.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.DefaultLockTimeout">
            <summary>
            The default number of milliseconds that a transaction will wait for a lock.
            If not specified, the default value is 2000.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.Encrypt">
            <summary>
            A Boolean value that determines whether or not the database is encrypted. 
            Must be set to true to enable encryption or false for no encryption. 
            If not specified, the default value is false.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.EncryptionMode">
            <summary>
            Encryption mode with which the database is to be created against.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.Enlist">
            <summary>
            By default, enlist value is false. This can be set to true. 
            If a connection database is opened by using Enlist set to true, the connection is promoted to a transaction.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.FileMode">
            <summary>
            The mode to use when opening the database file. 
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.FlushInterval">
            <summary>
            Specified the interval time (in seconds) before all committed transactions are flushed to disk. 
            If not specified, the default value is 10.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.InitialLcid">
            <summary>
            The locale ID (LCID) to use with the database.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.MaxBufferSize">
            <summary>
            The largest amount of memory, in kilobytes, that SQL Server Mobile can use before it starts flushing changes to disk. 
            If not specified, the default value is 640.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.MaxDatabaseSize">
            <summary>
            The maximum size of the database, in Megabytes. If not specified, the default value is 128.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.Password">
            <summary>
            The database password, which can be up to 40 characters in length. 
            If not specified, the default value is no password. 
            This property is required if you enable encryption on the database. 
            If you specify a password, encryption is automatically enabled on the database.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.PersistSecurityInfo">
            <summary>
            When set to false (which is strongly recommended), security-sensitive information, such as the password, 
            is not returned as part of the connection if the connection is open or has ever been in an open state. 
            Resetting the connection string resets all connection string values, including the password. 
            The default value is false.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.TempFileMaxSize">
            <summary>
            The maximum size of the temporary database file, in Megabytes. 
            If not specified, the default value is 128.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.TempFilePath">
            <summary>
            The location of the temporary database. 
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.Keys">
            <summary>
            Gets an ICollection that contains the keys in the SqlCeConnectionStringBuilder.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.Values">
            <summary>
            Gets an ICollection that contains the values in the SqlCeConnectionStringBuilder.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.IsFixedSize">
            <summary>
            Gets a value that indicates whether the SqlCeConnectionStringBuilder has a fixed size.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.OledbConnectionString">
            <summary>
            Equivalent OLEDB Connection String
            </summary>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.SqlCeConnectionStringBuilderConverter">
            <summary>
            Provides a type converter to convert expandable objects to and from SqlCeConnectionStringBuilderConverter.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.SqlCeConnectionStringBuilderConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.SqlCeConnectionStringBuilderConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="destinationType">A Type that represents the type you want to convert to. </param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.SqlCeConnectionStringBuilderConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="culture">A CultureInfo. If nullNothingnullptra null reference (Nothing in Visual Basic) is passed, the current culture is assumed. </param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to. </param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.SqlCeConnectionStringBuilderConverter.ConvertToInstanceDescriptor(System.Data.SqlServerCe.SqlCeConnectionStringBuilder)">
            <summary>
            Converts the given value object to the SqlCeConnectionStringBuilder type.
            </summary>
            <param name="options">The object to convert</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.EncryptionModeConverter">
            <summary>
            Provides a unified way of converting types of values to other types,
            as well as for accessing standard values and subproperties.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.EncryptionModeConverter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.EncryptionModeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked from a list.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <returns>true if GetStandardValues should be called to find a common set of values the object supports; 
            otherwise, false.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.EncryptionModeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values returned from GetStandardValues is an exclusive list.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <returns>true if the TypeConverter..::.StandardValuesCollection returned from GetStandardValues is an 
            exhaustive list of possible values; false if other values are possible</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.EncryptionModeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter is designed for.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <returns>A TypeConverter..::.StandardValuesCollection that holds a standard set of valid values,
            or null reference (Nothing in Visual Basic) if the data type does not support a standard set of values.</returns>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.FileModeConverter">
            <summary>
            Provides a unified way of converting types of values to other types,
            as well as for accessing standard values and subproperties.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.FileModeConverter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.FileModeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked from a list.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <returns>true if GetStandardValues should be called to find a common set of values the object supports; 
            otherwise, false.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.FileModeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values returned from GetStandardValues is an exclusive list.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <returns>true if the TypeConverter..::.StandardValuesCollection returned from GetStandardValues is an 
            exhaustive list of possible values; false if other values are possible</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnectionStringBuilder.FileModeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter is designed for.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <returns>A TypeConverter..::.StandardValuesCollection that holds a standard set of valid values,
            or null reference (Nothing in Visual Basic) if the data type does not support a standard set of values.</returns>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeConnectionStringKeywords">
            <summary>
            Helper class defining all supported keywords.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringKeywords.AutoShrinkThreshold">
            <summary>
            The percent of free space in the database file that is allowed before autoshrink begins. 
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringKeywords.CaseSensitive">
            <summary>
            A Boolean value that determines whether or not the database collation is case-sensitive. 
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringKeywords.DataSource">
            <summary>
            The file path and name of the SQL Mobile database.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringKeywords.DefaultLockEscalation">
            <summary>
            The number of locks a transaction will acquire before attempting escalation from row to page, or from page to table.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringKeywords.DefaultLockTimeout">
            <summary>
            The default number of milliseconds that a transaction will wait for a lock.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringKeywords.Encrypt">
            <summary>
            A Boolean value that determines whether or not the database is encrypted. 
            Must be set to true to enable encryption or false for no encryption. 
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringKeywords.EncryptionMode">
            <summary>
            Encryption mode with which the database is to be created against.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringKeywords.Enlist">
            <summary>
            If a connection database is opened by using Enlist set to true, the connection is promoted to a transaction.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringKeywords.FlushInterval">
            <summary>
            Specified the interval time (in seconds) before all committed transactions are flushed to disk. 
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringKeywords.Lcid">
            <summary>
            The locale ID (LCID) to use with the database.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringKeywords.MaxBufferSize">
            <summary>
            The largest amount of memory, in kilobytes, that SQL Server Mobile can use before it starts flushing changes to disk. 
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringKeywords.MaxDatabaseSize">
            <summary>
            The maximum size of the database, in Megabytes. 
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringKeywords.FileMode">
            <summary>
            The mode to use when opening the database file. 
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringKeywords.Password">
            <summary>
            The database password, which can be up to 40 characters in length. 
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringKeywords.PersistSecurityInfo">
            <summary>
            When set to false (which is strongly recommended), security-sensitive information, such as the password, 
            is not returned as part of the connection if the connection is open or has ever been in an open state. 
            Resetting the connection string resets all connection string values, including the password. 
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringKeywords.TempFilePath">
            <summary>
            The location of the temporary database. 
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringKeywords.TempFileMaxSize">
            <summary>
            The maximum size of the temporary database file, in Megabytes. 
            </summary>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeConnectionStringSynonyms">
            <summary>
            Helper class defining all supported keywords synonymns.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringSynonyms.AutoShrinkThreshold">
            <summary>
            The percent of free space in the database file that is allowed before autoshrink begins. 
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringSynonyms.CaseSensitive">
            <summary>
            A Boolean value that determines whether or not the database collation is case-sensitive. 
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringSynonyms.DataSource">
            <summary>
            The file path and name of the SQL Mobile database.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringSynonyms.DefaultLockEscalation">
            <summary>
            The number of locks a transaction will acquire before attempting escalation from row to page, or from page to table.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringSynonyms.DefaultLockTimeout">
            <summary>
            The default number of milliseconds that a transaction will wait for a lock.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringSynonyms.Encrypt">
            <summary>
            A Boolean value that determines whether or not the database is encrypted. 
            Must be set to true to enable encryption or false for no encryption. 
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringSynonyms.EncryptionMode">
            <summary>
            Encryption mode with which the database is to be created against.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringSynonyms.Enlist">
            <summary>
            If a connection database is opened by using Enlist set to true, the connection is promoted to a transaction.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringSynonyms.FlushInterval">
            <summary>
            Specified the interval time (in seconds) before all committed transactions are flushed to disk. 
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringSynonyms.Lcid">
            <summary>
            The locale ID (LCID) to use with the database.
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringSynonyms.MaxBufferSize">
            <summary>
            The largest amount of memory, in kilobytes, that SQL Server Mobile can use before it starts flushing changes to disk. 
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringSynonyms.MaxDatabaseSize">
            <summary>
            The maximum size of the database, in Megabytes. 
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringSynonyms.FileMode">
            <summary>
            The mode to use when opening the database file. 
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringSynonyms.Pwd">
            <summary>
            The database password, which can be up to 40 characters in length. 
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringSynonyms.TempFilePath">
            <summary>
            The location of the temporary database. 
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeConnectionStringSynonyms.TempFileMaxSize">
            <summary>
            The maximum size of the temporary database file, in Megabytes. 
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.ADP.CheckArgumentNull(System.Object,System.String)">
            <summary>
            Helper API to check if the passed argument's value is null and 
            throw exception accordingly
            </summary>
            <param name="value">Parameter Name</param>
            <param name="parameterName">Parameter Value</param>
        </member>
        <member name="M:System.Data.SqlServerCe.ADP.BitConverterGetObject(System.Data.SqlServerCe.SqlCeType,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Method to get the object from a packed byte array, in the storage form used by SQL Server Compact
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.ADP.BitConverterGetBytes(System.Data.SqlServerCe.SqlCeType,System.Object,System.Int32@)">
            <summary>
            Method to get a packed byte array, for an object, according to the storage semantics of SQL Server Compact
            </summary>
        </member>
        <member name="T:System.Data.SqlServerCe.RowView">
            <remarks>Implements data binding interfaces as part of the <see cref="T:System.Data.SqlServerCe.ResultSetView"></see>. Not intended for use directly from your code.</remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.RowView.GetHashCode">
            <summary>
            Computes the Hash code for the current RowView.
            </summary>
            <returns>The Hash code for the present view.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.RowView.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Data.SqlServerCe.RowView"></see> instances are considered equal. </summary>
            <returns>true if the two <see cref="T:System.Data.SqlServerCe.RowView"></see> instances are equal; otherwise, false. </returns>
            <param name="other">The <see cref="T:System.Data.SqlServerCe.RowView"></see> to be compared.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.RowView.Dispose">
            <summary>
            Releases the resources consumed by this <see cref="T:System.Data.SqlServerCe.RowView"></see>.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.RowView.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Data.SqlServerCe.RowView"></see> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release managed and unmanaged resources; false to release only unmanaged resources.</param>        
        </member>
        <member name="M:System.Data.SqlServerCe.RowView.Refresh">
            <summary>
            Reads entire row from the database; in case the row no longer
            exists, it will revert to the previously available record
            containing user changes; in this way the user will know precisely
            which raw has been deleted from the database;
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.RowView.Bookmark">
            <summary>
            Returns HBOOKMARK associated with this row.
            </summary>
            
        </member>
        <member name="P:System.Data.SqlServerCe.RowView.UpdatableRecord">
            <summary>
            Gets the data in the current view as a SqlCeUpdatableRecord.
            </summary>
        </member>
        <member name="T:System.Data.SqlServerCe.TrackingOptions">
            <remarks>Used to specify only some types of DMLs to be tracked (Inserts only or Inserts+Updates etc...) </remarks>
        </member>
        <member name="F:System.Data.SqlServerCe.TrackingOptions.None">
            <summary>Lower range sentinel.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.TrackingOptions.Insert">
            <summary>Track only inserts.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.TrackingOptions.Update">
            <summary>Track only updates.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.TrackingOptions.Delete">
            <summary>Track only deletes.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.TrackingOptions.All">
            <summary>Track all.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.TrackingOptions.Max">
            <summary>Higher range sentinel.</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.TrackingKeyType">
            <summary>
            The type of key used when identifying changes. 
            For example, sync uses the key column values, to send changes to the other party. 
            Using the value of key columns, change is applied at the other party. 
            There are two types of key column sets, at Compact side
              1) Primary key column set, which is unique by definition
              2) uniqueidentifier rowguidcol column, which is also a unique GUID column
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.TrackingKeyType.None">
            <summary>Lower range sentinel.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.TrackingKeyType.PrimaryKey">
            <summary>Track using primary key values in the row.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.TrackingKeyType.Guid">
            <summary>Track using ROWGUID column value in the row.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.TrackingKeyType.Max">
            <summary>Higher range sentinel.</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.PurgeType">
            <summary>
            The type of purge needed. Purge can happen using two data. 
              1) Period of time, for which the row exists in the table
              2) Csn of the last transaction which changed the row
            </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.PurgeType.None">
            <summary>Lower range sentinel</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.PurgeType.TimeBased">
            <summary>Time based retention clean-up</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.PurgeType.CsnBased">
            <summary>Csn based retention clean-up</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.PurgeType.Max">
            <summary>Higher range sentinel</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeChangeTracking">
            <remarks>
            Change Tracking Infrastructure for SQL Server Compact Database Objects (Currently Only Tables)
            </remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeChangeTracking.VersionCheck(System.Data.SqlServerCe.TrackingVersion@,System.Data.SqlServerCe.TrackingVersion,System.Data.SqlServerCe.TrackingVersion)">
            <summary>
            Checks the database tracking layer version, and throws error if it is not 
            what is expected.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeChangeTracking.ProcessResults(System.Int32)">
            -------------------------------------------------------------------
            <summary>
            Processes native HRESULT; In case of an error, throws SqlCeException
            </summary>
            <param name="hr">HRESULT from native layer</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeChangeTracking.#ctor(System.Data.SqlServerCe.SqlCeTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeChangeTracking"></see> class.
            </summary>
            <param name="transaction"><see cref="T:System.Data.SqlServerCe.SqlCeTransaction"></see> over a Database Open Connection</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeChangeTracking.#ctor(System.Data.SqlServerCe.SqlCeConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeChangeTracking"></see> class.
            </summary>
            <param name="connection"><see cref="T:System.Data.SqlServerCe.SqlCeConnection"></see> over a Database Open Connection</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeChangeTracking.Dispose">
            <summary>
            Releases all <see cref="T:System.Data.SqlServerCe.SqlCeChangeTracking"></see> resources.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeChangeTracking.Finalize">
            <summary>
            Finalizer for the SqlCeChangeTracking object.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeChangeTracking.Dispose(System.Boolean)">
            <summary>
            Releases the managed resources used by the <see cref="T:System.Data.SqlServerCe.SqlCeChangeTracking"></see> 
            and optionally releases the unmanaged resources.</summary>
            <param name="disposing">true to release managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeChangeTracking.EnableTracking(System.String,System.Data.SqlServerCe.SETRACKINGTYPE,System.Data.SqlServerCe.SEOCSTRACKOPTIONS)">
            <summary>
            Enables change tracking on a specified table
            </summary>
            <param name="tableName">Table on which Change Tracking is to be enabled </param>
            <param name="trackType">Change Tracking Type <see cref="T:System.Data.SqlServerCe.SETRACKINGTYPE"></see> enumeration </param>
            <param name="trackOpts">Change Tracking Options <see cref="T:System.Data.SqlServerCe.SEOCSTRACKOPTIONS"></see> enumeration </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeChangeTracking.EnableTracking(System.String,System.Data.SqlServerCe.TrackingKeyType,System.Data.SqlServerCe.TrackingOptions)">
            <summary>
            Enables change tracking on a specified table
            </summary>
            <param name="tableName">Table on which Change Tracking is to be enabled </param>
            <param name="trackingKeyType">Change Tracking Key type<see cref="T:System.Data.SqlServerCe.TrackingKeyType"></see> enumeration </param>
            <param name="trackingOptions">Change Tracking Options <see cref="T:System.Data.SqlServerCe.TrackingOptions"></see> enumeration </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeChangeTracking.GetTrackingOptions(System.String,System.Data.SqlServerCe.TrackingOptions@)">
            <summary>
            Fetches change tracking options of a specified tracked table
            </summary>
            <param name="tableName">Table for which Change Tracking options are required </param>
            <param name="trackingOptions">The tracking options for the table</param>
            <return>Whether the table is tracked or not</return>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeChangeTracking.DisableTracking(System.String)">
            <summary>
            Disables change tracking on a specified table
            </summary>
            <param name="tableName">Table on which Change Tracking is to be disabled</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeChangeTracking.IsTableTracked(System.String)">
            <summary>
            Checks change tracking status of a specified table
            </summary>
            <param name="tableName">Table on which Change Tracking status required </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeChangeTracking.GetTrackingType(System.String)">
            <summary>
            Fetches change tracking type of a specified tracked table
            </summary>
            <param name="tableName">Table for which Change Tracking Type required </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeChangeTracking.PurgeTombstoneTableData(System.String,System.Data.SqlServerCe.PurgeType,System.Int64)">
            <summary>
            Cleans up tombstone entries for this table, only using retention period (or Csn) 
            <param name="tableName">Table for which tracking metadata cleanup is needed </param>
            <param name="pType">The type of retention cleanup needed. Time based or Csn based</param>
            <param name="retentionValue">Value upto which retained changes need to be purged
             The actual meaning of this paramter is dependent on the enum value passed in the previous argument.
             It can either be interpreted as, time period or Csn value, upto which changes can be purged.</param>
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeChangeTracking.PurgeTransactionSequenceData(System.Data.SqlServerCe.PurgeType,System.Int64)">
            <summary>
            Cleans up transaction history, only using retention period
            <param name="pType">The type of retention cleanup needed. Time based or Csn based</param>
            <param name="retentionValue">Value upto which retained changes need to be purged
             The actual meaning of this paramter is dependent on the enum value passed in previous argument.
             It can either be interpreted as, time period or Csn value, upto which changes can be purged.</param>
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeChangeTracking.GetLastCommittedCsn">
            <summary>
            Fetches the commit sequence number for the last committed transaction from the Database
            <return>The sequence number of the latest committed transaction</return>
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeChangeTracking.CleanupMetadata(System.String,System.Int32,System.Int64,System.Int64)">
            <summary>
            Cleans up change tracking metadata from different internal/system tables
            </summary>
            <param name="tableName">Table on which Change Tracking status required</param>
            <param name="retentionPeriod">The number of days for retaining data</param>
            <param name="cutOffTxCsn">CutOff TxCsn point for cleanup of Transaction Commit Sequence table</param>
            <param name="leastTxCsn">Least TxCsn of the syncs done on all tables</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeChangeTracking.UpgradePublicTracking(System.String)">
            <summary>
            Upgrades the tracking metadata from tracking V1 format tracking v2 format. 
            V2 format has the tracking options changed for all tables to go with v2 option flags
            Also, this method migrates sync tables in system namespace to user namespace
            
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeChangeTracking.PackTombstoneKey(System.String,System.Object[])">
            <summary>
            This method takes a set of primary key column values, for a user table, 
            and returns the corresponding __sysRK value, in the tombstone (when the user table row is deleted)
            
            The order of column values is expected to be same as what is mandated by 
            the order of PK columns
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeChangeTracking.UnpackTombstoneKey(System.String,System.Byte[])">
            <summary>
            This method takes a __sysRK column value, for a user table, 
            and returns the corresponding primary key values, in the user table.
            
            The column values array will be in the order mandated by 
            PK definition
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeChangeTracking.Connection">
            <summary>
            Gets SqlCeConnection from Transaction.Connection
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeChangeTracking.CurrentTxBsn">
            <summary>
            Current TxBsn of this database
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeChangeTracking.CurrentTxCsn">
            <summary>
            Current TxCsn of this database
            </summary>
        </member>
        <member name="T:System.Data.SqlServerCe.RepairOption">
            <remarks>When passed to the <see cref="M:System.Data.SqlServerCe.SqlCeEngine.Repair(System.String,System.Data.SqlServerCe.RepairOption)"></see> method, <see cref="T:System.Data.SqlServerCe.RepairOption"></see> specifies the type of database repair to perform.</remarks>
        </member>
        <member name="F:System.Data.SqlServerCe.RepairOption.DeleteCorruptedRows">
            <summary>Deletes all corrupted rows without attempting to fix them.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.RepairOption.RecoverCorruptedRows">
            <summary>Attempts to fix all corrupted rows rather than deleting them.
            This option is deprecated, please use RecoverAllPossibleRows.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.RepairOption.RecoverAllPossibleRows">
            <summary>Attempts to fix all corrupted rows rather than deleting them.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.RepairOption.RecoverAllOrFail">
            <summary>Attempts recovery only if all user data is recoverable.</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.VerifyOption">
            <remarks>When passed to the <see cref="M:System.Data.SqlServerCe.SqlCeEngine.Verify(System.String,System.Data.SqlServerCe.VerifyOption)"></see> method, <see cref="T:System.Data.SqlServerCe.VerifyOption"></see> specifies the type of database verify to perform.</remarks>
        </member>
        <member name="F:System.Data.SqlServerCe.VerifyOption.Default">
            <summary>Does checksum verification of the database. Default option.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.VerifyOption.Enhanced">
            <summary>Verfies index consistency along with checksum verification.</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeEngine">
            <summary>
            Represents the properties, methods, and other objects of the Microsoft SQL Server 2005 Compact Edition Engine object. 
            This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeEngine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeEngine"></see> class.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeEngine.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeEngine"></see> class 
            with the specified local connection string.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeEngine.Dispose">
            <summary>
            Releases all SQL Server Compact Edition <see cref="T:System.Data.SqlServerCe.SqlCeEngine"></see> resources.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeEngine.Finalize">
            <summary>
            Finaliser for the SqlCeEngine object.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeEngine.Compact(System.String)">
            <summary>
             Reclaims wasted space in the SQL Server Compact Edition database by creating a new database 
             file from the existing file. This method is also used to change the collating order, encryption, or 
             password settings of the database. 
             </summary>
             <param name="connectionString">The connection string to the destination database. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeEngine.Shrink">
            <summary>
            Reclaims wasted space in the SQL Server Compact Edition database by moving empty pages 
            to the end of the file, and then truncating the file.</summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeEngine.Repair(System.String,System.Data.SqlServerCe.RepairOption)">
            <summary>
            Repairs a corrupted database.
            </summary>
            <param name="connectionString">The local connection string to the database.</param>
            <param name="options">The RepairOption to use when repairing the database.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeEngine.Verify">
            <summary>
            Recalculates the checksums for each page in the database and compares the new checksums to the expected values.
            </summary>
            <returns>True if the checksums match and there is no database corruption; otherwise, false.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeEngine.Verify(System.Data.SqlServerCe.VerifyOption)">
            <summary>
            Checks for index consistency along with checksum comparision done by default.
            </summary>
            <returns>True if the checksums match, indexes are consistent and there is no database corruption; otherwise, false.</returns>
            <param name="option">VerifyOption to use when verifying the database.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeEngine.CreateDatabase">
            <summary>
            Creates a new database.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeEngine.DeleteDatabase(System.String)">
            <summary>
            Delete the database that the fileName points to.
            </summary>
            <param name="fileName">Database file path.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeEngine.DatabaseExists(System.String)">
            <summary>
            Check whether the database pointed to by the file name exists or not.
            </summary>
            <param name="fileName">Database file path</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeEngine.ProcessResults(System.IntPtr,System.Int32)">
            -------------------------------------------------------------------
            <summary>
            Throws SqlCeException
            </summary>
            <param name="pError">IError interface pointer</param>
            <param name="hr">HRESULT</param>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeEngine.Upgrade">
            <summary>
            Upgrades SQL Server Compact Database from v3.1 to v3.5 format.
            After upgradation, the database will either be encrypted by Default encryption or unencrypted
            based on whether the source database is encrypted or unencrypted.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeEngine.Upgrade(System.String)">
            <summary>
            Upgrades SQL Server Compact Database from v3.1 to v3.5 format.
            The destination database will be encrypted based on the encryption mode specified in the
            Destination Connection String
            </summary>
            <param name="destConnectionString">Connection String of the destination database.</param>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeEngine.LocalConnectionString">
            <summary>
            Gets or sets the connection string to the SQL Server Compact Edition database.
            </summary>
            <returns>The connection string.</returns>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeCommand">
            <remarks>
            Represents an SQL statement to execute against a data source.
            </remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> class.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> class with the text of the query.
            </summary>
            <param name="commandText">The text of the query. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.#ctor(System.String,System.Data.SqlServerCe.SqlCeConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> class with the text of the query 
            and a <see cref="T:System.Data.SqlServerCe.SqlCeConnection"></see>.
            </summary>
            <param name="connection">A <see cref="T:System.Data.SqlServerCe.SqlCeConnection"></see> that represents the connection to a data source. </param>
            <param name="commandText">The text of the query. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.#ctor(System.String,System.Data.SqlServerCe.SqlCeConnection,System.Data.SqlServerCe.SqlCeTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> class with the text of the query, 
            a <see cref="T:System.Data.SqlServerCe.SqlCeConnection"></see>, and the <see cref="T:System.Data.SqlServerCe.SqlCeTransaction"></see>.
            </summary>
            <param name="connection">A <see cref="T:System.Data.SqlServerCe.SqlCeConnection"></see> that represents the connection to a data source. </param>
            <param name="commandText">The text of the query. </param>
            <param name="transaction">The transaction in which the <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> executes. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.Finalize">
            <summary>
            Finalizer for the SqlCeCommand object.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.ReleaseNativeInterfaces">
            <summary>
            Releases the native interfaces. Note that this API gets called even from the Finalize()
            and we should make sure that we don't run into AVs and DllNotFound Exceptions.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.Dispose(System.Boolean)">
            <summary>Releases the managed resources used by the <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> and optionally releases the unmanaged resources.</summary>
            <param name="disposing">true to release managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.SetRange(System.Data.SqlServerCe.DbRangeOptions,System.Object[],System.Object[])">
            <summary>
            Restricts the set of rows that will be read by the <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see>.
            </summary>
            <param name="dbRangeOptions">The options used when specifying the range. </param>
            <param name="endData">The ending key values for the range. </param>
            <param name="startData">The starting key values for the range. </param>
            <exception cref="T:System.InvalidOperationException"><see cref="P:System.Data.SqlServerCe.SqlCeCommand.IndexName"></see> 
            property has not been set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.CreateAccessorFromParameterList">
            -------------------------------------------------------------------
            <summary>
            This method populates the parameter accessor using user specified 
            parameter information (from SqlCeParameterCollection). 
            Accessor information populated here is passed on to Query Processor
            to help it determine the parameter type information.
            </summary>
                    
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.CreateParameterAccessor(System.Data.SqlServerCe.MetaData[])">
            -------------------------------------------------------------------
            <summary>
            This method populates the parameter accessor taking 
            information from Query processor (QP).
            Accessor information here gives the parameter type info that 
            query processor used during plan compilation.
            
            We do not assume that parameter type information specified
            by user (ref method CreateAccessorFromParameterList) is same as 
            the type information which QP finally uses to generate the plan.
            
            This is a safe assumption for now and we should revisit whether it
            is needed at all in future.
            </summary>
                    
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.GetParameterSize(System.Data.SqlServerCe.MetaData,System.Data.SqlServerCe.SqlCeParameter)">
            -------------------------------------------------------------------
            <summary>
            This is a convenience method which returns the size (byte count)
            of the specified parameter which is going to be bound to a base
            column described in the specified metadata.
            </summary>
            <param name="info">Base column meta data</param>
            <param name="p">User specified parameter</param>
            <returns>Byte count</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.Cancel">
            <summary>
            Attempts to cancel the execution of a <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see>.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.CloseFromConnection">
            -------------------------------------------------------------------
            <summary>
            Closes this command from the connection object
            </summary>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.CloseInternalCommand">
            -------------------------------------------------------------------
            <summary>
            Closes this command and resets the state
            </summary>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.CreateDbParameter">
            <summary>Creates a new instance of a <see cref="T:System.Data.Common.DbParameter"></see> object.</summary>
            <returns>A <see cref="T:System.Data.Common.DbParameter"></see> object.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.CreateParameter">
            <summary>
            Creates a new instance of a <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> object.
            </summary>
            <returns>A <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> object.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
            <summary>Executes the command text against the connection.</summary>
            <returns>A <see cref="T:System.Data.Common.DbDataReader"></see>.</returns>
            <param name="behavior">An instance of <see cref="T:System.Data.CommandBehavior"></see>.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.ExecuteReader">
            <summary>
            Sends the <see cref="P:System.Data.SqlServerCe.SqlCeCommand.CommandText"></see> to the 
            <see cref="P:System.Data.SqlServerCe.SqlCeCommand.Connection"></see> and builds a 
            <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see>.
            </summary>
            <returns>A <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> object.</returns>
            <exception cref="T:System.InvalidOperationException">Cannot execute a command within a 
            transaction context that differs from the context in which the connection was originally enlisted. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>Sends the <see cref="P:System.Data.SqlServerCe.SqlCeCommand.CommandText"></see> to the 
            <see cref="P:System.Data.SqlServerCe.SqlCeCommand.Connection"></see> and builds a 
            <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> by using one of the 
            <see cref="T:System.Data.CommandBehavior"></see> values.</summary>
            <returns>A <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> object.</returns>
            <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior"></see> values. </param>
            <exception cref="T:System.InvalidOperationException">Cannot execute a command within a transaction context that 
            differs from the context in which the connection was originally enlisted. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions)">
            <summary>Sends the <see cref="P:System.Data.SqlServerCe.SqlCeCommand.CommandText"></see> to the 
            <see cref="P:System.Data.SqlServerCe.SqlCeCommand.Connection"></see> and builds a 
            <see cref="T:System.Data.SqlServerCe.SqlCeResultSet"></see> by using the 
            <see cref="T:System.Data.SqlServerCe.ResultSetOptions"></see>.
            </summary>
            <param name="options">The ResultSetOptions to use when building the ResultSet.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions,System.Data.SqlServerCe.SqlCeResultSet)">
            <summary>
            Sends the <see cref="P:System.Data.SqlServerCe.SqlCeCommand.CommandText"></see> to the 
            <see cref="P:System.Data.SqlServerCe.SqlCeCommand.Connection"></see> and builds a 
            <see cref="T:System.Data.SqlServerCe.SqlCeResultSet"></see> by using the 
            <see cref="T:System.Data.SqlServerCe.ResultSetOptions"></see>.
            </summary>
            <param name="options">The ResultSetOptions to use when building the ResultSet.</param>
            <param name="resultSet">The ResultSet to build.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.ExecuteCommand(System.Data.CommandBehavior,System.String,System.Data.SqlServerCe.ResultSetOptions)">
            -------------------------------------------------------------------
            <summary>
            Internal convenience method used to execute reader;
            </summary>
            
            <param name="behavior">command behavior</param>
            <param name="method">caller's method name</param>
            <param name="options">options for ExecuteResultSet only</param>
            <returns>Data reader or null</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.HasOpenedCursors">
            -------------------------------------------------------------------
            <summary>
            Scans weak reference array for opened cursors; Removes any dead
            references as well as references which point to any closed readers;
            </summary>
            <returns>true if there are pending cursors</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.ClearCursorList">
            -------------------------------------------------------------------
            <summary>
            Scans weak reference array for opened cursors; Removes any 
            references which point to readers; To be used at the time we
            Change the connection.
            </summary>
            <returns>removes pending cursors from the list.</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.SetResultSetOptions(System.Data.SqlServerCe.ResultSetOptions)">
            -------------------------------------------------------------------
            <summary>
            Set/Validate requested ResultSetOptions
            </summary>
            <param name="options">Options</param>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.MoveFirst(System.IntPtr)">
            -------------------------------------------------------------------
            <summary>
            Positions the cursor before the first row.
            </summary>
            <param name="pSeCursor">ISECursor interface pointer</param>
            <returns>New cursor position</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.InitializeDataReader(System.Data.SqlServerCe.SqlCeDataReader,System.Int32)">
            -------------------------------------------------------------------
            <summary>
            Initializes data reader created around native ISECursor;
            </summary>
            <param name="reader">Data Reader to be initialized</param>
            <param name="resultType">resultType</param>
            <returns>Data Reader</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.ExecuteCommandText(System.IntPtr@,System.Boolean@)">
            -------------------------------------------------------------------
            <summary>
            Executes the current command.
            </summary>
            <param name="pCursor">OUT: ISECursor interface pointer</param>
            <param name="isBaseTableCursor">OUT: TRUE if this is a base table cursor</param>
            
            <returns>
            Status value: ADP.ExecutedQuery or ADP.ExecutedNonQuery
            </returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.ExecuteNonQuery">
            <summary>
            Executes an SQL statement against the <see cref="T:System.Data.SqlServerCe.SqlCeConnection"></see> and returns the number of rows affected.
            </summary>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.InvalidOperationException">The connection does not exist.-or- The connection is not open.-or- Cannot execute a 
            command within a transaction context that differs from the context in which the connection was originally enlisted. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.ExecuteScalar">
            <summary>
            Executes the query and returns the first column of the first row in the result set that is returned by the query. Extra columns or rows 
            are ignored.
            </summary>
            <returns>The first column of the first row in the result set.</returns>
            <exception cref="T:System.InvalidOperationException">Cannot execute a command within a transaction context that differs from the context 
            in which the connection was originally enlisted. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.OpenCursor(System.Data.CommandBehavior,System.String,System.IntPtr@)">
            -------------------------------------------------------------------
            <summary>
            Opens the currently specified base table.
            </summary>
            
            <param name="behavior">Requested command behavior</param>
            <param name="method">Caller's method name</param>
            <param name="pSeCursor">ISECursor interface pointer</param>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.ExpandCommandText(System.String)">
            -------------------------------------------------------------------
            <summary>
            Returns the current command text after state validation;
            </summary>
            <param name="method">Caller's method name</param>
            <returns>SQL command text</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.FillParameterDataBindings(System.Boolean)">
            -------------------------------------------------------------------
            <summary>
            Populates parameter data bindings with the values from 
            the SqlCeParameterCollection associated with this command;
            If parameter data bindings are 'smaller' than the values
            specified in SqlCeParameterCollection, then destroy data
            bindings and set isPrepared = false.
            Calling methods must check isPrepared value to find whether
            parameters have been set or not.
            </summary>
            <param name="verifyValue">Flag to indicate whether to verify the buffer and parameter.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.FillParameterDataBindings">
            -------------------------------------------------------------------
            <summary>
            Overloaded API for backward compatibility
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.InitializeCommand(System.Data.CommandBehavior,System.String)">
            -------------------------------------------------------------------
            <summary>
            Re-initializes this command object; it does take care of cleaning up
            after previously executed query and creating IQPCommand;  
            </summary>
            
            <param name="behavior">Current CommandBehavior</param>
            <param name="method">Caller's method name</param>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.OnDataBindingChange">
            -------------------------------------------------------------------
            <summary>
            Called when the current data binding expires (e.g. data size change)
            </summary>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.Prepare">
            -------------------------------------------------------------------
            <summary>
            Validate the command, transaction and parameters associated
            with the command.
            The query plan is not compiled here and is lazily compiled 
            when Execute is first called.
            </summary>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.ValidateTransaction">
            -------------------------------------------------------------------
            <summary>
            Validates the specified transaction object.
            </summary>        
            <returns>tx</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.CompileQueryPlan">
             -------------------------------------------------------------------
             <summary>
             Creates parameter accessor and compiles the query plan
             </summary>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.CreateDataBindings">
            -------------------------------------------------------------------
            <summary>
            Creates data bindings for query parameters.
            </summary>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.GetQueryParameters(System.IntPtr)">
            -------------------------------------------------------------------
            <summary>
            Returns MetaData[] array to query parameters associated with the
            specified IQPCommand.
            </summary>
            
            <param name="pQpCommand">IQPCommand interface pointer</param>
            <returns>Array of MetaData</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.ProcessResults(System.Int32)">
            -------------------------------------------------------------------
            <summary>
            Processes native HRESULT; In case of an error, throws SqlCeException
            </summary>
            <param name="hr"></param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommand.ValidateCommand(System.String)">
            -------------------------------------------------------------------
            <summary>
            Validates the connection and transaction objects associated with 
            this command; if everything is all right, it sets the current state
            to InternalStateExecuting; otherwise it throws an exception;
            </summary>
            <param name="method">Caller's method name</param>
            
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeCommand.CommandText">
            <summary>
            Gets or sets an SQL statement to execute at the data source.
            </summary>
            <returns>The SQL statement to execute or the name of the base table to open. The default value is an empty string.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeCommand.IndexName">
            <summary>Specifies the index to be opened.</summary>
            <returns>The name of the index to be opened.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeCommand.CommandTimeout">
            <summary>
            Gets or sets the wait time before terminating the attempt to execute a command and generating an error.
            </summary>
            <returns>Always zero (0) for SQL Server Compact Edition.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeCommand.CommandType">
            <summary>
            Gets or sets a value indicating how the <see cref="P:System.Data.SqlServerCe.SqlCeCommand.CommandText"></see> property is interpreted.
            </summary>
            <returns>One of the <see cref="T:System.Data.CommandType"></see> values. 
            The default is <see cref="F:System.Data.CommandType.Text"></see>.</returns>
            <exception cref="T:System.ArgumentException">The value was not a valid <see cref="T:System.Data.CommandType"></see>. </exception>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeCommand.DbConnection">
            <summary>Gets or sets the <see cref="T:System.Data.SqlServerCe.SqlCeConnection"></see> used by this <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see>.</summary>
            <returns>The connection to the data source.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeCommand.Connection">
            <summary>
            Gets or sets the <see cref="T:System.Data.SqlServerCe.SqlCeConnection"></see> used by this instance of the 
            <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see>.
            </summary>
            <returns>The connection to a data source. The default value is null.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Data.SqlServerCe.SqlCeCommand.Connection"></see> 
            property was changed while a transaction was in progress. </exception>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeCommand.DbParameterCollection">
            <summary>Gets the collection of <see cref="T:System.Data.Common.DbParameter"></see> objects.</summary>
            <returns>The parameters of the SQL statement.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeCommand.Parameters">
            <summary>
            Gets the <see cref="T:System.Data.SqlServerCe.SqlCeParameterCollection"></see>.
            </summary>
            <returns>The parameters of the SQL statement. The default is an empty collection.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeCommand.DbTransaction">
            <summary>Gets or sets the <see cref="T:System.Data.Common.DbTransaction"></see> within which this <see cref="P:System.Data.SqlCeCommand"></see> object executes.</summary>
            <returns>The transaction within which a Command object of a .NET Framework data provider executes. The default value is a null reference (Nothing in Visual Basic).</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeCommand.Transaction">
            <summary>
            Gets or sets the transaction in which the <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> executes.
            </summary>
            <returns>The <see cref="T:System.Data.SqlServerCe.SqlCeTransaction"></see>. The default value is null.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeCommand.UpdatedRowSource">
            <summary>
            Gets or sets how command results are applied to the <see cref="T:System.Data.DataRow"></see> when used by the 
            <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"></see> method of the 
            <see cref="T:System.Data.Common.DbDataAdapter"></see>. This property should not be used with the .NET Compact 
            Framework Data Provider for SQL Server Compact Edition.
            </summary>
            <returns>One of the <see cref="T:System.Data.UpdateRowSource"></see> values. The default is Both. If the command is automatically generated, 
            the default is None.</returns>
            <exception cref="T:System.ArgumentException">The value entered was not one of the <see cref="T:System.Data.UpdateRowSource"></see> values. 
            </exception>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeCommand.IQPSession">
            -------------------------------------------------------------------
            <summary>
            Returns IQPSession used to execute this command; This will  
            either be default IQPSession (from the SqlCeConnection) if we are 
            running in auto-commit mode or QP session associated with the 
            currently assigned transaction; 
            </summary>
            
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeCommand.ITransact">
            -------------------------------------------------------------------
            <summary>
            Returns ITransact used to execute this command; This will  
            either be default ITransact (from the SqlCeConnection) if we are 
            running in auto-commit mode or SE session associated with the 
            currently assigned transaction; 
            </summary>
            
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeCommand.IQPPlan">
            -------------------------------------------------------------------
            <summary>
            Returns IQPPlan interface pointer
            </summary>
            
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeCommand.DesignTimeVisible">
            <summary>Hidden property used by the designers.</summary>
            <returns>This property is not intended to be used in your code. It is used internally to support the designers.</returns>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeCommandBuilder">
            <remarks>
            Provides a means of automatically generating single-table commands used to reconcile changes made to a 
            <see cref="T:System.Data.DataSet"></see> with the associated Microsoft SQL Server 2005 Compact Edition database. 
            This class cannot be inherited.
            </remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommandBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeCommandBuilder"></see> class.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommandBuilder.#ctor(System.Data.SqlServerCe.SqlCeDataAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeCommandBuilder"></see> class 
            with associated <see cref="T:System.Data.SqlServerCe.SqlCeDataAdapter"></see> and 
            <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> objects.
            </summary>
            <param name="adapter">The name of the <see cref="T:System.Data.SqlServerCe.SqlCeDataAdapter"></see>. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommandBuilder.GetInsertCommand">
            <summary>
            Gets the automatically generated <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> object 
            required to perform inserts on the database when an application calls 
            <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"></see> on the 
            <see cref="T:System.Data.SqlServerCe.SqlCeDataAdapter"></see>.
            </summary>
            <returns>The automatically generated <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> object 
            required to perform inserts.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommandBuilder.GetUpdateCommand">
            <summary>
            Gets the automatically generated <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> object 
            required to perform updates on the database when an application calls 
            <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"></see> on the 
            <see cref="T:System.Data.SqlServerCe.SqlCeDataAdapter"></see>.
            </summary>
            <returns>The automatically generated <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> 
            object required to perform updates.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommandBuilder.GetDeleteCommand">
            <summary>
            Gets the automatically generated <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> 
            object required to perform deletions on the database when an application calls 
            <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"></see> on the 
            <see cref="T:System.Data.SqlServerCe.SqlCeDataAdapter"></see>.
            </summary>
            <returns>The automatically generated <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> 
            object required to perform deletions.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)">
            <summary>Allows the provider implementation of the <see cref="T:System.Data.Common.DbCommandBuilder"></see> class to handle additional parameter properties.</summary>
            <param name="statementType">The type of command being generated; INSERT, UPDATE or DELETE. </param>
            <param name="whereClause">true if the parameter is part of the update or delete WHERE clause, false if it is part of the insert or update values. </param>
            <param name="param">A <see cref="T:System.Data.Common.DbParameter"></see> to which the additional modifications are applied. </param>
            <param name="row">The <see cref="T:System.Data.DataRow"></see> from the schema table provided by <see cref="M:System.Data.SqlServerCe.SqlCeDataReader.GetSchemaTable"></see>. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommandBuilder.GetParameterName(System.Int32)">
            <summary>Returns the name of the specified parameter in the format of @p#. Use when building a custom command builder.</summary>
            <returns>The name of the parameter with the specified number appended as part of the parameter name.</returns>
            <param name="parameterOrdinal">The number to be included as part of the parameter's name..</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommandBuilder.GetParameterName(System.String)">
            <summary>Returns the full parameter name, given the partial parameter name.</summary>
            <returns>The full parameter name corresponding to the partial parameter name requested.</returns>
            <param name="parameterName">The partial name of the parameter.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommandBuilder.GetParameterPlaceholder(System.Int32)">
            <summary>Returns the placeholder for the parameter in the associated SQL statement.</summary>
            <returns>The name of the parameter with the specified number appended.</returns>
            <param name="parameterOrdinal">The number to be included as part of the parameter's name.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)">
            <summary>Registers the <see cref="T:System.Data.SqlCeCommandBuilder"></see> to handle the <see cref="E:System.Data.Common.DbDataAdapter.RowUpdating"></see> event for a <see cref="T:System.Data.SqlServerCe.SqlCeDataAdapter"></see>. </summary>
            <param name="adapter">The <see cref="T:System.Data.Common.DbDataAdapter"></see> to be used for the update.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommandBuilder.QuoteIdentifier(System.String)">
            <summary>Given an unquoted identifier, returns the correct quoted form of that identifier. This includes correctly escaping any embedded quotes in the identifier. </summary>
            <returns>The quoted version of the identifier. Embedded quotes within the identifier are correctly escaped. </returns>
            <param name="unquotedIdentifier">The original unquoted identifier.</param>        
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeCommandBuilder.UnquoteIdentifier(System.String)">
            <summary>Given a quoted identifier, returns the correct unquoted form of that identifier. This includes correctly unescaping any embedded quotes in the identifier. </summary>
            <returns>The unquoted identifier, with embedded quotes properly unescaped. </returns>
            <param name="quotedIdentifier">The identifier that will have its embedded quotes removed.</param>           
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeCommandBuilder.ConflictOption">
            <summary>
            Specifies which <see cref="T:System.Data.ConflictOption"></see> is to be used by the 
            <see cref="T:System.Data.SqlServerCe.SqlCeCommandBuilder"></see>. 
            </summary>
            <returns>A <see cref="T:System.Data.ConflictOption object."></see></returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeCommandBuilder.CatalogLocation">
            <summary>Sets or gets the <see cref="T:System.Data.Common.CatalogLocation"></see> for an instance of the <see cref="T:System.Data.SqlServerCe.SqlCeCommandBuilder"></see> class.</summary>
            <returns>A <see cref="T:System.Data.Common.CatalogLocation"></see> object.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeCommandBuilder.CatalogSeparator">
            <summary>Sets or gets a string used as the catalog separator for an instance of the <see cref="T:System.Data.SqlServerCe.SqlCeCommandBuilder"></see> class.</summary>
            <returns>A string indicating the catalog separator for use with an instance of the <see cref="T:System.Data.SqlServerCe.SqlCeCommandBuilder"></see> class.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeCommandBuilder.DataAdapter">
            <summary>
            Gets or sets a <see cref="T:System.Data.SqlServerCe.SqlCeDataAdapter"></see> object for which SQL 
            statements are automatically generated.
            </summary>
            <returns>A <see cref="T:System.Data.SqlServerCe.SqlCeDataAdapter"></see> object.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeCommandBuilder.QuotePrefix">
            <summary>
            Gets or sets the beginning character or characters to use when specifying SQL Server database objects 
            (for example, tables or columns) whose names contain characters such as spaces or reserved tokens.
            </summary>
            <returns>The beginning character or characters to use. The default is an empty string.</returns>
            <exception cref="T:System.InvalidOperationException">This property cannot be changed after an INSERT, 
            UPDATE, or DELETE command has been generated. </exception>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeCommandBuilder.QuoteSuffix">
            <summary>
            Gets or sets the ending character or characters to use when specifying SQL Server database objects 
            (for example, tables or columns) whose names contain characters, such as spaces or reserved tokens.
            </summary>
            <returns>The ending character or characters to use. The default is an empty string.</returns>
            <exception cref="T:System.InvalidOperationException">This property cannot be changed after an 
            INSERT, UPDATE, or DELETE command has been generated. </exception>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeCommandBuilder.SchemaSeparator">
            <summary>Gets or sets the character to be used for the separator between the schema identifier and any other identifiers.</summary>
            	<returns>The character to be used as the schema separator.</returns>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeConnection">
            <remarks>
            Represents an open connection to a data source.
            </remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.EnlistTransaction(System.Transactions.Transaction)">
            <summary>
            Enlist in the specified System.Transactions.Transaction
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeConnection"></see> class.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeConnection"></see> 
            class with the specified connection string.
            </summary>
            <param name="connectionString">The connection used to open the database. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.Finalize">
            <summary>
            Finalizer for the SqlCeConnection object.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.ReleaseNativeInterfaces">
            <summary>
            Releases the native interfaces. Note that this API gets called even from the Finalize()
            and we should make sure that we don't run into AVs and DllNotFound Exceptions.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.Dispose">
            <summary>
            Releases all SQL Server Compact Edition <see cref="T:System.Data.SqlServerCe.SqlCeConnection"></see> resources.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.Dispose(System.Boolean)">
            <summary>Releases the managed resources used by the <see cref="T:System.Data.SqlServerCe.SqlCeConnection"></see> and optionally releases the unmanaged resources.</summary>
            <param name="disposing">true to release managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.Close">
            <summary>
            Closes the connection to the data source. This is the preferred method of closing any open connection.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.Zombie(System.Data.SqlServerCe.SqlCeTransaction)">
            -------------------------------------------------------------------
            <summary>
            Removes transaction references from all the commands enlisted 
            in the specified transaction; this happens when the user calls 
            Commit() or Abort() in which case we need to zombie the transaction;
            </summary>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.Close(System.Boolean)">
             -------------------------------------------------------------------
             <summary>
             Convenience method.
             </summary>
             <param name="silent">
             if true than StateChange events will not be fired. 
             </param>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.GetDatabaseInfo">
            <summary>
            Returns a set of Key Value pairs with information about locale and encryption mode
            of the connected database.
            </summary>
            <returns>Sorted list with the name value pairs of locale and encryption mode.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a database transaction with the current <see cref="T:System.Data.IsolationLevel"></see> value.
            </summary>
            <returns>An object representing the new transaction.</returns>
            <param name="isolationLevel">The transaction isolation level for this connection. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.BeginDbTransaction(System.Data.IsolationLevel)">
            <summary>Starts a database transaction.</summary>
            <returns>An object representing the new transaction.</returns>
            <param name="isolationLevel">Specifies the isolation level for the transaction.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.BeginTransaction">
            <summary>
            Begins a database transaction.
            </summary>
            <returns>An object representing the new transaction.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.ChangeDatabase(System.String)">
            <summary>
            Changes the current database for an open <see cref="T:System.Data.SqlServerCe.SqlCeConnection"></see>.
            </summary>
            <returns>True if the database was changed successfully; otherwise, false.</returns>
            <param name="value">The database name. </param>
            <exception cref="T:System.Data.SqlServerCe.SqlCeException">The databases cannot be changed. </exception>
            <exception cref="T:System.InvalidOperationException">The connection is not open. </exception>
            <exception cref="T:System.ArgumentException">The database name is not valid. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.CheckStateOpen(System.String)">
            -------------------------------------------------------------------
            <summary>
            Validates whether this connection is opened. Throws appropriate
            exception otherwise;
            </summary>
            <param name="method">Caller's method name</param>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.GetSchema">
            <summary>
            Returns schema information for the data source of this <see cref="T:System.Data.SqlServerCe.SqlCeConnection"/>.
            </summary>
            <returns>
            A <see cref="T:System.Data.DataTable"/> that contains schema information.
            </returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.GetSchema(System.String)">
            <summary>
            Returns schema information for the data source of this <see cref="T:System.Data.SqlServerCe.SqlCeConnection"/> using the specified string for the schema name.
            </summary>
            <param name="collectionName">Specifies the name of the schema to return.</param>
            <returns>
            A <see cref="T:System.Data.DataTable"/> that contains schema information.
            </returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.GetSchema(System.String,System.String[])">
            <summary>
            Returns schema information for the data source of this <see cref="T:System.Data.SqlServerCe.SqlCeConnection"/> using the specified string for the schema name and the specified string array for the restriction values.
            </summary>
            <param name="collectionName">Specifies the name of the schema to return.</param>
            <param name="restrictionValues">Specifies a set of restriction values for the requested schema.</param>
            <returns>
            A <see cref="T:System.Data.DataTable"/> that contains schema information.
            </returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.HasOpenedCursors(System.Data.SqlServerCe.SqlCeTransaction)">
            ---------------------------------------------------------------
            <summary>
            Checkes if this connection has any pending cursors opened in
            the context of the specified transaction.
            </summary>
            <param name="tx">Transaction instance</param>
            <returns>true if there are any opened cursors</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.CreateDbCommand">
            <summary>Creates and returns a <see cref="T:System.Data.Common.DbCommand"></see> object associated with the current connection.</summary>
            <returns>A <see cref="T:System.Data.Common.DbCommand"></see> object.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.CreateCommand">
            <summary>
            Creates and returns a <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> object 
            associated with the <see cref="T:System.Data.SqlServerCe.SqlCeConnection"></see>.
            </summary>
            <returns>A <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> object.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.Open">
            <summary>
            Opens a database connection with the property settings specified by the 
            <see cref="P:System.Data.SqlServerCe.SqlCeConnection.ConnectionString"></see>.
            </summary>
            <exception cref="T:System.Data.SqlServerCe.SqlCeException">A connection-level error occurred while 
            opening the connection. </exception>
            <exception cref="T:System.InvalidOperationException">The connection is already open. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.CachedConnectionStringAdd(System.String,System.String,System.Data.SqlServerCe.SqlCeConnectionStringBuilder)">
            -------------------------------------------------------------------
            <summary>
            Adds the specified parsed connection string to the global cache.
            </summary>
            <param name="connStr">Connection string</param>
            <param name="modifiedConnStr">Modified connection string</param>
            <param name="connTokens">Parsed tokens</param>
            
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnection.DatabaseIdentifier">
            <summary>
            Gets the unique identifier of the current database while synchronizing.
            </summary>
            <returns>The unique identifier of the current database.
            Each db file, has a unique identifier. In case of copies of a database in differnt directories
            this will be different. Done as part of issue id 12537.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnection.ConnectionString">
            <summary>
            Gets or sets the string used to open a database.
            </summary>
            <returns>The .NET Compact Framework Data Provider for  connection string that includes the data source 
            name and other parameters needed to establish the initial connection. The default value is an empty string.</returns>
            <exception cref="T:System.ArgumentException">An invalid connection string argument has been supplied. </exception>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnection.ConnectionTimeout">
            <summary>
            Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error.
            </summary>
            <returns>The time (in seconds) to wait for a connection to open. The value is always 0 in .</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnection.Database">
            <summary>
            Gets the name of the current database or the database to be used when a connection is open.
            </summary>
            <returns>The name of the current database or the name of the database to be used when a connection is open. 
            The default value is an empty string. For , the value for this property should be the full path of the database file; 
            for example, "\myApp\myDB.sdf".</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnection.DataSource">
            <summary>
            Gets the file name of the data source. In , databases are always stored in separate files.
            </summary>
            <returns>The location and file name of the data source. The default value is an empty string.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnection.State">
            <summary>
            Gets the current state of the connection.
            </summary>
            <returns>A bitwise combination of the <see cref="T:System.Data.ConnectionState"></see> values. 
            The default is Closed.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnection.ServerVersion">
            <summary>
            Returns the version number as a string.
            </summary>
            <returns>A string of the version of Server.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnection.DbProviderFactory">
            <summary> Gets the provider factory associated with the SqlCeConnection.</summary>         
        </member>
        <member name="E:System.Data.SqlServerCe.SqlCeConnection.InfoMessage">
            <summary>
            Occurs when the .NET Compact Framework Data Provider for SQL Server sends a warning or an informational message.
            </summary>
        </member>
        <member name="E:System.Data.SqlServerCe.SqlCeConnection.FlushFailure">
            <summary>
            Occurs when the background flush fails.
            </summary>
        </member>
        <member name="E:System.Data.SqlServerCe.SqlCeConnection.StateChange">
            <summary>
            Occurs when the state of the connection changes.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnection.ITransact">
            -------------------------------------------------------------------
            <summary>
            ITransact interface pointer; This returns default SE session used
            to run commands in auto-commit mode;
            </summary>
            
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnection.IQPSession">
            -------------------------------------------------------------------
            <summary>
            IQPSession interface pointer; This returns default QP session used
            to run commands in auto-commit mode;
            </summary>
            
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeConnection.IQPServices">
            -------------------------------------------------------------------
            <summary>
            IQPServices interface pointer
            </summary>
            
        </member>
        <member name="M:System.Data.SqlServerCe.WeakReferenceCache.#ctor(System.Boolean)">
            -------------------------------------------------------------------
            <summary>
            Constructor
            </summary>
            <param name="trackResurrection">True if using long weak references.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.WeakReferenceCache.Add(System.Object)">
            -------------------------------------------------------------------
            <summary>
            Adds the specified object to the weak reference cache
            </summary>
            <param name="value">Object to be added</param>
            <returns>Number of objects in the cache</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.WeakReferenceCache.GetObject(System.Int32)">
            ---------------------------------------------------------------
            <summary>
            Returns a strong reference to an object at the specified indx;
            </summary>
            <param name="indx">Index</param>
            
        </member>
        <member name="M:System.Data.SqlServerCe.WeakReferenceCache.Remove(System.Object)">
            ---------------------------------------------------------------
            <summary>
            Removes the specified object from the cache
            </summary>
            <param name="value">Object to be removed</param>
            
        </member>
        <member name="M:System.Data.SqlServerCe.WeakReferenceCache.RemoveAt(System.Int32)">
            ---------------------------------------------------------------
            <summary>
            Removes the object at the specified index from the cache
            </summary>
            <param name="index">Cache index</param>
            
        </member>
        <member name="P:System.Data.SqlServerCe.WeakReferenceCache.Count">
            -------------------------------------------------------------------
            <summary>
            Element count
            </summary>
            <value>The count of elements in the cache</value>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.ObjectLifeTimeTracker.#ctor(System.Boolean)">
            ---------------------------------------------------------------
            <summary>
            Constructor
            </summary>
            <param name="trackResurrection">True to use long weak references</param>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.ObjectLifeTimeTracker.HasOpenedCursors(System.Data.SqlServerCe.SqlCeTransaction)">
            ---------------------------------------------------------------
            <summary>
            Checkes if this connection has any pending cursors opened in
            the context of the specified transaction.
            </summary>
            <param name="tx">Transaction instance</param>
            <returns>true if there are any opened cursors</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.ObjectLifeTimeTracker.Close(System.Boolean)">
            ---------------------------------------------------------------
            <summary>
            Closes all data readers, commands and transactions associated 
            with this connection; This method is called when the connection
            is being closed;
            </summary>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeConnection.ObjectLifeTimeTracker.Zombie(System.Data.SqlServerCe.SqlCeTransaction)">
            ---------------------------------------------------------------
            <summary>
            Removes transaction references from all the commands enlisted 
            with the specified transaction; this happens when the user 
            calls Commit() or Abort() in which case we need to zombie 
            transaction;
            </summary>
            
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeDataReader">
            <remarks>
            Provides a way of reading a forward-only stream of data rows from a data source. This class cannot be inherited.
            </remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.#ctor(System.Data.SqlServerCe.SqlCeConnection,System.Data.SqlServerCe.SqlCeCommand)">
            -------------------------------------------------------------------
            <summary>
            Internal constructor.
            </summary>
            <param name="connection">Parent connection</param>
            <param name="command">Parent command</param>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.InitializeReader(System.Data.SqlServerCe.SqlCeConnection,System.Data.SqlServerCe.SqlCeCommand)">
            -------------------------------------------------------------------
            <summary>
            Initializes this data reader. This is only called during creation.
            </summary>
            <param name="connection">Parent connection</param>
            <param name="command">Parent command</param>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.Dispose">
            <summary>
            Releases the resources consumed by this <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see>.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the 
            <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.ReleaseNativeInterfaces">
            <summary>
            Releases the native interfaces. Note that this API gets called even from the Finalize()
            and we should make sure that we don't run into AVs and DllNotFound Exceptions.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.Close">
            <summary>
            Closes the <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> object.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetSchemaTable">
            <summary>
            Returns a <see cref="T:System.Data.DataTable"></see> that describes the column 
            metadata of the <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see>.
            </summary>
            <returns>A <see cref="T:System.Data.DataTable"></see> that describes the column metadata.</returns>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.Seek(System.Data.SqlServerCe.DbSeekOptions,System.Object[])">
            <summary>
            Places the <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> on the record with 
            indexed values that match the specified parameters.
            </summary>
            <returns>A Boolean value; true indicates the cursor is positioned on a row.</returns>
            <param name="dbSeekOptions">The <see cref="T:System.Data.SqlServerCe.DbSeekOptions"></see> to use.</param>
            <param name="index">The index of the record.</param>
            <exception cref="T:System.Data.SqlServerCe.SqlCeException">The value was not found, or another error occurred. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.SetRange(System.Data.SqlServerCe.DbRangeOptions,System.Object[],System.Object[])">
            -------------------------------------------------------------------
            <summary>
            Sets a range on the current index.
            </summary>
            <param name="dbRangeOptions">DBRANGE options</param>
            <param name="startData">start data</param>
            <param name="endData">end data</param>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.BuildSchemaTable">
            -------------------------------------------------------------------
            <summary>
            Builds schema table from column meta data
            </summary>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.IsAliased(System.Data.SqlServerCe.MetaData)">
            -------------------------------------------------------------------
            <summary>
            Returns true if the specified column is aliased.
            </summary>
            <param name="info">Column metadata</param>
            <returns>true if aliased</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.IsCommandBehavior(System.Data.CommandBehavior)">
            <summary>
            Returns true if the present CommandBehavior contains the behavior passed as an argument.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.FillMetaData(System.Data.SqlServerCe.SqlCeCommand)">
             -------------------------------------------------------------------
             <summary>
             Populates meta data tables; This includes index information provided
             that the user called ExecuteReader() with KeyInfo CommandBehavior;
             </summary>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.FillMetaData(System.IntPtr)">
             -------------------------------------------------------------------
             <summary>
             Populates meta data tables; This includes all the fields found in
             MetaData structure, except isKey and isUnique;
             </summary>
            
             <param name="pIUnknown">Either ISECursor or IQPPlan</param>
             
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.PopulateMetaData(System.Int32,System.IntPtr)">
             -------------------------------------------------------------------
             <summary>
              Populates meta data tables using the specified SECOLUMNINO array;
             </summary>
            
             <param name="columnCount">Number of expected columns</param>
             <param name="prgColumnInfo">SECOLUMNINFO[] structure</param>
             
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.FetchValue(System.Int32)">
            -------------------------------------------------------------------
            <summary>
            Fetches the value at the specified index. The value is stored in
            the internal meta data array.
            </summary>
            <param name="index">Column ordinal</param>
            <returns>Accessor set the at the specified value</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.ProcessResults(System.Int32)">
            -------------------------------------------------------------------
            <summary>
            Processes native HRESULT.
            </summary>
            <param name="hr">HRESULT</param>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.NextResult">
            <summary>
            Not supported in SQL Server Compact Edition.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.OnMove">
            <summary>
            SqlCeResultSet needs to be notified when the move occurs
            </summary>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.Read">
            <summary>
            Advances <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> to the next record.
            </summary>
            <returns>true if there are more rows; otherwise, false.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.Move(System.Data.SqlServerCe.DIRECTION)">
            -------------------------------------------------------------------
            <summary>
            Moves the underlying cursor (QP/SE) in the desired direction.
            </summary>
            <param name="direction">Cursor move direction</param>
            <returns>true if available</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.Move(System.IntPtr,System.Data.SqlServerCe.DIRECTION)">
            -------------------------------------------------------------------
            <summary>
            Moves the QP cursor to the next available row, ingoring invalid
            bookmarks; this is used in case of keyset cursors
            </summary>
            <param name="pSeCursor">QP Cursor</param>
            <param name="direction">Move direction</param>
            <returns>HRESULT</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.IsEndOfRowset(System.Int32)">
            -------------------------------------------------------------------
            <summary>
            Checks the hr/IError for SSCE_M_NOCURRENTRECORD
            </summary>
            <param name="hr">HRESULT</param>
            <returns>TRUE if SSCE_M_NOCURRENTRECORD</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.ReleaseCurrentRow">
            -------------------------------------------------------------------
            <summary>
            Releases data bindings for the current row (IStream interfaces);
            </summary>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.CreateAccessors(System.Data.SqlServerCe.SqlCeCommand,System.Int32,System.Boolean)">
            -------------------------------------------------------------------
            <summary>
            Creates accessors from the column meta data
            </summary>
            <param name="command">Command to execute</param>
            <param name="columnCount">Number of columns</param>
            <param name="allowMultipleAccessor">
            true if multiple accessors are allowed
            </param>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.CreateBindingsFromMetaData(System.Data.SqlServerCe.SqlCeCommand,System.Int32,System.Boolean)">
             -------------------------------------------------------------------
             <summary>
             Convenience method. See: CreateAccessors
             </summary>
             
             <param name="command">Command object</param>
             <param name="columnCount">Column count</param>
             <param name="allowMultipleAccessor">
             true if multiple accessors are allowed
            </param>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <returns>The value of the column.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. The 
            <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after the last 
            row in the result set. </exception>
            <exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal"></see> object.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
            <exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetByte(System.Int32)">
            <summary>
            Gets the value of the specified column as a byte.
            </summary>
            <returns>The value of the specified column as a byte.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
            <exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.DoSequentialCheck(System.Int32,System.Int64,System.String)">
            -------------------------------------------------------------------
            <summary>
            Verifies whether sequential access is preserved.
            </summary>
            <param name="ordinal">Column ordinal</param>
            <param name="dataIndex">Current data index</param>
            <param name="method">Caller's method name</param>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer as an array 
            starting at the given buffer offset.
            </summary>
            <returns>The actual number of bytes read.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <param name="buffer">The buffer into which to read the stream of bytes. </param>
            <param name="dataIndex">The index within the field from which to begin the read operation. </param>
            <param name="bufferIndex">The index for buffer to begin the read operation. </param>
            <param name="length">The maximum length to copy into the buffer. </param>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. The 
            <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after the last 
            row in the result set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer as an array starting 
            at the given buffer offset.
            </summary>
            <returns>The actual number of characters read.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <param name="buffer">The buffer into which to copy data. </param>
            <param name="dataIndex">The index within the row from which to begin the read operation. </param>
            <param name="bufferIndex">The index for buffer to begin the read operation. </param>
            <param name="length">The number of characters to read. </param>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the name of the source data type.
            </summary>
            <returns>The name of the back-end data type.</returns>
            <param name="index">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned 
            after the last row in the result set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime"></see> object.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. The 
            <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
            <exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetDouble(System.Int32)">
            <summary>
            Gets the value of the specified column as a double-precision floating point number.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
            <exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Type"></see> that is the data type of the object.
            </summary>
            <returns>The <see cref="T:System.Type"></see> that is the data type of the object.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetProviderSpecificFieldType(System.Int32)">
            <summary>
            Gets a <see cref="T:System.Object"></see> that is a representation of the underlying 
            provider-specific field type.
            </summary>
            <returns>The <see cref="T:System.Type"></see> object that describes the data type of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetFloat(System.Int32)">
            <summary>
            Gets the value of the specified column as a single-precision floating point number.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. The 
            <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
            <exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetGuid(System.Int32)">
            <summary>
            Gets the value of the specified column as a globally unique identifier (GUID).
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. The 
            <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
            <exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetInt16(System.Int32)">
            <summary>
            Gets the value of the specified column as a 16-bit signed integer.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. The 
            <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
            <exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the value of the specified column as a 32-bit signed integer.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
            <exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetInt64(System.Int32)">
            <summary>
            Gets the value of the specified column as a 64-bit signed integer.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
            <exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetName(System.Int32)">
            <summary>
            Gets the name of the specified column.
            </summary>
            <returns>The name of the specified column.</returns>
            <param name="index">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetOrdinal(System.String)">
            <summary>
            Gets the column ordinal, given the name of the column.
            </summary>
            <returns>The zero-based column ordinal.</returns>
            <param name="name">The name of the column. </param>
            <exception cref="T:System.IndexOutOfRangeException">The name specified is not a valid column name. </exception>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after the last row in the result set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetString(System.Int32)">
            <summary>
            Gets the value of the specified column as a string.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after the last row in the result set. </exception>
            <exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetValue(System.Int32)">
            <summary>
            Gets the value of the column at the specified ordinal in its native format.
            </summary>
            <returns>The value to return.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetValues(System.Object[])">
            <summary>
            Gets all the attribute columns in the current row.
            </summary>
            <returns>The number of instances of <see cref="T:System.Object"></see> in the array.</returns>
            <param name="values">An array of <see cref="T:System.Object"></see> into which to copy the attribute columns. </param>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetLongValue(System.Data.SqlServerCe.MetaData,System.Int32)">
            -------------------------------------------------------------------
            <summary>
            Convenience method. Retrieves long value as System.Object.
            </summary>
            
            <param name="info">Column meta data</param>
            <param name="ordinal">Column ordinal</param>
            <returns>Long value</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetBytes(System.Data.SqlServerCe.MetaData,System.Byte[],System.Int32,System.Int32,System.Int32)">
            -------------------------------------------------------------------
            <summary>
            This is a convenience method which is called from GetLongValue and 
            GetBytes; The assumption here is that the parameters have already
            been verified.
            </summary>
            
            <param name="info">Column metadata</param>
            <param name="buffer">Destination buffer</param>
            <param name="dataIndex">Source index</param>
            <param name="bufferIndex">Destination index</param>
            <param name="cb">Data length (in bytes)</param>
            <returns>Number of bytes read</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetChars(System.Data.SqlServerCe.MetaData,System.Char[],System.Int32,System.Int32,System.Int32)">
            -------------------------------------------------------------------
            <summary>
            This is a convenience method which is called from GetLongValue and GetBytes;
            The assumption here is that the parameters have already been verified.
            </summary>
            
            <param name="info">Column metadata</param>
            <param name="buffer">Destination buffer</param>
            <param name="dataIndex">Source index</param>
            <param name="bufferIndex">Destination index</param>
            <param name="cch">Data length (in characters)</param>
            <returns>Number of characters read</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetSqlBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Data.SqlTypes.SqlBoolean"></see>.
            </summary>
            <returns>The value of the column.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetSqlMoney(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Data.SqlTypes.SqlMoney"></see>.
            </summary>
            <returns>A <see cref="T:System.Data.SqlTypes.SqlMoney"></see>.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetSqlDecimal(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Data.SqlTypes.SqlDecimal"></see>.
            </summary>
            <returns>A <see cref="T:System.Data.SqlTypes.SqlDecimal"></see>.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetSqlByte(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Data.SqlTypes.SqlByte"></see>.
            </summary>
            <returns>A <see cref="T:System.Data.SqlTypes.SqlByte"></see>.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetSqlBinary(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Data.SqlTypes.SqlBinary"></see>.
            </summary>
            <returns>A <see cref="T:System.Data.SqlTypes.SqlBinary"></see>.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetSqlDateTime(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Data.SqlTypes.SqlDateTime"></see>.
            </summary>
            <returns>A <see cref="T:System.Data.SqlTypes.SqlDateTime"></see>.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetSqlDouble(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Data.SqlTypes.SqlDouble"></see>.
            </summary>
            <returns>A <see cref="T:System.Data.SqlTypes.SqlDouble"></see>.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetSqlSingle(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Data.SqlTypes.SqlSingle"></see>.
            </summary>
            <returns>A <see cref="T:System.Data.SqlTypes.SqlSingle"></see>.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetSqlGuid(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Data.SqlTypes.SqlGuid"></see>.
            </summary>
            <returns>A <see cref="T:System.Data.SqlTypes.SqlGuid"></see>.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetSqlInt16(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Data.SqlTypes.SqlInt16"></see>.
            </summary>
            <returns>A <see cref="T:System.Data.SqlTypes.SqlInt16"></see>.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned 
            after the last row in the result set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetSqlInt32(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Data.SqlTypes.SqlInt32"></see>.
            </summary>
            <returns>A <see cref="T:System.Data.SqlTypes.SqlInt32"></see>.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetSqlInt64(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Data.SqlTypes.SqlInt64"></see>.
            </summary>
            <returns>A <see cref="T:System.Data.SqlTypes.SqlInt64"></see>.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned after 
            the last row in the result set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetSqlString(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Data.SqlTypes.SqlString"></see>.
            </summary>
            <returns>A <see cref="T:System.Data.SqlTypes.SqlString"></see>.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
            <exception cref="T:System.InvalidOperationException">The operation is not valid. 
            The <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> may be positioned 
            after the last row in the result set. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.IsDBNull(System.Int32)">
            <summary>
            Gets a value indicating whether the column contains nonexistent or missing values.
            </summary>
            <returns>true if the specified column value is equivalent to <see cref="T:System.DBNull"></see>; otherwise, false.</returns>
            <param name="ordinal">The zero-based column ordinal. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetEnumerator">
            <summary>Returns an <see cref="T:System.Collections.IEnumerator"></see> that iterates through the <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see>.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> for the <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see>.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataReader.GetChar(System.Int32)">
            <summary>
            Not supported in SQL Server Compact Edition.
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.
            </summary>
            <returns>The depth of nesting for the current row. SQL Server Compact Edition does not support nesting and always returns zero.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeDataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
            <returns>When not positioned in a valid recordset, 0; otherwise, the number of columns in the current record.</returns>
            <exception cref="T:System.InvalidOperationException">There is no current connection to a data source. </exception>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeDataReader.IsClosed">
            <summary>
            Indicates whether the data reader is closed.
            </summary>
            <returns>true if the <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> is closed; otherwise, 
            false.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeDataReader.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            </summary>
            <returns>The number of rows changed, inserted, or deleted; 0 if no rows were affected or 
            the statement failed; and -1 for SELECT statements.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeDataReader.Item(System.Int32)">
            <summary>Gets the value of the specified column in its native format given the column ordinal.</summary>
            <returns>The value of the specified column in its native format.</returns>
            <param name="index">The column ordinal. </param>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeDataReader.Item(System.String)">
            <summary>Gets the value of the specified column in its native format given the column name.</summary>
            <returns>The value of the specified column in its native format.</returns>
            <param name="name">The column name. </param>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeDataReader.HasRows">
            <summary>
            Gets a value that indicates whether the <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> 
            contains one or more rows
            </summary>
            <returns>A <see cref="T:System.Boolean"></see> value.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeDataReader.HiddenFieldCount">
            <summary>
            Gets a value that indicates number of hidden fields in this <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"> object.</see>         
            </summary>
            <returns>A <see cref="T:System.Int32"></see> value.</returns>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeParameter">
            <remarks>
            Represents a parameter to a <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> and, optionally, its mapping 
            to a <see cref="T:System.Data.DataSet"></see> column. This class cannot be inherited.
            </remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> class.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> class with 
            the parameter name and the value of the new <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see>.
            </summary>
            <param name="name">The name of the parameter to map. </param>
            <param name="value">The value of the new <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> object. </param>
            <exception cref="T:System.ArgumentException">The value supplied for the parameter cannot be converted to a 
            database type supported by SQL Server Compact Edition. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameter.#ctor(System.String,System.Data.SqlDbType)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> class with 
            the parameter name and data type.
            </summary>
            <param name="name">The name of the parameter to map. </param>
            <param name="dataType">One of the <see cref="T:System.Data.SqlDbType"></see> values. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameter.#ctor(System.String,System.Data.SqlDbType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> class with 
            the parameter name, data type, and length.
            </summary>
            <param name="size">The length of the parameter. </param>
            <param name="name">The name of the parameter to map. </param>
            <param name="dataType">One of the <see cref="T:System.Data.SqlDbType"></see> values. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameter.#ctor(System.String,System.Data.SqlDbType,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> class with 
            the parameter name, data type, length, and source column name.
            </summary>
            <param name="size">The length of the parameter. </param>
            <param name="name">The name of the parameter to map. </param>
            <param name="sourceColumn">The name of the source column. </param>
            <param name="dataType">One of the <see cref="T:System.Data.SqlDbType"></see> values. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameter.#ctor(System.String,System.Data.SqlDbType,System.Int32,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> class with 
            the parameter name, data type, length, and other properties. Microsoft SQL Server 2005 Compact Edition 
            only supports input parameters.
            </summary>
            <param name="size">The length of the parameter. </param>
            <param name="sourceVersion">One of the <see cref="T:System.Data.DataRowVersion"></see> values. </param>
            <param name="isNullable">true if the value of the field can be null; otherwise, false. </param>
            <param name="scale">The total number of decimal places to which 
            <see cref="P:System.Data.SqlServerCe.SqlCeParameter.Value"></see> is resolved. </param>
            <param name="precision">The total number of digits to the left and right of the decimal point to which 
            <see cref="P:System.Data.SqlServerCe.SqlCeParameter.Value"></see> is resolved. </param>
            <param name="dbType">One of the <see cref="T:System.Data.SqlDbType"></see> values. </param>
            <param name="sourceColumn">The name of the source column. </param>
            <param name="value">An <see cref="T:System.Object"></see> that is the value of the 
            <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see>. </param>
            <param name="parameterName">The name of the parameter. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameter.#ctor(System.String,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> 
            class with the parameter name, data type, length, parameter direction, and other properties. 
            SQL Server Compact Edition only supports input parameters.
            </summary>
            <param name="size">The length of the parameter. </param>
            <param name="sourceVersion">One of the <see cref="T:System.Data.DataRowVersion"></see> values. </param>
            <param name="isNullable">true if the value of the field can be null; otherwise, false. </param>
            <param name="scale">The total number of decimal places to which 
            <see cref="P:System.Data.SqlServerCe.SqlCeParameter.Value"></see> is resolved. </param>
            <param name="precision">The total number of digits to the left and right of the decimal point to which 
            <see cref="P:System.Data.SqlServerCe.SqlCeParameter.Value"></see> is resolved. </param>
            <param name="dbType">One of the <see cref="T:System.Data.SqlDbType"></see> values. </param>
            <param name="sourceColumn">The name of the source column. </param>
            <param name="value">An <see cref="T:System.Object"></see> that is the value of the 
            <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see>. </param>
            <param name="direction">The <see cref="P:System.Data.ParameterDirection"></see> to use.</param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameter.ResetDbType">
            <summary>
            Resets the type associated with this <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see>.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameter.ToString">
            <summary>
            Gets a string containing the <see cref="P:System.Data.SqlServerCe.SqlCeParameter.ParameterName"></see>.
            </summary>
            <returns>A string containing the <see cref="P:System.Data.SqlServerCe.SqlCeParameter.ParameterName"></see>.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeParameter.DbType">
            <summary>
            Gets or sets the <see cref="T:System.Data.DbType"></see> of the parameter.
            </summary>
            <returns>One of the <see cref="T:System.Data.DbType"></see> values. The default is 
            <see cref="F:System.Data.DbType.String"></see>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The property was not set to a valid 
            <see cref="T:System.Data.DbType"></see>. </exception>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeParameter.Direction">
            <summary>
            This property always returns ParameterDirection.Input for SQL Server Compact Edition. 
            Setting this property to a different value causes an 
            <see cref="T:System.InvalidOperationException"></see> to be thrown.
            </summary>
            <returns>This property always returns ParameterDirection.Input for 
            SQL Server Compact Edition Data Provider. Setting this property is not supported.</returns>
            <exception cref="T:System.InvalidOperationException">The user attempted to set this property. </exception>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeParameter.IsNullable">
            <summary>
            Gets or sets a value indicating whether or not the parameter accepts null values.
            </summary>
            <returns>true if null values are accepted; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeParameter.Offset">
            <summary>Gets or sets the offset to the <see cref="P:System.Data.SqlServerCe.SqlCeParameter.Value"></see> property.</summary>
            <returns>The offset to the <see cref="P:System.Data.SqlServerCe.SqlCeParameter.Value"></see>. The default is 0.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeParameter.SourceColumnNullMapping">
            <summary>Sets or gets a value which indicates whether the source column is nullable. This allows <see cref="T:System.Data.SqlServerCe.SqlCeCommandBuilder"></see> to correctly generate Update statements for nullable columns.</summary>
            <returns>true if the source column is nullable; false if it is not.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeParameter.SqlDbType">
            <summary>
            Gets or sets the <see cref="T:System.Data.SqlDbType"></see> of the parameter.
            </summary>
            <returns>One of the <see cref="T:System.Data.SqlDbType"></see> values. The default is NVarChar.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeParameter.ParameterName">
            <summary>
            Gets or sets the name of the <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see>.
            </summary>
            <returns>The name of the <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see>. The default is an empty string.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeParameter.Precision">
            <summary>
            Gets or sets the maximum number of digits used to represent the 
            <see cref="P:System.Data.SqlServerCe.SqlCeParameter.Value"></see> property.
            </summary>
            <returns>The maximum number of digits used to represent the 
            <see cref="P:System.Data.SqlServerCe.SqlCeParameter.Value"></see> property. The default value is 0.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeParameter.Scale">
            <summary>
            Gets or sets the number of decimal places to which 
            <see cref="P:System.Data.SqlServerCe.SqlCeParameter.Value"></see> is resolved.
            </summary>
            <returns>The number of decimal places to which <see cref="P:System.Data.SqlServerCe.SqlCeParameter.Value"></see> 
            is resolved. The default is 0.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeParameter.Size">
            <summary>
            Gets or sets the maximum length of the data within the column.
            </summary>
            <returns>The maximum length of the data within the column. The default value is inferred from the parameter value.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeParameter.SourceColumn">
            <summary>
            Gets or sets the name of the source column mapped to the <see cref="T:System.Data.DataSet"></see> 
            and used for loading or returning the <see cref="P:System.Data.SqlServerCe.SqlCeParameter.Value"></see>.
            </summary>
            <returns>The name of the source column mapped to the <see cref="T:System.Data.DataSet"></see>. 
            The default is an empty string.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeParameter.SourceVersion">
            <summary>
            Gets or sets the <see cref="T:System.Data.DataRowVersion"></see> to use when 
            loading <see cref="P:System.Data.SqlServerCe.SqlCeParameter.Value"></see>.
            </summary>
            <returns>One of the <see cref="T:System.Data.DataRowVersion"></see> values. The default is Current.</returns>
            <exception cref="T:System.ArgumentException">The property was not set to one of the 
            <see cref="T:System.Data.DataRowVersion"></see> values. </exception>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
            <returns>An <see cref="T:System.Object"></see> that is the value of the parameter. The default value is null.</returns>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeParameterCollection">
            <remarks>
            Collects all parameters relevant to a <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> as well 
            as their respective mappings to <see cref="T:System.Data.DataSet"></see> columns.
            </remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.GetParameter(System.String)">
            <summary>
            Returns the <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> with the specified name.
            </summary>
            <returns>The <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> with the specified name.</returns>
            <param name="parameterName">The name of the parameter to retrieve. </param>
            <exception cref="T:System.IndexOutOfRangeException">The name specified does not exist. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.GetParameter(System.Int32)">
            <summary>
            Returns the <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> at the specified index.
            </summary>
            <returns>The <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> at the specified index.</returns>
            <param name="index">The zero-based index of the parameter to retrieve. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index specified does not exist. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
            <summary>Sets the <see cref="T:System.Data.Common.DbParameter"></see> object at the specified index to a new value. </summary>
            <param name="value">The new <see cref="T:System.Data.Common.DbParameter"></see> value.</param>
            <param name="index">The index where the <see cref="T:System.Data.Common.DbParameter"></see> object is located.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
            <summary>Sets the <see cref="T:System.Data.Common.DbParameter"></see> object with the specified name to a new value.</summary>
            <param name="value">The new <see cref="T:System.Data.Common.DbParameter"></see> value.</param>
            <param name="parameterName">The name of the <see cref="T:System.Data.Common.DbParameter"></see> object in the collection.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.AddRange(System.Array)">
            <summary>
            Adds an array of <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> objects to 
            <see cref="T:System.Data.SqlServerCe.SqlCeParameterCollection"></see>.
            </summary>
            <param name="values">An array of values of type <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> 
            to add to the collection.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.Add(System.Object)">
            <summary>
            Adds a <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> object to the 
            <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see>.
            </summary>
            <returns>The index of the new <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> object in the collection.</returns>
            <param name="value">The <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> object to add to the collection. </param>
            <exception cref="T:System.InvalidCastException">The parameter passed was not a 
            <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see>. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.Add(System.Data.SqlServerCe.SqlCeParameter)">
            <summary>
            Adds the specified <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> to the 
            <see cref="T:System.Data.SqlServerCe.SqlCeParameterCollection"></see>.
            </summary>
            <returns>A reference to the new <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> object.</returns>
            <param name="value">The <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> to add to the collection. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.AddWithValue(System.String,System.Object)">
            <summary>
            Adds a new <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> to the 
            <see cref="T:System.Data.SqlServerCe.SqlCeParameterCollection"></see> and sets its value.
            </summary>
            <param name="value">Value of the parameterName.</param>
            <param name="parameterName">Name of the <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see>.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.Add(System.String,System.Object)">
            <summary>
            Adds a <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> to the 
            <see cref="T:System.Data.SqlServerCe.SqlCeParameterCollection"></see> given the parameter name and value.
            </summary>
            <returns>A reference to the new <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> object.</returns>
            <param name="value">The <see cref="T:System.Object"></see> value of the 
            <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> to add to the collection. </param>
            <param name="parameterName">The name of the parameter. </param>
            <exception cref="T:System.InvalidCastException">The object supplied as the value parameter cannot be converted 
            to a string. This can happen if the object is not a primitive type, SqlDbType or byte array. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.Add(System.String,System.Data.SqlDbType)">
            <summary>
            Adds a <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> to the 
            <see cref="T:System.Data.SqlServerCe.SqlCeParameterCollection"></see> given the parameter name and data type.
            </summary>
            <returns>A reference to the new <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> object.</returns>
            <param name="type">One of the SqlDbType values. </param>
            <param name="parameterName">The name of the parameter. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.Add(System.String,System.Data.SqlDbType,System.Int32)">
            <summary>
            Adds a <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> to the 
            <see cref="T:System.Data.SqlServerCe.SqlCeParameterCollection"></see> given the parameter name, data type, and column width.
            </summary>
            <returns>A reference to the new <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> object.</returns>
            <param name="type">One of the SqlDbType values. </param>
            <param name="size">The width of the column. </param>
            <param name="parameterName">The name of the parameter. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.Add(System.String,System.Data.SqlDbType,System.Int32,System.String)">
            <summary>
            Adds a <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> to the 
            <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> given the parameter name, 
            data type, column width, and source column name.
            </summary>
            <returns>A reference to the new <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> object.</returns>
            <param name="type">One of the SqlDbType values. </param>
            <param name="size">The width of the column. </param>
            <param name="sourceColumn">The name of the source column. </param>
            <param name="parameterName">The name of the parameter. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.Contains(System.String)">
            <summary>
            Gets a value indicating whether a <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> 
            with the specified parameter name exists in the collection.
            </summary>
            <returns>true if the collection contains the parameter; otherwise, false.</returns>
            <param name="value">The name of the parameter. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.Contains(System.Object)">
            <summary>
            Gets a value indicating whether or not a <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> 
            object exists in the collection.
            </summary>
            <returns>true if the collection contains the <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see>; otherwise, false.</returns>
            <param name="value">The value of the <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> object to find. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> objects from the 
            <see cref="T:System.Data.SqlServerCe.SqlCeParameterCollection"></see> to the specified array.
            </summary>
            <param name="array">The <see cref="T:System.Array"></see> into which to copy the 
            <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> objects. </param>
            <param name="index">The starting index of the array. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.GetEnumerator">
            <summary>Exposes the <see cref="M:System.Collections.IEnumerable.GetEnumerator"></see> method, which supports a simple iteration over a collection by a .NET Framework data provider.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.IndexOf(System.String)">
            <summary>
            Gets the location of the <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> in the 
            collection with the specified parameter name.
            </summary>
            <returns>The location of the <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> in the collection.</returns>
            <param name="parameterName">The name of the parameter to find. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.IndexOf(System.Object)">
            <summary>
            Gets the location of the <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> object in the collection.
            </summary>
            <returns>The zero-based location of the <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> in the collection.</returns>
            <param name="value">The <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> object to locate. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> in the collection at the specified index.
            </summary>
            <param name="value">The <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> to add to the collection. </param>
            <param name="index">The zero-based index where the parameter is to be inserted within the collection. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> at the specified index from the collection.
            </summary>
            <param name="index">The zero-based index of the parameter to remove. </param>
            <exception cref="T:System.IndexOutOfRangeException">The specified index does not exist. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.RemoveAt(System.String)">
            <summary>
            Removes the <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> with the specified name from the collection.
            </summary>
            <param name="parameterName">The name of the parameter to remove. </param>
            <exception cref="T:System.ArgumentException">A parameter with the specified name does not exist in the collection. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeParameterCollection.Remove(System.Object)">
            <summary>
            Removes the specified <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> from the collection.
            </summary>
            <param name="value">The <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> object to remove from the collection. </param>
            <exception cref="T:System.SystemException">The parameter does not exist. </exception>
            <exception cref="T:System.InvalidCastException">The parameter is not a 
            <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see>. </exception>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeParameterCollection.IsSynchronized">
            <summary>Specifies whether the collection is synchronized.</summary>
            <returns>true if the collection is synchronized; otherwise false.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeParameterCollection.SyncRoot">
            <summary>Specifies the <see cref="T:System.Object"></see> to be used to synchronize access to the collection.</summary>
            <returns>A <see cref="T:System.Object"></see> to be used to synchronize access to the <see cref="T:System.Data.Common.DbParameterCollection"></see>.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeParameterCollection.IsReadOnly">
            <summary>Specifies whether the collection is read-only.</summary>
            <returns>true if the collection is read-only; otherwise false.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeParameterCollection.IsFixedSize">
            <summary>Specifies whether the collection is a fixed size.</summary>
            <returns>true if the collection is a fixed size; otherwise false.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeParameterCollection.Count">
            <summary>
            Gets the number of <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> objects in the collection.
            </summary>
            <returns>The number of <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> objects in the collection.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeParameterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> at the specified index.
            </summary>
            <returns>The <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> at the specified index.</returns>
            <param name="index">The zero-based index of the parameter to retrieve. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index specified does not exist. </exception>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeParameterCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> with the specified name.
            </summary>
            <returns>The <see cref="T:System.Data.SqlServerCe.SqlCeParameter"></see> with the specified name.</returns>
            <param name="parameterName">The name of the parameter to retrieve. </param>
            <exception cref="T:System.IndexOutOfRangeException">The name specified does not exist. </exception>
        </member>
        <member name="T:System.Data.SqlServerCe.CommitMode">
            <remarks>When passed to the <see cref="M:System.Data.SqlServerCe.SqlCeTransaction.Commit"></see> function, the CommitMode specifies when the commit occurs. </remarks>
        </member>
        <member name="F:System.Data.SqlServerCe.CommitMode.Deferred">
            <summary>Changes are committed to disk after user-specified flush interval. The default flush interval is 10 seconds but can be modified within the <see cref="P:System.Data.SqlServerCe.SqlCeConnection.ConnectionString"></see>. </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.CommitMode.Immediate">
            <summary>Changes are committed immediately.</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeTransaction">
            <remarks>
            Represents an SQL transaction to be made at a data source. This class cannot be inherited.
            </remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeTransaction.Finalize">
            <summary>
            Finalizer for the SqlCeTransaction object.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeTransaction.ReleaseNativeInterfaces">
            <summary>
            Releases the native interfaces. Note that this API gets called even from the Finalize()
            and we should make sure that we don't run into AVs and DllNotFound Exceptions.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeTransaction.Dispose">
            <summary>
            Releases all <see cref="T:System.Data.SqlServerCe.SqlCeTransaction"></see> objects associated with the transaction.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeTransaction.Dispose(System.Boolean)">
            <summary>Releases the managed resources used by the <see cref="T:System.Data.SqlServerCe.SqlCeTransaction"></see> and optionally releases the unmanaged resources.</summary>
            <param name="disposing">true to release managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeTransaction.Commit">
            <summary>
            Commits the database transaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">The transaction has already been committed or rolled 
            back.-or- The connection is broken. </exception>
            <exception cref="T:System.Exception">An error occurred while trying to commit the transaction. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeTransaction.Commit(System.Data.SqlServerCe.CommitMode)">
            <summary>
            Commits the database transaction using the specified <see cref="T:System.Data.SqlServerCe.CommitMode"></see>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The transaction has already been committed or rolled 
            back.-or- The connection is broken. </exception>
            <exception cref="T:System.Exception">An error occurred while trying to commit the transaction. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeTransaction.Rollback">
            <summary>
            Rolls back a transaction from a pending state.
            </summary>
            <exception cref="T:System.InvalidOperationException">The transaction has already been committed or rolled 
            back.-or- The connection is broken. </exception>
            <exception cref="T:System.Exception">An error occurred while trying to commit the transaction. </exception>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeTransaction.DbConnection">
            <summary>Specifies the <see cref="T:System.Data.Common.DbConnection"></see> object associated with the transaction.</summary>
            <returns>The <see cref="T:System.Data.Common.DbConnection"></see> object associated with the transaction.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeTransaction.IsolationLevel">
            <summary>
            Specifies the <see cref="T:System.Data.IsolationLevel"></see> for this transaction.
            </summary>
            <returns>The <see cref="T:System.Data.IsolationLevel"></see> for this transaction. Microsoft SQL Server 2005 Compact Edition supports the ReadCommitted, Serializable, and ReadRepeatable isolation levels.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeTransaction.TrackingContext">
            <summary>
            Gets and sets the tracking context for this transaction.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeTransaction.CurrentTransactionBsn">
            <summary>
            Gets the begin sequence number for this transaction.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeTransaction.ITransact">
            -------------------------------------------------------------------
            <summary>
            ITransact interface pointer; This returns SE session used to run 
            commands enlisted in this transaction;
            </summary>
            
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeTransaction.IQPSession">
            -------------------------------------------------------------------
            <summary>
            IQPSession interface pointer; This returns QP session used to run 
            commands enlisted in this transaction;
            </summary>
            
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeType">
            <remarks>
            Represents the base class for all Microsoft SQL Server 2005 Compact Edition supported Data Types.
            </remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeType.ToString">
            <summary>
            Retrives the string representation of the Data Type 
            </summary>
            <returns>A <see cref="T:System.String"/> representation of the data type name.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeType.ValidateDataConversion(System.Data.SqlDbType,System.Data.SqlDbType)">
            -------------------------------------------------------------------
            <summary>
            Throws an ArgumentException if the specified type is not 
            convertible to the expected type.
            </summary>
            
            <param name="expectedType">Expected SqlDbType</param>
            <param name="actualType">Actual SqlDbType</param>
            
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeType.SqlDbType">
            <summary>
            Gets the SqlDbType of the present instance.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeType.SeType">
            <summary>
            Gets the SETYPE of the present instance.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeType.DataType">
            <summary>
            Gets the data type of the present instance.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeType.ClrType">
            <summary>
            Gets the CLR Type of the present instance.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeType.DbType">
            <summary>
            Gets the DB Type of the present instance.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeType.IsLongValue">
            <summary>
            Gets the LongValue-ness of the present instance.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeType.IsFixed">
            <summary>
            Gets the Fixed-ness of the present instance.
            </summary>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeUpdatableRecord">
            <remarks>
            Represents a row of updatable values from the data source. A <see cref="T:System.Data.SqlServerCe.SqlCeResultSet"></see> 
            object contains one or more UpdatableRecords.
            </remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetDefault(System.Int32)">
            <summary>Sets the default value for the specified field.</summary>
            <param name="ordinal">The field to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetValues(System.Object[])">
            <summary>Returns the values for all of the fields in a record.</summary>
            <param name="values">The array in which to store the returned values.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetValues(System.Object[])">
            <summary>Sets each of the fields in the record to the corresponding value in the passed-in array.</summary>
            <param name="values">The values to set, in the order in which the fields appear in the record.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetName(System.Int32)">
            <summary>Returns the name of the specified field.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetValue(System.Int32)">
            <summary>Returns the value of the specified record.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetDataTypeName(System.Int32)">
            <summary>Returns the datatype name for the specified field.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetFieldType(System.Int32)">
            <summary>Returns the CLR datatype for the specified field.</summary>
            <returns>The CLR datatype for the field.</returns>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetData(System.Int32)">
            <summary>Returns a <see cref="T:System.Data.SqlServerCe.SqlCeDataReader"></see> positioned on the current record.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetOrdinal(System.String)">
            <summary>Returns the ordinal for the field specified in the passed-in name.</summary>
            <param name="name">The name of the field from which to determine the ordinal.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.IsSetAsDefault(System.Int32)">
            <summary>Determines if the specified field is marked to use the underlying default value.</summary>
            <returns>True if the field is marked to use the default value; otherwise, false.</returns>
            <param name="ordinal">The field to check.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.IsDBNull(System.Int32)">
            <summary>Determines if the specified field is NULL.</summary>
            <returns>True if the field is NULL; otherwise, false.</returns>
            <param name="ordinal">The field to check.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetBoolean(System.Int32)">
            <summary>
            Returns the value of the specified field as bool.
            </summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetByte(System.Int32)">
            <summary>
            Returns the value of the specified field as byte.
            </summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies a length of bytes into the buffer, starting at a specified position in the specified field. 
            </summary>
            <param name="ordinal">The ordinal position of the column from which to retrieve data.  </param>
            <param name="buffer">The buffer into which to copy the data.</param>
            <param name="dataIndex">The offset (in bytes) within the field from which to start copying data.</param>
            <param name="bufferIndex">The offset within the buffer from which to start the copy.</param>
            <param name="length">The maximum number of bytes to copy.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>Copies a length of chars into the buffer, starting at a specified position in the specified field. </summary>
            <param name="ordinal">The ordinal position of the field from which to retrieve data.</param>
            <param name="buffer">The buffer into which to copy the data.</param>
            <param name="dataIndex">The offset (in chars) within the field from which to start copying.</param>
            <param name="bufferIndex">The offset within the buffer from which to start the copy.</param>
            <param name="length">The maximum number of bytes to copy.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetChar(System.Int32)">
            <summary>Returns the value of the specified field as char.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetGuid(System.Int32)">
            <summary>Returns the value of the specified field as a GUID.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetInt16(System.Int32)">
            <summary>Returns the value of the specified field as int16.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetInt32(System.Int32)">
            <summary>Returns the value of the specified field as int32.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetInt64(System.Int32)">
            <summary>Returns the value of the specified field as int64.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetFloat(System.Int32)">
            <summary>Returns the value of the specified field as float.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetDouble(System.Int32)">
            <summary>Returns the value of the specified field as double.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetString(System.Int32)">
            <summary>Returns the value of the specified field as string.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetDecimal(System.Int32)">
            <summary>Returns the value of the specified field as decimal.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetDateTime(System.Int32)">
            <summary>Returns the value of the specified field as DateTime.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetSqlMetaData(System.Int32)">
            <summary>Returns the value of the specified field as SqlMetaData.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetSqlBoolean(System.Int32)">
            <summary>Returns the value of the specified field as SqlBoolean.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetSqlBinary(System.Int32)">
            <summary>Returns the value of the specified field as SqlBinary.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetSqlByte(System.Int32)">
            <summary>Returns the value of the specified field as SqlByte.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetSqlInt16(System.Int32)">
            <summary>Returns the value of the specified field as SqlInt16.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetSqlInt32(System.Int32)">
            <summary>Returns the value of the specified field as SqlInt32.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetSqlInt64(System.Int32)">
            <summary>Returns the value of the specified field as SqlInt64.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetSqlSingle(System.Int32)">
            <summary>Returns the value of the specified field as SqlSingle.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetSqlDouble(System.Int32)">
            <summary>Returns the value of the specified field as SqlDouble.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetSqlString(System.Int32)">
            <summary>Returns the value of the specified field as SqlString.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetSqlMoney(System.Int32)">
            <summary>Returns the value of the specified field as SqlMoney.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetSqlDecimal(System.Int32)">
            <summary>Returns the value of the specified field as SqlDecimal.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetSqlDateTime(System.Int32)">
            <summary>Returns the value of the specified field as SqlDateTime.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetSqlGuid(System.Int32)">
            <summary>Returns the value of the specified field as SqlGuid.</summary>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetSqlCharsRef(System.Int32)">
            <summary>Returns a reference to the SqlChars instance that contains the value of the specified field.</summary>
            <returns>A reference to a SqlChars instance.</returns>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.GetSqlBytesRef(System.Int32)">
            <summary>Returns a reference to the SqlBytes instance that contains the value of the specified field.</summary>
            <returns>A reference to a SqlBytes instance.</returns>
            <param name="ordinal">The field from which to retrieve a value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetObjectRef(System.Int32,System.Object)">
            <summary>Sets the value of the specified field by reference rather than by-value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetValue(System.Int32,System.Object)">
            <summary>Sets the column at the specified index to the passed-in value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetBoolean(System.Int32,System.Boolean)">
            <summary>Sets the column at the specified index to the passed-in bool value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetByte(System.Int32,System.Byte)">
            <summary>Sets the column at the specified index to the passed-in byte value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>Copies a length of bytes from the specified buffer to the specified column, starting at the specified location within that field.</summary>
            <param name="ordinal">The ordinal position of the column to set.</param>
            <param name="buffer">The buffer that contains the data to copy.</param>
            <param name="dataIndex">The location within the column to which to begin copying the data.</param>
            <param name="bufferIndex">The offset within the buffer from which to copy the data.</param>
            <param name="length">The maximum number of bytes to copy.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetChar(System.Int32,System.Char)">
            <summary>Sets the column at the specified index to the passed-in char value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>Copies a length of chars from the specified buffer to the specified field, starting at the specified location within that field.</summary>
            <param name="ordinal">The ordinal position of the column to set.</param>
            <param name="buffer">The buffer that contains the data to copy.</param>
            <param name="dataIndex">The location within the column to which to begin copying the data.</param>
            <param name="bufferIndex">The offset within the buffer from which to copy the data.</param>
            <param name="length">The maximum number of bytes to copy.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetGuid(System.Int32,System.Guid)">
            <summary>Sets the column at the specified index to the passed-in GUID value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetInt16(System.Int32,System.Int16)">
            <summary>Sets the column at the specified index to the passed-in int16 value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetInt32(System.Int32,System.Int32)">
            <summary>Sets the column at the specified index to the passed-in int32 value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetInt64(System.Int32,System.Int64)">
            <summary>Sets the column at the specified index to the passed-in int64 value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetFloat(System.Int32,System.Single)">
            <summary>Sets the column at the specified index to the passed-in float value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetDouble(System.Int32,System.Double)">
            <summary>Sets the column at the specified index to the passed-in double value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetString(System.Int32,System.String)">
            <summary>Sets the column at the specified index to the passed-in string value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetDecimal(System.Int32,System.Decimal)">
            <summary>Sets the column at the specified index to the passed-in decimal value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetDateTime(System.Int32,System.DateTime)">
            <summary>Sets the column at the specified index to the passed-in DateTime value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetSqlBoolean(System.Int32,System.Data.SqlTypes.SqlBoolean)">
            <summary>Sets the column at the specified index to the passed-in SqlBool value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetSqlBinary(System.Int32,System.Data.SqlTypes.SqlBinary)">
            <summary>Sets the column at the specified index to the passed-in SqlBinary value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetSqlByte(System.Int32,System.Data.SqlTypes.SqlByte)">
            <summary>Sets the column at the specified index to the passed-in SqlByte value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetSqlInt16(System.Int32,System.Data.SqlTypes.SqlInt16)">
            <summary>Sets the column at the specified index to the passed-in SqlInt16 value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetSqlInt32(System.Int32,System.Data.SqlTypes.SqlInt32)">
            <summary>Sets the column at the specified index to the passed-in SqlInt32 value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetSqlInt64(System.Int32,System.Data.SqlTypes.SqlInt64)">
            <summary>Sets the column at the specified index to the passed-in SqlInt64 value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetSqlSingle(System.Int32,System.Data.SqlTypes.SqlSingle)">
            <summary>Sets the column at the specified index to the passed-in SqlSingle value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetSqlDouble(System.Int32,System.Data.SqlTypes.SqlDouble)">
            <summary>Sets the column at the specified index to the passed-in SqlDouble value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetSqlString(System.Int32,System.Data.SqlTypes.SqlString)">
            <summary>Sets the column at the specified index to the passed-in SqlString value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetSqlMoney(System.Int32,System.Data.SqlTypes.SqlMoney)">
            <summary>Sets the column at the specified index to the passed-in SqlMoney value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetSqlDecimal(System.Int32,System.Data.SqlTypes.SqlDecimal)">
            <summary>Sets the column at the specified index to the passed-in SqlDecimal value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetSqlDateTime(System.Int32,System.Data.SqlTypes.SqlDateTime)">
            <summary>Sets the column at the specified index to the passed-in SqlDateTime value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeUpdatableRecord.SetSqlGuid(System.Int32,System.Data.SqlTypes.SqlGuid)">
            <summary>Sets the column at the specified index to the passed-in SqlGuid value.</summary>
            <param name="ordinal">The field in which to set the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeUpdatableRecord.FieldCount">
            <summary>Returns the number of fields in the specified record.</summary>
            <returns>The number of fields in the record.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeUpdatableRecord.HiddenFieldCount">
            <summary>Returns the number of hidden fields in the record. In Microsoft SQL Server 2005 Compact Edition, this property always returns 0.</summary>
            <returns>Always returns a value of 0.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeUpdatableRecord.Updatable">
            <summary>Specifies whether the field is updatable.</summary>
            <returns>True if the field is updatable; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeUpdatableRecord.Item(System.Int32)">
            <summary>Serves as an indexer to a specific field within the record.</summary>
            <param name="ordinal">The ordinal of the field (column) within the record.</param>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeUpdatableRecord.Item(System.String)">
            <summary>Serves as an indexer to a specific field within the record.</summary>
            <param name="name">The name of the field (column) in the record.</param>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeResultSet">
            <remarks>
             An updateable, scrollable, and bindable cursor.
            </remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.#ctor">
            <summary>Do not use. To create a <see cref="T:System.Data.SqlServerCe.SqlCeResultSet"></see>, you must call the 
            <see cref="M:System.Data.Sql.ISqlExecutionContext.ExecuteResultSet(System.Data.ResultSetOptions)"></see> method 
            of the <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see>.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.#ctor(System.Data.SqlServerCe.SqlCeConnection,System.Data.SqlServerCe.SqlCeCommand)">
            <summary>
            Internal constructor called only from withing SqlCeCommand.
            </summary>
            <param name="connection">Parent connection object</param>
            <param name="command">Parent command object</param>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetList">
            <summary>
            Returns an instance of <see cref="T:System.Data.SqlServerCe.ResultSetView"></see>.
            </summary>
               <returns>A <see cref="T:System.Data.SqlServerCe.ResultSetView"></see> object.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GotoRow(System.Int32)">
            <summary>
            Seeks to the specified HBOOKMARK
            </summary>
            <param name="hBookmark">ISECursor bookmark</param>
            <returns>true if we moved to a valid bookmark</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.InitializeMetaData">
            <summary>
            Lazy metadata initialization routine.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.InternalUpdate(System.Object)">
            <summary>
            Convenience method.
            </summary>
            <param name="sender">ListChangedEvent event sender</param>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.RemoveBookmarkFromCache(System.Int32)">
            <summary>
            Removes the specified bookmark from cache and sends RowDeleted
            events to all the views interested in this change;
            </summary>
            <param name="hBookmark">HBOOKMARK</param>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.InternalInsert(System.Boolean,System.Object,System.Data.SqlServerCe.SqlCeUpdatableRecord)">
            <summary>
            Convenience method.
            </summary>
            <param name="fMoveTo">true if we want the cursor to move to the newly inserted row</param>
            <param name="sender">ListChangedEvent event sender</param>
            <param name="record">Updatable record to insert</param>
            <returns>HBOOKMARK on the newly inserted row</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetValues(System.Data.SqlServerCe.SEPREPAREMODE,System.Data.SqlServerCe.SqlCeUpdatableRecord)">
            <summary>
            Copies user specified values to ISECursor
            </summary>
            <param name="mode">Prepare mode</param>
            <param name="record">Record instance</param>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.OnMove">
            <summary>
            Need to reset column status when the move occurs
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetCurrentRecord">
            <summary>
            Returns the current record. This method of retrieving data is only
            used by the ResultSetEnumerator and ResultSetView; 
            </summary>
            <returns>SqlCeUpdatableRecord instance</returns>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.ValidateSet(System.String)">
            <summary>
            Called inside each SetXYZ method before the value is actually set.
            </summary>
            <param name="method">Caller's method name</param>
            
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.CreateRecord">
            <summary> 
            Creates a new row on the server and returns a <see cref="T:System.Data.SqlServerCe.SqlCeUpdatableRecord"></see> object.
            </summary>
               <returns>A SqlCeUpdatableRecord with the metadata of the <see cref="T:System.Data.SqlServerCe.SqlCeResultSet"></see> 
               pre-populated.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.Update">
            <summary>
            Sends changes from the current record to the underlying row on the server.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.Delete">
            <summary>
            Deletes the current record from the data source on the server.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.Insert(System.Data.SqlServerCe.SqlCeUpdatableRecord)">
            <summary>
            Inserts the specified <see cref="T:System.Data.SqlServerCe.SqlCeUpdatableRecord"></see> into the underlying rowset.
            </summary>
               <param name="record">The record to insert.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.Insert(System.Data.SqlServerCe.SqlCeUpdatableRecord,System.Data.SqlServerCe.DbInsertOptions)">
            <summary>
            Inserts the specified <see cref="T:System.Data.SqlServerCe.SqlCeUpdatableRecord"></see> into the underlying rowset 
            and specifies how the cursor is positioned.
            </summary>
               <param name="record">The record to insert.</param>
               <param name="options">The <see cref="T:System.Data.SqlServerCe.DbInsertOptions"></see> option to specify how the 
               cursor is positioned after the insert.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.ReadFirst">
            <summary>
            Positions the reader at the first record in the ResultSet.
            </summary>
               <returns>True if the operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.ReadLast">
            <summary>
            Positions the reader at the last record in the ResultSet.
            </summary>
               <returns>True if the operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.ReadPrevious">
            <summary>
            Positions the reader at the record pervious to the current record.
            </summary>
               <returns>True if the operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.ReadAbsolute(System.Int32)">
            <summary>
            Moves the reader to a specific record in the ResultSet.
            </summary>
               <returns>True if the operation succeeded; otherwise, false.</returns>
               <param name="position">The position to which to move the reader.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.ReadRelative(System.Int32)">
            <summary>
            Moves the reader the specified amount from the current position.
            </summary>
               <returns>True if the operation succeeded; otherwise, false.</returns>
               <param name="position">The number of positions to move the reader.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetDefault(System.Int32)">
            <summary>
            Sets the specified column to its default value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.IsSetAsDefault(System.Int32)">
            <summary>
            Determines if the field at the specified ordinal position is marked to use the underlying default value.
            </summary>
               <returns>True if the specified field is marked to use the underlying default value; otherwise, false.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve the value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetEnumerator">
            <summary>
            Returns a <see cref="T:System.Collections.IEnumerator"></see> that can be used to iterate through 
            the rows in the data reader.
            </summary>
               <returns>A <see cref="T:System.Collections.IEnumerator"></see>.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator"></see>.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetSqlMetaData(System.Int32)">
            <summary>
            Returns the metadata information associated with the specified column.
            </summary>
               <returns>The metadata of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.IsDBNull(System.Int32)">
            <summary>
            Determines if the field at the specified ordinal position is null.
            </summary>
               <returns>True if the specified field is null; otherwise, false.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve the value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetBoolean(System.Int32)">
            <summary>
            Returns the value of the column at the specified index as a Boolean value.
            </summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetDecimal(System.Int32)">
            <summary>
            Returns the value of the column at the specified index as a Double.
            </summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetByte(System.Int32)">
            <summary>
            Returns the value of the column at the specified index as a byte.
            </summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies a length of bytes into the buffer, starting at a specified position in the specified field. 
            </summary>
               <returns>The actual number of bytes copied to the buffer.</returns>
               <param name="ordinal">The ordinal position of the column from which retrieve data.  </param>
               <param name="buffer">The buffer into which to copy the data.</param>
               <param name="dataIndex">The offset (in bytes) within the field from which to start copying data.</param>
               <param name="bufferIndex">The offset within the buffer from which to start the copy.</param>
               <param name="length">The maximum number of bytes to copy.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies a length of chars into the buffer, starting at a specified position in the specified field. 
            </summary>
               <returns>The actual number of chars copied.</returns>
               <param name="ordinal">The ordinal position of the field from which to retrieve data.</param>
               <param name="buffer">The buffer into which to copy the data.</param>
               <param name="dataIndex">The offset (in chars) within the field from which to start copying.</param>
               <param name="bufferIndex">The offset within the buffer from which to start the copy.</param>
               <param name="length">The maximum number of bytes to copy.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetDateTime(System.Int32)">
            <summary>
            Returns the value of the column at the specified index as a DateTime.
            </summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetDouble(System.Int32)">
            <summary>Returns the value of the column at the specified index as a Double.</summary>
                <returns>The value of the column at the specified index.</returns>
                <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetFloat(System.Int32)">
            <summary>
            Returns the value of the column at the specified index as a Float.
            </summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetGuid(System.Int32)">
            <summary>
            Returns the value of the column at the specified index as a GUID.
            </summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetInt16(System.Int32)">
            <summary>
            Returns the value of the column at the specified index as an Int16.
            </summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetInt32(System.Int32)">
            <summary>Returns the value of the column at the specified index as an Int32.</summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetInt64(System.Int32)">
            <summary>
            Returns the value of the column at the specified index as an Int64.
            </summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetString(System.Int32)">
            <summary>
            Returns the value of the column at the specified index as type String.
            </summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetValue(System.Int32)">
            <summary>
            Returns the value of the specified field.
            </summary>
               <returns>The object that contains the value of the specified field.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve the value.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetValues(System.Object[])">
            <summary>
            Retrieves an array of all of the fields for the specified record.
            </summary>
               <returns>The number of instances in the array.</returns>
               <param name="values">The array of type Object in which to store the values as they are returned.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetObjectRef(System.Int32,System.Object)">
            <summary>
            Binds an object to the column at the specified position.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="buffer">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetValues(System.Object[])">
            <summary>
            Sets each of the fields in the specified record to the corresponding value in the specified array.
            </summary>
               <returns>The number of values copied from the array.</returns>
               <param name="values">The array that contains the values to set.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetValue(System.Int32,System.Object)">
            <summary>
            Sets the value of the specified column to the passed-in value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetBoolean(System.Int32,System.Boolean)">
            <summary>
            Sets the value of the specified column to the passed-in Boolean value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetByte(System.Int32,System.Byte)">
            <summary>
            Sets the value of the specified column to the passed-in Byte value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies a length of bytes from the specified buffer to the specified column, starting at the 
            specified location within that field.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="buffer">The buffer that contains the data to copy.</param>
               <param name="dataIndex">The location within the column to which to begin copying the data.</param>
               <param name="bufferIndex">The offset within the buffer from which to copy the data.</param>
               <param name="length">The maximum number of bytes to copy.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetChar(System.Int32,System.Char)">
            <summary>
            Sets the value of the specified column to the passed-in Char value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="c">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies a length of chars from the specified buffer to the specified column, starting at the specified location within that field.
            </summary>
            <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="buffer">The buffer that contains the data to copy.</param>
            <param name="dataIndex">The location within the column to which to begin copying the data.</param>
               <param name="bufferIndex">The offset within the buffer from which to copy the data.</param>
               <param name="length">The maximum number of bytes to copy.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetDouble(System.Int32,System.Double)">
            <summary>
            Sets the value of the specified column to the passed-in Double value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetDecimal(System.Int32,System.Decimal)">
            <summary>
            Sets the value of the specified column to the passed-in Decimal value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetDateTime(System.Int32,System.DateTime)">
            <summary>
            Sets the value of the specified column to the passed-in DateTime value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetGuid(System.Int32,System.Guid)">
            <summary>
            Sets the value of the specified column to the passed-in Guid value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetInt16(System.Int32,System.Int16)">
            <summary>
            Sets the value of the specified column to the passed-in Int16 value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetInt32(System.Int32,System.Int32)">
            <summary>
            Sets the value of the specified column to the passed-in Int32 value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetInt64(System.Int32,System.Int64)">
            <summary>
            Sets the value of the specified column to the passed-in Int64 value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetFloat(System.Int32,System.Single)">
            <summary>
            Sets the value of the specified column to the passed-in Float value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetString(System.Int32,System.String)">
            <summary>
            Sets the value of the specified column to the passed-in String value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetSqlBoolean(System.Int32)">
            <summary>
            Returns the value of the column at the specified index as type SqlBoolean.
            </summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetSqlMoney(System.Int32)">
            <summary>
            Returns the value of the column at the specified index as type SqlMoney.
            </summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetSqlDecimal(System.Int32)">
            <summary>
            Returns the value of the column at the specified index as type SqlDecimal.
            </summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetSqlByte(System.Int32)">
            <summary>
            Returns the value of the column at the specified index as type SqlByte.
            </summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetSqlBinary(System.Int32)">
            <summary>
            Returns the value of the column at the specified index as type SqlBinary.
            </summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetSqlDateTime(System.Int32)">
            <summary>
            Returns the value of the column at the specified index as type SqlDateTime.
            </summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetSqlDouble(System.Int32)">
            <summary>
            Returns the value of the column at the specified index as type SqlDouble.
            </summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetSqlSingle(System.Int32)">
            <summary>
            Returns the value of the column at the specified index as type SqlSingle.
            </summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetSqlGuid(System.Int32)">
            <summary>
            Returns the value of the column at the specified index as type SqlGuid.
            </summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetSqlInt16(System.Int32)">
            <summary>
            Returns the value of the column at the specified index as type SqlInt16.
            </summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetSqlInt32(System.Int32)">
            <summary>
            Returns the value of the column at the specified index as type SqlInt32.
            </summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetSqlInt64(System.Int32)">
            <summary>
            Returns the value of the column at the specified index as type SqlInt64.
            </summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.GetSqlString(System.Int32)">
            <summary>
            Returns the value of the column at the specified index as type SqlString.
            </summary>
               <returns>The value of the column at the specified index.</returns>
               <param name="ordinal">The ordinal position of the column from which to retrieve data.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetSqlBoolean(System.Int32,System.Data.SqlTypes.SqlBoolean)">
            <summary>Sets the value of the specified column to the passed-in SqlBoolean value.</summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetSqlBinary(System.Int32,System.Data.SqlTypes.SqlBinary)">
            <summary>
            Sets the value of the specified column to the passed-in SqlBinary value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetSqlByte(System.Int32,System.Data.SqlTypes.SqlByte)">
            <summary>
            Sets the value of the specified column to the passed-in SqlBoolean value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetSqlInt16(System.Int32,System.Data.SqlTypes.SqlInt16)">
            <summary>
            Sets the value of the specified column to the passed-in SqlInt16 value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetSqlInt32(System.Int32,System.Data.SqlTypes.SqlInt32)">
            <summary>
            Sets the value of the specified column to the passed-in SqlInt32 value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetSqlInt64(System.Int32,System.Data.SqlTypes.SqlInt64)">
            <summary>
            Sets the value of the specified column to the passed-in SqlInt64 value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetSqlSingle(System.Int32,System.Data.SqlTypes.SqlSingle)">
            <summary>
            Sets the value of the specified column to the passed-in SqlSingle value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetSqlDouble(System.Int32,System.Data.SqlTypes.SqlDouble)">
            <summary>
            Sets the value of the specified column to the passed-in SqlDouble value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetSqlString(System.Int32,System.Data.SqlTypes.SqlString)">
            <summary>
            Sets the value of the specified column to the passed-in SqlString value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetSqlMoney(System.Int32,System.Data.SqlTypes.SqlMoney)">
            <summary>
            Sets the value of the specified column to the passed-in SqlMoney value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetSqlDecimal(System.Int32,System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Sets the value of the specified column to the passed-in SqlDecimal value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetSqlDateTime(System.Int32,System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Sets the value of the specified column to the passed-in SqlDateTime value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeResultSet.SetSqlGuid(System.Int32,System.Data.SqlTypes.SqlGuid)">
            <summary>
            Sets the value of the specified column to the passed-in SqlGuid value.
            </summary>
               <param name="ordinal">The ordinal position of the column to set.</param>
               <param name="value">The value to assign to the specified column.</param>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeResultSet.Item(System.Int32)">
            <summary>
            Serves as an indexer for the <see cref="T:System.Data.SqlServerCe.SqlCeResultSet"></see>.
            </summary>
               <returns>The record at the specified index.</returns>
               <param name="index">The position of the item in the ResultSet.</param>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeResultSet.Item(System.String)">
            <summary>
            Serves as an indexer for the <see cref="T:System.Data.SqlServerCe.SqlCeResultSet"></see>.
            </summary>
               <returns>The record that matches the specified name.</returns>
               <param name="name">The name of the record in the ResultSet.</param>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeResultSet.Updatable">
            <summary>
            Determines whether values within the <see cref="T:System.Data.SqlServerCe.SqlCeResultSet"></see> can be modified.
            </summary>
               <returns>True if the values in the record can be modified; otherwise, false;</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeResultSet.Scrollable">
            <summary>
            Determines whether the <see cref="T:System.Data.SqlServerCe.SqlCeResultSet"></see> is scrollable.
            </summary>
               <returns>True if the <see cref="T:System.Data.SqlServerCe.SqlCeResultSet"></see> is scrollable; otherwise, false.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeResultSet.Sensitivity">
            <summary>
            Determines the sensitivity of the <see cref="T:System.Data.SqlServerCe.SqlCeResultSet"></see>.
            </summary>
               <returns>The <see cref="T:System.Data.SqlServerCe.ResultSetSensitivity"></see> for the 
               <see cref="T:System.Data.SqlServerCe.SqlCeResultSet"></see>.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeResultSet.BookmarkArray">
            <summary>
            Returns an array containing all the bookmarks in this resultset;
            This is only used for positional access;
            </summary>
            
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeResultSet.ContainsListCollection">
            <summary>
            Determines if the object contains ListCollection or not.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeResultSet.ResultSetView">
            <summary>
            Used when data binding a <see cref="T:System.Data.SqlServerCe.SqlCeResultSet"></see> to a control.
            </summary>
               <returns>A <see cref="T:System.Data.SqlServerCe.ResultSetView"></see>.</returns>
        </member>
        <member name="T:System.Data.SqlServerCe.RdaTrackOption">
            <remarks>Specifies whether or not the table being pulled to the device is tracked.</remarks>
        </member>
        <member name="F:System.Data.SqlServerCe.RdaTrackOption.TrackingOff">
            <summary>Indicates that SQL Server Compact Edition does not track changes to the pulled table. No PRIMARY KEY constraints are created locally.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.RdaTrackOption.TrackingOn">
            <summary>Indicates that SQL Server Compact Edition tracks all changes to the pulled table. PRIMARY KEY constraints related to the value specified for sqlSelectString are created on the local table. This is the default setting. </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.RdaTrackOption.TrackingOnWithIndexes">
            <summary>Indicates that SQL Server Compact Edition tracks all changes to the pulled table. Indexes and PRIMARY KEY constraints that existed on the SQL Server table specified in sqlSelectString are created on the local table.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.RdaTrackOption.TrackingOffWithIndexes">
            <summary>Indicates that SQL Server Compact Edition does not track changes to the pulled table. Indexes and PRIMARY KEY constraints that existed on the SQL Server table specified in sqlSelectString are created on the local table.</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.RdaBatchOption">
            <remarks>Specifies whether or not the rows associated with the <see cref="M:System.Data.SqlServerCe.SqlCeRemoteDataAccess.Push(System.String,System.String)"></see> should be batched together in a single transaction.</remarks>
        </member>
        <member name="F:System.Data.SqlServerCe.RdaBatchOption.BatchingOff">
            <summary>Indicates that SQL Server Compact Edition does not batch rows pushed to SQL Server. The server processes each row separately. This is the default setting. </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.RdaBatchOption.BatchingOn">
            <summary>Indicates that SQL Server Compact Edition batches the rows pushed to SQL Server into a single transaction.</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeRemoteDataAccess">
            <remarks>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeRemoteDataAccess"></see> object. 
            For more information about Remote Data Access, see the  Books Online.
            </remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeRemoteDataAccess.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeRemoteDataAccess"></see> object.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeRemoteDataAccess.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeRemoteDataAccess"></see> object 
            and configures it for anonymous access to Microsoft Internet Information Services (IIS).
            </summary>
            <param name="localConnectionString">The OLE DB connection string for the  database. </param>
            <param name="internetUrl">The URL used to connect to the  Server Agent. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeRemoteDataAccess.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeRemoteDataAccess"></see> object 
            and configures it for a Basic or Integrated Windows authentication to Microsoft Internet Information Services (IIS).
            </summary>
            <param name="internetLogin">The login name used when connecting to the  Server Agent. </param>
            <param name="internetPassword">The password used when connecting to the  Server Agent. </param>
            <param name="localConnectionString">The OLE DB connection string for the  database. </param>
            <param name="internetUrl">The URL used to connect to the  Server Agent. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeRemoteDataAccess.Dispose">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeRemoteDataAccess.Finalize">
            <summary>
            Finalizer for the SqlceRemoteDataAccess object.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeRemoteDataAccess.Pull(System.String,System.String,System.String)">
            <summary>
            Downloads data from a remote Microsoft SQL Server database and stores that data in a single 
            table in a local Microsoft  database.
            </summary>
            <param name="localTableName">The name of the  table that will receive the extracted SQL Server 
            records. An error occurs if the table already exists. </param>
            <param name="sqlSelectString">Any valid Transact-SQL statement—including SELECT statements and 
            stored procedures—that specifies which table, columns, and records to extract from the 
            SQL Server database for storing in the  database. </param>
            <param name="oleDBConnectionString">The OLE DB connection string used when connecting to the SQL Server database. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeRemoteDataAccess.Pull(System.String,System.String,System.String,System.Data.SqlServerCe.RdaTrackOption)">
            <summary>
            Downloads data from a remote Microsoft SQL Server database and stores that data in a single 
            table in a local Microsoft SQL Server Compact Edition database.
            </summary>
            <param name="localTableName">The name of the  table that will receive the extracted SQL Server records. 
            An error occurs if the table already exists. </param>
            <param name="sqlSelectString">Any valid Transact-SQL statement—including SELECT statements and stored 
            procedures that specifies which table, columns, and records to extract from the SQL Server database 
            for storing in the  database. </param>
            <param name="trackOption">The option indicating whether  tracks changes made to the pulled table, and whether 
            the indexes that exist on the table being pulled are brought down to the device with the PRIMARY KEY constraints. </param>
            <param name="oleDBConnectionString">The OLE DB connection string used when connecting to the SQL Server database. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeRemoteDataAccess.Pull(System.String,System.String,System.String,System.Data.SqlServerCe.RdaTrackOption,System.String)">
            <summary>
            Downloads data from a remote Microsoft SQL Server database and stores that data in a single 
            table in a local Microsoft SQL Server Compact Edition database.</summary>
            <param name="localTableName">The name of the  table that will receive the extracted SQL Server 
            records. An error occurs if the table already exists. </param>
            <param name="sqlSelectString">Any valid Transact-SQL statement—including SELECT statements and 
            stored proceduresthat specifies which table, columns, and records to extract from the SQL Server 
            database for storing in the  database. </param>
            <param name="errorTable">The name of the local error table that is created if an error occurs when the 
            System.Data.SqlServerCe.SqlCeRemoteDataAccess.Push method is later called 
            to send changes back to SQL Server. This option can be specified only when the RdaTrackOption value is 
            <see cref="F:System.Data.SqlServerCe.RdaTrackOption.TrackingOn"></see> or 
            <see cref="F:System.Data.SqlServerCe.RdaTrackOption.TrackingOnWithIndexes"></see>. </param>
            <param name="trackOption">The option indicating whether  tracks changes made to the pulled table, and 
            whether the indexes that exist on the table being pulled are brought down to the device with the PRIMARY KEY constraints. </param>
            <param name="oleDBConnectionString">The OLE DB connection string used when connecting to the SQL Server database. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeRemoteDataAccess.Push(System.String,System.String)">
            <summary>Transmits changes from a pulled tracked table in  back to the originating SQL Server table. 
            These changes are individually applied to the server in separate transactions.
            </summary>
            <param name="localTableName">The name of the  table that will receive the extracted SQL Server records. 
            An error occurs if the table already exists. </param>
            <param name="oleDBConnectionString">The OLE DB connection string used when connecting to the SQL Server database. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeRemoteDataAccess.Push(System.String,System.String,System.Data.SqlServerCe.RdaBatchOption)">
            <summary>
            Transmits changes from a pulled tracked table in  back to the SQL Server table. 
            These changes can be either individually applied to the server or batched together in a single transaction.
            </summary>
            <param name="localTableName">The name of the  table that will receive the extracted SQL Server records. 
            An error occurs if the table already exists. </param>
            <param name="batchOption">The option indicates whether the changes being sent back to the SQL Server table 
            should be batched together in a single transaction or individually applied. </param>
            <param name="oleDBConnectionString">The OLE DB connection string used when connecting to the SQL Server database. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeRemoteDataAccess.SubmitSql(System.String,System.String)">
            <summary
            >Submits SQL statements for execution on a database in Microsoft SQL Server on a remote server.
            </summary>
            <param name="oleDBConnectionString">The OLE DB connection string for the remote SQL Server database. </param>
            <param name="sqlString">Any SQL statement that does not return rows. </param>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeRemoteDataAccess.LocalConnectionString">
            <summary>
            Specifies the connection string for the  database.
            </summary>
            <returns>The connection string for the  database.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeRemoteDataAccess.InternetUrl">
            <summary>
            Specifies the URL used to connect to the  Server Agent. The  Server Agent is the 
            Microsoft Internet Information Services (IIS) ISAPI DLL that connects the  client 
            to the Microsoft SQL Server Database. This property must be specified.
            </summary>
            <returns>The string containing the URL of the  Server Agent (including its file name, Sqlcesa30.dll).</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeRemoteDataAccess.InternetLogin">
            <summary>
            Specifies the Microsoft Internet Information Services (IIS) login name used when connecting to the  Server Agent.
            </summary>
            <returns>The IIS login name used when connecting to the  Server Agent. The default is no login.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeRemoteDataAccess.InternetPassword">
            <summary>
            Specifies the Microsoft Internet Information Services (IIS) password used when connecting to the  Server Agent.
            </summary>
            <returns>The IIS password string used when connecting to the  Server Agent. The default is no password.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeRemoteDataAccess.ConnectionManager">
            <summary>
            Enables the SqlCeRemoteDataAccess object to use the smart device's Connection Manager API to establish 
            a network connection. The connection is released at the end of synchronization. 
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeRemoteDataAccess.InternetProxyServer">
            <summary>
            Specifies the proxy server to use when accessing the HTTP resource specified in the 
            <see cref="P:System.Data.SqlServerCe.SqlCeRemoteDataAccess.InternetUrl"></see> property.
            </summary>
            <returns>The proxy server name (or IP address) and the port number (ProxyServerName:Port) 
            used when accessing the specified HTTP resource.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeRemoteDataAccess.InternetProxyLogin">
            <summary>
            Specifies the login name used when connecting to a proxy server (defined in the 
            <see cref="P:System.Data.SqlServerCe.SqlCeRemoteDataAccess.InternetProxyServer"></see> property) 
            that requires authentication.
            </summary>
            <returns>The proxy server login name. The default is no login.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeRemoteDataAccess.InternetProxyPassword">
            <summary>
            Specifies the password used when connecting to a proxy server (defined in the 
            <see cref="P:System.Data.SqlServerCe.SqlCeRemoteDataAccess.InternetProxyServer"></see> property) 
            that requires authentication.
            </summary>
            <returns>The proxy server password string. The default is no password.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeRemoteDataAccess.ConnectTimeout">
            <summary>
            Gets or sets the amount of time, in milliseconds, that the 
            <see cref="T:System.Data.SqlServerCe.SqlCeRemoteDataAccess"></see> object waits for a connection to the server.
            </summary>
            <returns>An <see cref="T:System.Int32"></see> value that represents the time-out, in milliseconds, with no default.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeRemoteDataAccess.SendTimeout">
            <summary>
            Gets or sets the amount of time, in milliseconds, that the 
            <see cref="T:System.Data.SqlServerCe.SqlCeRemoteDataAccess"></see> 
            object waits to send a request to the server.
            </summary>
            <returns>An <see cref="T:System.Int32"></see> value that represents the time-out, 
            in milliseconds, with no default.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeRemoteDataAccess.ReceiveTimeout">
            <summary>
            Gets or sets the amount of time, in milliseconds, that the 
            <see cref="T:System.Data.SqlServerCe.SqlCeRemoteDataAccess"></see> 
            object waits for the response to a server request.
            </summary>
            <returns>An <see cref="T:System:Int32"></see> value that represents the time-out, 
            in milliseconds, with a default of 60 seconds.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeRemoteDataAccess.ConnectionRetryTimeout">
            <summary>
            Specifies how long (in seconds) the  client will continue to retry sending failed requests.
            </summary>
            <returns>The <see cref="P:System.Data.SqlServerCe.SqlCeRemoteDataAccess.ConnectionRetryTimeout"></see> value, 
            with a default value of 120 seconds.</returns>
            <value>The time, in seconds, during which the  client will continue to retry an established 
            connection that has failed. Valid values are 0 to 900 seconds, inclusive. The default value is 120 seconds.</value>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeRemoteDataAccess.CompressionLevel">
            <summary>
            Specifies the amount of compression that will be used by the compression routines during Push and Pull operations.
            </summary>
            <returns>The compression level that has been set.</returns>
            <value>The compression level to use. Valid values are 0 to 6 (inclusive), 
            with a setting of 0 representing no compression and a setting of 6 enabling maximum compression.</value>
        </member>
        <member name="T:System.Data.SqlServerCe.AddOption">
            <remarks>Determines whether the subscription will be added to an existing database or whether a new database will be created when the subscription is added.</remarks>
        </member>
        <member name="F:System.Data.SqlServerCe.AddOption.ExistingDatabase">
            <summary>Adds the subscription to the existing database that defined in the connection string.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.AddOption.CreateDatabase">
            <summary>Causes a new Microsoft SQL Server 2005 Compact Edition database to be created when the subscription is created.</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.DropOption">
            <remarks>Specifies whether to leave or delete the Microsoft SQL Server 2005 Compact Edition database when dropping a subscription using the <see cref="M:System.Data.SqlServerCe.SqlCeReplication.DropSubscription(System.Data.SqlServerCe.DropOption)"></see> method.</remarks>
        </member>
        <member name="F:System.Data.SqlServerCe.DropOption.LeaveDatabase">
            <summary>Deletes the replication system tables, all replication system columns in the user tables, and constraints when dropping a subscription using the <see cref="M:System.Data.SqlServerCe.SqlCeReplication.DropSubscription(System.Data.SqlServerCe.DropOption)"></see> method, but does not delete the SQL Server Compact Edition database.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.DropOption.DropDatabase">
            <summary>Deletes the SQL Server Compact Edition database when dropping a subscription using the <see cref="M:System.Data.SqlServerCe.SqlCeReplication.DropSubscription(System.Data.SqlServerCe.DropOption)"></see> method.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.DropOption.UnregisterSubscription">
            <summary>Deletes the replication system tables and all replication system columns (but not constraints) in the user tables when dropping a subscription using the <see cref="M:System.Data.SqlServerCe.SqlCeReplication.DropSubscription(System.Data.SqlServerCe.DropOption)"></see> method, but does not delete the SQL Server Compact Edition database.</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.NetworkType">
            <remarks>Specifies the network protocol to use when setting the <see cref="P:System.Data.SqlServerCe.SqlCeReplication.DistributorNetwork"></see> or <see cref="P:System.Data.SqlServerCe.SqlCeReplication.PublisherNetwork"></see> properties of the <see cref="T:System.Data.SqlServerCe.SqlCeReplication"></see> object.</remarks>
        </member>
        <member name="F:System.Data.SqlServerCe.NetworkType.DefaultNetwork">
            <summary>Use the currently-configured Net-Library when setting the <see cref="P:System.Data.SqlServerCe.SqlCeReplication.DistributorNetwork"></see> or <see cref="P:System.Data.SqlServerCe.SqlCeReplication.PublisherNetwork"></see> properties of the <see cref="T:System.Data.SqlServerCe.SqlCeReplication"></see> object.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.NetworkType.TcpIpSockets">
            <summary>Use the TCP/IP Sockets Net-Library when setting the <see cref="P:System.Data.SqlServerCe.SqlCeReplication.DistributorNetwork"></see> or <see cref="P:System.Data.SqlServerCe.SqlCeReplication.PublisherNetwork"></see> properties of the <see cref="T:System.Data.SqlServerCe.SqlCeReplication"></see> object.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.NetworkType.MultiProtocol">
            <summary>Use the Multiprotocol Net-Library when setting the <see cref="P:System.Data.SqlServerCe.SqlCeReplication.DistributorNetwork"></see> or <see cref="P:System.Data.SqlServerCe.SqlCeReplication.PublisherNetwork"></see> properties of the <see cref="T:System.Data.SqlServerCe.SqlCeReplication"></see> object.</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.SecurityType">
            <remarks>Specifies the mode of security to use when connecting to the Publisher or Distributor during Replication. </remarks>
        </member>
        <member name="F:System.Data.SqlServerCe.SecurityType.DBAuthentication">
            <summary>Use SQL Server Authentication when connecting to the Publisher or Distributor during Replication. This is the default.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SecurityType.NTAuthentication">
            <summary>Use Integrated Windows Authentication when connecting to the Publisher or Distributor during Replication.</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.ExchangeType">
            <remarks>Specifies whether data is merged up to the Publisher only, or merge in both directions between the Publisher and the Subscriber.</remarks>
        </member>
        <member name="F:System.Data.SqlServerCe.ExchangeType.None">
            <summary>No specific exchange type</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.ExchangeType.Upload">
            <summary>Merges only the Subscriber changes with the Publisher.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.ExchangeType.BiDirectional">
            <summary>Merges all changes between the Publisher and Subscriber. This is the default setting.</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.ValidateType">
            <remarks>Specifies the type of data validation to perform.</remarks>
        </member>
        <member name="F:System.Data.SqlServerCe.ValidateType.NoValidation">
            <summary>Specifies that validation will not be performed. This is the default setting.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.ValidateType.RowCountOnly">
            <summary>Specifies that a row count comparison will be performed on the published data.</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.SnapshotTransferType">
            <remarks>Controls how snapshot files are transferred from the Distributor to the computer running IIS.</remarks>
        </member>
        <member name="F:System.Data.SqlServerCe.SnapshotTransferType.UNC">
            <summary>The snapshot file will be transferred from the Universal Naming Convention (UNC) share on the server. This is the default.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.SnapshotTransferType.FTP">
            <summary>The snapshot file will be transferred via the FTP protocol.</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.OnStartTableUpload">
            <summary>A user-defined delegate to the event that fires at the start of uploading table changes to the server.</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.OnStartTableDownload">
            <summary>A user-defined delegate to the event that fires at the start of downloading table changes from the server.</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.OnSynchronization">
            <summary>A user-defined delegate that consumes the ongoing synchronization events reported during the reconciler work.</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeReplication">
            <remarks>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeReplication"></see> 
            object. For more information about SQL Server replication, see the SQL Server 2005 Books Online. 
            For more information about merge replication with SQL Server Compact Edition, see the 
            SQL Server Compact Edition Books Online.
            </remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeReplication.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeReplication"></see> object. 
            This is the default constructor.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeReplication.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeReplication"></see> 
            object and sets the properties for connecting to a publication.
            </summary>
               <param name="internetLogin">The login name used when connecting to the SQL Server Compact Edition Server Agent. </param>
               <param name="publication">The publication name that has been enabled for anonymous merge subscriptions. </param>
               <param name="internetPassword">The password used when connecting to the SQL Server Compact Edition Server Agent. </param>
               <param name="publisherLogin">The login name used when connecting to the Publisher. </param>
               <param name="subscriberConnectionString">The OLE DB connection string for the SQL Server Compact Edition database on the based device. </param>
               <param name="internetUrl">The URL used to connect to the SQL Server Compact Edition Server Agent. </param>
               <param name="publisher">The name of the Publisher. </param>
               <param name="publisherPassword">The login password used when connecting to the Publisher. </param>
               <param name="publisherDatabase">The name of the publication database. </param>
               <param name="subscriber">The name of the Subscriber. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeReplication.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeReplication"></see> 
            object and sets the required properties for connecting to a publication.
            </summary>
               <param name="internetLogin">The login name used when connecting to the SQL Server Compact Edition Server Agent. </param>
               <param name="publication">The publication name that has been enabled for anonymous merge subscriptions. </param>
               <param name="internetPassword">The password used when connecting to the SQL Server Compact Edition Server Agent. </param>
               <param name="subscriberConnectionString">The OLE DB connection string for the SQL Server Compact Edition database on the 
            based device. </param>
               <param name="internetUrl">The URL used to connect to the SQL Server Compact Edition Server Agent. </param>
               <param name="publisher">The name of the Publisher. </param>
               <param name="publisherDatabase">The name of the publication database. </param>
               <param name="subscriber">The name of the Subscriber. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeReplication.Dispose">
            <summary>
            Releases all native resources.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeReplication.Finalize">
            <summary>
            Finalizer for the SqlCeReplication object.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeReplication.AddSubscription(System.Data.SqlServerCe.AddOption)">
            <summary>
            Creates a new anonymous subscription to an existing Microsoft SQL Server publication. 
            After calling the <see cref="M:System.Data.SqlServerCe.SqlCeReplication.AddSubscription(System.Data.SqlServerCe.AddOption)"></see> 
            method, the application must call the <see cref="M:System.Data.SqlServerCe.SqlCeReplication.Synchronize"></see> 
            method to synchronize the new subscription to the publication based on the latest snapshot.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeReplication.DropSubscription(System.Data.SqlServerCe.DropOption)">
            <summary>
            Drops the subscription to a SQL Server publication and optionally deletes the SQL Server Compact Edition 
            database from the -based device.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeReplication.ReinitializeSubscription(System.Boolean)">
            <summary>
            Marks a subscription for reinitialization. After calling this method, an application must call the 
            <see cref="M:System.Data.SqlServerCe.SqlCeReplication.Synchronize"></see> method to download the 
            latest snapshot of the publication to the device.
            </summary>
               <param name="uploadBeforeReinitialize">If True, the changes in the subscription database are uploaded 
               to the Publisher before the snapshot is applied at the Subscriber. The default is False. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeReplication.Synchronize">
            <summary>
            Invokes merge replication between the SQL Server Compact Edition subscription and the SQL Server Publisher.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeReplication.BeginSynchronize(System.AsyncCallback,System.Object)">
            <summary>
            Starts an asynchronous data synchronization operation. When synchronization ends, the 
            <see cref="T:System.AsyncCallback"></see> delegates are called. 
            During synchronization, no status reporting is performed.
            </summary>
               <returns>The <see cref="T:System.IAsyncResult"></see> interface for the asynchronous operation 
               that has been started by calling this function. You can use this interface for testing for completion, 
               or waiting until synchronization ends.</returns>
               <param name="state">A user-defined object that is returned by the <see cref="P:System.IAsyncResult.AsyncState"></see> property.</param>
               <param name="onSyncCompletion">The <see cref="T:System.IAsyncResult"></see> delegates that are implemented by the caller 
               and called at the end of synchronization.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeReplication.BeginSynchronize(System.AsyncCallback,System.Data.SqlServerCe.OnStartTableUpload,System.Data.SqlServerCe.OnStartTableDownload,System.Data.SqlServerCe.OnSynchronization,System.Object)">
            <summary>
            Starts an asynchronous data synchronization operation. When the synchronization ends, the 
            <see cref="T:System.AsyncCallback"></see> delegates are called. During the synchronization, 
            synchronization status reports are sent to the SyncStatusReport delegates.
            </summary>
               <returns>The <see cref="T:System.IAsyncResult"></see> interface for the asynchronous operation 
               that has been started by calling this function. You can use this interface for testing for completion, 
               or waiting until synchronization ends.</returns>
               <param name="onSynchronization">A user-defined delegate that consumes the ongoing synchronization events 
               that are reported during the reconciler work.</param>
               <param name="state">A user-defined object that is returned by the 
               <see cref="P:System.IAsyncResult.AsyncState"></see> property.</param>
               <param name="onStartTableUpload">A user-defined delegate to the event that fires at the start of uploading 
               table changes to the server.</param>
               <param name="onSyncCompletion">The <see cref="T:System.AsyncCallback"></see> delegate that is implemented 
               by the caller called at the end of synchronization.</param>
               <param name="onStartTableDownload">A user-defined delegate to the event that fires at the start of downloading 
               table changes from the server.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeReplication.EndSynchronize(System.IAsyncResult)">
            <summary>
            Ends an asynchronous data synchronization that was started by a call to the 
            System.Data.SqlServerCe.SqlCeReplication.BeginSynchronize method. 
            </summary>
               <param name="ar">The <see cref="T:System.IAsyncResult"></see> interface returned by the 
               System.Data.SqlServerCe.SqlCeReplication.BeginSynchronize method.</param>        
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeReplication.CancelSynchronize">
            <summary>
            Cancels an ongoing asynchronous data synchronization that was started by calling the 
            System.Data.SqlServerCe.SqlCeReplication.BeginSynchronize method. 
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeReplication.LoadProperties">
            <summary>
            Retrieves all values stored for the synchronization properties, and then populates the 
            <see cref="T:System.Data.SqlServerCe.SqlCeReplication"></see> class properties with these saved values.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeReplication.SaveProperties">
            <summary>
            Retrieves all of the values stored in the <see cref="T:System.Data.SqlServerCe.SqlCeReplication"></see> 
            class properties for the current subscription and stores them in a system table.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.PostSyncCleanup">
            <summary>
            Specifies whether the post sync cleanup should be done or not
            </summary>
            <returns>The value of post sync cleanup flag</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.Distributor">
            <summary>
            Specifies the SQL Server Distributor.
            </summary>
               <returns>The name of the Distributor used by the Publisher.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.DistributorNetwork">
            <summary>
            Specifies the network protocol used when the SQL Server Reconciler communicates with the Distributor.
            </summary>
               <returns>The <see cref="T:System.Data.SqlServerCe.NetworkType"></see> constant used by the 
               SQL Server Reconciler to communicate with the Distributor.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.DistributorAddress">
            <summary>
            Specifies the network address used when the SQL Server Reconciler is connecting to the Distributor.
            </summary>
               <returns>The network address used when connecting to the Distributor.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.DistributorSecurityMode">
            <summary>
            Specifies the security mode used when connecting to the Distributor.
            </summary>
               <returns>The <see cref="T:System.Data.SqlServerCe.SecurityType"></see> constant that 
               specifies the mode of security enforced at the Distributor.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.DistributorLogin">
            <summary>
            Specifies the login name used when connecting to the Distributor.
            </summary>
               <returns>The login name used when connecting to the Distributor.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.DistributorPassword">
            <summary>
            Specifies the login password used when connecting to the Distributor.
            </summary>
               <returns>The password used when connecting to the Distributor.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.ExchangeType">
            <summary>
            Specifies whether the synchronization between the Publisher and the Subscriber is bi-directional or upload only.
            </summary>
               <returns>The <see cref="P:System.Data.SqlServerCe.SqlCeReplication.ExchangeType"></see> constant that specifies 
               whether data merges up to the Publisher only, or in both directions between the Publisher and the Subscriber.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.HostName">
            <summary>
            Gets or sets the host name used for the device when connecting to the Publisher.
            </summary>
               <returns>The host name for the device. The default is no host name.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.InternetUrl">
            <summary>
            Specifies the URL used to connect to the SQL Server Compact Edition Server Agent.
            </summary>
               <returns>The URL string.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.InternetLogin">
            <summary>
            Specifies the login name used when connecting to the SQL Server Compact Edition Server Agent.
            </summary>
               <returns>The Internet Information Services (IIS) login name. The default is no login name.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.InternetPassword">
            <summary>
            Specifies the password used when connecting to the SQL Server Compact Edition Server Agent.
            </summary>
               <returns>The Internet Information Services (IIS) password string. The default is no password.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.InternetProxyServer">
            <summary>
            Specifies the proxy server to use when accessing the HTTP resource specified in the 
            <see cref="P:System.Data.SqlServerCe.SqlCeReplication.InternetUrl"></see> property.</summary>
               <returns>The proxy server name (or IP address) and optionally the port number, in the following format: ProxyServerName:Port</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.InternetProxyLogin">
            <summary>
            Specifies the login name used when connecting to an 
            <see cref="P:System.Data.SqlServerCe.SqlCeReplication.InternetProxyServer"></see> 
            that requires authentication.</summary>
               <returns>The proxy server login name. The default is no login name.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.InternetProxyPassword">
            <summary>
            Specifies the password used when connecting to an 
            <see cref="P:System.Data.SqlServerCe.SqlCeReplication.InternetProxyServer"></see> that requires authentication.
            </summary>
               <returns>The proxy server password string. The default is no password.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.LoginTimeout">
            <summary>
            Specifies the maximum number of seconds to wait for connections to be established. 
            This property affects the connection time between the computer running Internet Information Services (IIS) 
            and the Publisher or Distributor. It does not control the connection time between the smart device and IIS.</summary>
               <returns>The number of seconds for connections to be established. The default is 15 seconds.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.ProfileName">
            <summary>
            Specifies the name of the agent profile at the Distributor to be used by the 
            <see cref="T:System.Data.SqlServerCe.SqlCeReplication"></see> object.
            </summary>
               <returns>The agent profile name.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.Publisher">
            <summary>
            Specifies the name of the SQL Server Publisher. The Publisher is the computer that is running 
            SQL Server and that contains the publication.
            </summary>
               <returns>The name of the Publisher.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.PublisherNetwork">
            <summary>
            Specifies the network protocol used when the SQL Server Replication Provider communicates with the Publisher. 
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.PublisherAddress">
            <summary>
            Specifies the network address used when connecting to the Publisher.
            </summary>
               <returns>The network address used when connecting to the Publisher.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.PublisherSecurityMode">
            <summary>
            Specifies the security mode used when connecting to the Publisher.
            </summary>
               <returns>The <see cref="T:System.Data.SqlServerCe.SecurityType"></see> constant that specifies the security mode.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.PublisherLogin">
            <summary>
            Specifies the login name used when connecting to the Publisher.
            </summary>
               <returns>The Publisher login name.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.PublisherPassword">
            <summary>
            Specifies the login password used when connecting to the Publisher.
            </summary>
               <returns>The login password. The default is no password (empty string).</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.PublisherDatabase">
            <summary>
            Specifies the name of the publication database.
            </summary>
               <returns>The name of the publication database.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.Publication">
            <summary>
            Specifies the SQL Server publication name that has been enabled for SQL Server Compact Edition subscribers.
            </summary>
               <returns>The name of the Publication.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.PublisherChanges">
            <summary>
            Specifies the total number of Publisher changes applied at the Subscriber when the 
            <see cref="M:System.Data.SqlServerCe.SqlCeReplication.Synchronize"></see> method was last called.
            </summary>
               <returns>The total number of Publisher rows that were inserted, updated, and deleted.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.PublisherConflicts">
            <summary>
            Specifies the total number of conflicts that occurred at the Publisher when the 
            <see cref="M:System.Data.SqlServerCe.SqlCeReplication.Synchronize"></see> method was last called.
            </summary>
               <returns>The number of conflicts that occurred.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.QueryTimeout">
            <summary>
            Specifies the number of seconds allowed for internal queries to complete.
            </summary>
               <returns>The number of seconds allowed for internal queries to be returned. The default is 300 seconds.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.Subscriber">
            <summary>
            Specifies the name of the Subscriber.
            </summary>
               <returns>The Subscriber name.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.SubscriberConnectionString">
            <summary>
            Specifies the connection string to the SQL Server Compact Edition database.
            </summary>
               <returns>The connection string to the SQL Server Compact Edition database.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.SubscriberChanges">
            <summary>
            Specifies the total number of Subscriber changes applied at the Publisher when the 
            <see cref="M:System.Data.SqlServerCe.SqlCeReplication.Synchronize"></see> method was last called.
            </summary>
               <returns>The total number of Subscriber rows that were inserted, updated, and deleted.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.SubscriberConflicts">
            <summary>
            This property is not used by SQL Server Compact Edition.
            </summary>
               <value>Always 0 because all conflicts are detected and logged on the SQL Server Publisher.</value>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.Validate">
            <summary> 
            Specifies the type of data validation SQL Server Compact Edition replication performs while synchronizing.
            </summary>
               <returns>The <see cref="T:System.Data.SqlServerCe.ValidateType"></see> constant that specifies the type of 
               data validation to perform.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.ConnectTimeout">
            <summary>
            Gets or sets the amount of time, in milliseconds, that the 
            <see cref="T:System.Data.SqlServerCe.SqlCeReplication"></see> object waits for a connection to the server.
            </summary>
               <returns>An <see cref="T:System:Int32"></see> value that represents the time-out, in milliseconds, with no default.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.SendTimeout">
            <summary>
            Gets or sets the amount of time, in milliseconds, that the 
            <see cref="T:System.Data.SqlServerCe.SqlCeReplication"></see> object waits to send a request to the server.
            </summary>
               <returns>An <see cref="T:System.Int32"></see> value that represents the time-out, in milliseconds, with no default.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.ReceiveTimeout">
            <summary>
            Gets or sets the amount of time, in milliseconds, that the <see cref="T:System.Data.SqlServerCe.SqlCeReplication"></see> 
            object waits for the response to a server request.
            </summary>
               <returns>An <see cref="T:System:Int32"></see> value that represents the time-out, in milliseconds, with a default of 60 seconds.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.ConnectionRetryTimeout">
            <summary>
            Specifies how long (in seconds) the SQL Server Compact Edition client will continue to retry 
            sending requests after an established connection has failed.</summary>
               <returns>The <see cref="P:System.Data.SqlServerCe.SqlCeReplication.ConnectionRetryTimeout"></see> value, 
               with a default value of 120 seconds.</returns>
               <value>The time, in seconds, during which the SQL Server Compact Edition client will continue 
               to retry a failed synchronization. Valid values are 0 to 900 seconds, inclusive. The default value is 120 seconds.</value>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.CompressionLevel">
            <summary>
            Specifies the amount of compression that will be used by the compression routines during replication.
            </summary>
               <returns>The compression level.</returns>        
               <value>The compression level to use. Valid values are 0 to 6 (inclusive), with a setting 
               of 0 representing no compression and a setting of 6 enabling maximum compression. The default value is 1.</value>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.ConnectionManager">
            <summary>
            Enables the Replication object to use the smart device's Connection Manager API to establish 
            a network connection. The connection is released at the end of synchronization.
            </summary>
               <returns>True if the Connection Manager settings are used; otherwise, False.</returns>
               <value>Set to true to use the Connection Manager settings; otherwise, false. The default value is false.</value>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeReplication.SnapshotTransferType">
            <summary>
            Controls how snapshot files are transferred from the Distributor to the computer running IIS. 
            Snapshot files can be transferred using either the HTTP or the FTP protocol.
            </summary>
               <returns>The <see cref="P:System.Data.SqlServerCe.SqlCeReplication.SnapshotTransferType"></see> value.</returns>        
               <value>The <see cref="T:System.Data.SqlServerCe.SnapshotTransferType"></see> constant that specifies the type of data transfer to perform.</value>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeError">
            <remarks>
            Collects information relevant to a warning or error returned by the data source. This class cannot be inherited.
            </remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeError.ToString">
            <summary>
            Gets the complete text of the error message.
            </summary>
            <returns>The complete text of the error message.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeError.GetDefaultError(System.Int32)">
            <summary>
            Returns default error.  Used when there is no detailed information available.
            </summary>
            <returns>The SqlCeError populated with default error information</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeError.HResult">
            <summary>
            Returns an HRESULT value that identifies the type of error.
            </summary>
            <returns>The HR number that identifies the type of error.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeError.Message">
            <summary>
            Gets the text describing the error.
            </summary>
            <returns>The text describing the error.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeError.NativeError">
            <summary>
            Gets the native error number of the <see cref="T:System.Data.SqlServerCe.SqlCeError"></see>. 
            For more information about these errors, see "SQL Server Compact Edition Errors" in the 
            Troubleshooting section of SQL Server Compact Edition Books Online.
            </summary>
            <returns>The native error number of the <see cref="T:System.Data.SqlServerCe.SqlCeError"></see>.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeError.Source">
            <summary>
            Gets the name of the provider that generated the error.
            </summary>
            <returns>The name of the provider that generated the error. For example, 
            the <see cref="P:System.Data.SqlServerCe.SqlCeError.Source"></see> property may return a 
            string such as "OLE DB Provider for SQL Server Compact Edition."</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeError.NumericErrorParameters">
            <summary>
            Gets the first three error parameters. Error parameters are used by SQL Server Compact Edition 
            to provide additional details about an error.
            </summary>
            <returns>An integer array that contains the first three error parameters.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeError.ErrorParameters">
            <summary>
            Gets the last three error parameters. Error parameters are used by 
            Microsoft SQL Server 2005 Compact Edition to provide additional details about an error.
            </summary>
            <returns>A string array that contains the last three error parameters.</returns>
        </member>
        <member name="T:System.Data.SqlServerCe.DbRangeOptions">
            <remarks>Specifies the options used by the <see cref="M:System.Data.SqlServerCe.SqlCeCommand.SetRange(System.Data.SqlServerCe.DbRangeOptions,System.Object[],System.Object[])"></see> method when specifying the index range over which to seek.</remarks>
        </member>
        <member name="F:System.Data.SqlServerCe.DbRangeOptions.InclusiveStart">
            <summary>Includes the startData value in the range.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.DbRangeOptions.InclusiveEnd">
            <summary>Includes the endData value in the range.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.DbRangeOptions.ExclusiveStart">
            <summary>Excludes the startData value from the range.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.DbRangeOptions.ExclusiveEnd">
            <summary>Excludes the endData value from the range.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.DbRangeOptions.ExcludeNulls">
            <summary>Excludes null values from the range.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.DbRangeOptions.Prefix">
            <summary>Specifies a range in which index values begin with the value of startData. When using the Prefix option, endData must be set to null.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.DbRangeOptions.Match">
            <summary>Specifies a range in which index values match the value of startData. When using the Match option, endData must be set to null.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.DbRangeOptions.Default">
            <summary>Equivalent to setting both the <see cref="F:System.Data.SqlServerCe.DbRangeOptions.InclusiveStart"></see> and <see cref="F:System.Data.SqlServerCe.DbRangeOptions.InclusiveEnd"></see> flags.</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.DbSeekOptions">
            <remarks>Options that specify how the <see cref="M:System.Data.SqlServerCe.SqlCeDataReader.Seek(System.Data.SqlServerCe.DbSeekOptions,System.Object[])"></see> method will seek on an index.</remarks>
        </member>
        <member name="F:System.Data.SqlServerCe.DbSeekOptions.FirstEqual">
            <summary>Advances to the first matching row (in index order) on the index.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.DbSeekOptions.LastEqual">
            <summary>Advances to the last matching row (in index order) on the index. </summary>
        </member>
        <member name="F:System.Data.SqlServerCe.DbSeekOptions.AfterEqual">
            <summary>Advances to the last matching row on the index. If there are no matching rows, advances to the first row with values after the seek value, in index order.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.DbSeekOptions.After">
            <summary>Advances to the first row with values (in index order) after the seek value.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.DbSeekOptions.BeforeEqual">
            <summary>Advances to the first matching row on the index. If there are no matching rows, advances to the last row with values before the seek value, in index order.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.DbSeekOptions.Before">
            <summary>Advances to the last row with values (in index order) before the seek value.</summary>    
        </member>
        <member name="T:System.Data.SqlServerCe.DbInsertOptions">
            <remarks>Specifies the options to use when using the <see cref="M:System.Data.SqlServerCe.SqlCeResultSet.Insert(System.Data.SqlServerCe.SqlCeUpdatableRecord,System.Data.SqlServerCe.DbInsertOptions)"></see> method. </remarks>
        </member>
        <member name="F:System.Data.SqlServerCe.DbInsertOptions.KeepCurrentPosition">
            <summary>Maintains the current position after inserting a new row.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.DbInsertOptions.PositionOnInsertedRow">
            <summary>Positions the cursor on the newly-inserted row.</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.SEOCSTRACKOPTIONSV2">
            <remarks>
            New v2 version of tracking options. Used when enabling tracking
            Chosen such that the values (after combining using flags also) do not interfere with V1 options
            </remarks>
        </member>
        <member name="T:System.Data.SqlServerCe.MetaData">
            -------------------------------------------------------------------
            <summary>
            Column meta data.
            </summary>
            
        </member>
        <member name="T:System.Data.SqlServerCe.ValueMapper">
            <summary>
            ValueMapper is used to map command parameters from what is contained in
            the DataSet from the server to the correct type that is stored in the client-side
            DB.  There are complications with ADO.NET versions in that new Katmai datatypes,
            namely DateTimeOffset, are not available in ADO.NET 2.0 or in NETCF.  
            They are available in ADO.NET 2.0 SP1 on desktops, so the appropriate ValueMapperDelegate 
            to use must determined at runtime.  Clients built with 2.0 that use our libs built
            on 2.0 SP1 must avoid trying to check for System.DateTimeOffset or else they will
            hit a TypeLoadException.  This class is used to avoid that case by providing distinct
            Internal mappers that will be used correctly depending on what types are 
            available at runtime.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.ValueMapper.GetMappedValue(System.Data.SqlDbType,System.Object)">
            <summary>           
            Gets the mapped value of the parameter
            </summary>           
        </member>
        <member name="M:System.Data.SqlServerCe.NativeMethods.GetMinorErrorMessage(System.Int32)">
            <summary>
            Get the message from err dll corresponding to the given minor error code 
            </summary>
            <param name="minorError">SQL CE minor error code</param>
            <returns>Error Message from the resource dll</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.UnmanagedLibraryHelper.#ctor(System.String)">
            <summary>
            Constructor to load a dll and be responible for freeing it.
            </summary>
            <param name="fileName">full path name of dll to load</param>
            <remarks>Throws exceptions on failure. Most common failure would be file-not-found, or
            that the file is not a  loadable image.</remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.UnmanagedLibraryHelper.GetUnmanagedFunction``1(System.String)">
            <summary>
            Dynamically lookup a function in the dll via kernel32!GetProcAddress.
            </summary>
            <param name="functionName">Raw name of the function in the export table.</param>
            <returns>null if function is not found. Else a delegate to the unmanaged function.
            </returns>
            <remarks>GetProcAddress results are valid as long as the dll is not yet unloaded. This
            is very very dangerous to use since you need to ensure that the dll is not unloaded
            until after you're done with any objects implemented by the dll. For example, if you
            get a delegate that then gets an IUnknown implemented by this dll,
            you can not dispose this library until that IUnknown is collected. Else, you may free
            the library and then the CLR may call release on that IUnknown and it will crash.</remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.UnmanagedLibraryHelper.Dispose">
            <summary>
            Call FreeLibrary on the unmanaged dll. All function pointers
            handed out from this class become invalid after this.
            </summary>
            <remarks>This is very dangerous because it suddenly invalidate
            everything retrieved from this dll. This includes any functions
            handed out via GetProcAddress, and potentially any objects returned
            from those functions (which may have an implemention in the
            dll).
            </remarks>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeLockTimeoutException">
            <remarks>
            The exception thrown when the underlying provider returns a error from a 
            Microsoft SQL Server Compact data source when a lock time out occurs.
            </remarks>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeException">
            <summary>
            The exception thrown when the underlying provider returns a warning or error from a 
            Microsoft SQL Server Compact data source. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeException.#ctor">
            <summary>
            Default constructor. Should not be used unless there is a valid reason.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeException.#ctor(System.String)">
            <summary>
            Constructor with proper message specified.
            </summary>
            <param name="msg">Exception message</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor with proper message and inner exception specified.
            </summary>
            <param name="msg">Exception message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeException.#ctor(System.Data.SqlServerCe.SqlCeErrorCollection)">
            <summary>
            Constructor that takes native error collection and builds managed exception instance.
            </summary>
            <param name="errors">Native error collection</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor that helps in serialization.
            </summary>
            <param name="info">The SerializationInfo to populate with data</param>
            <param name="context">The destination (StreamingContext) for this serialization. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the <see cref="T:System.Data.SqlServerCe.SqlCeException"></see> object.
            </summary>
            <param name="info">The SerializationInfo to populate with data</param>
            <param name="context">The destination (StreamingContext) for this serialization. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeException.CreateException(System.String)">
            <summary>
            Creates a new instance of SqlCeException.
            </summary>
            <param name="message">Exception message</param>
            <returns>New SqlCeException instance</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeException.CreateException(System.String,System.Exception)">
            <summary>
            Creates a new instance of SqlCeException.
            </summary>
            <param name="message">Exception message</param>
            <param name="inner">Inner Exception</param>
            <returns>New SqlCeException instance</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeException.BuildExceptionMessage">
            <summary>
            Builds the exception message based on the native errors in the collection.
            </summary>
            <returns>Exception message</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeException.Errors">
            <summary>
            Gets a collection of one or more <see cref="T:System.Data.SqlServerCe.SqlCeError"></see> objects that contain 
            detailed information about exceptions generated by the .NET Compact Framework Data Provider for SQL Server Compact Edition.
            </summary>
            <returns>The <see cref="T:System.Data.SqlServerCe.SqlCeErrorCollection"></see> object that contains the collected instances 
            of the <see cref="T:System.Data.SqlServerCe.SqlCeError"></see> class for the exception.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeException.HResult">
            <summary>
            Gets the HRESULT value of the exception. This value is the same as the value of 
            <see cref="P:System.Data.SqlServerCe.SqlCeError.HResult"></see> for the first 
            instance of <see cref="T:System.Data.SqlServerCe.SqlCeError"></see> in the 
            <see cref="T:System.Data.SqlServerCe.SqlCeErrorCollection"></see> for the exception.
            </summary>
            <returns>The HRESULT value.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeException.NativeError">
            <summary>
            Gets the native error number of the first <see cref="T:System.Data.SqlServerCe.SqlCeError"></see> 
            in the <see cref="T:System.Data.SqlServerCe.SqlCeErrorCollection"></see>. For more information about 
            the error, see the "SQL Server Compact Edition Errors" topic in the Troubleshooting section of 
            SQL Server Compact Edition Books Online.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeException.Message">
            <summary>
            Gets the text describing the first instance of <see cref="T:System.Data.SqlServerCe.SqlCeError"></see> 
            in the <see cref="T:System.Data.SqlServerCe.SqlCeErrorCollection"></see> for this exception.
            </summary>
            <returns>The text describing the error.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeException.Source">
            <summary>
            Gets the name of the OLE DB provider that generated the error.
            </summary>
            <returns>The name of the OLE DB provider that generated the error.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeLockTimeoutException.#ctor(System.Data.SqlServerCe.SqlCeErrorCollection)">
            <summary>
            Constructor that takes native error collection and builds managed exception instance.
            </summary>
            <param name="errors">Native error collection</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeLockTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor that helps in serialization.
            </summary>
            <param name="info">The SerializationInfo to populate with data</param>
            <param name="context">The destination (StreamingContext) for this serialization. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeLockTimeoutException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the <see cref="T:System.Data.SqlServerCe.SqlCeException"></see> object.
            </summary>
            <param name="info">The SerializationInfo to populate with data</param>
            <param name="context">The destination (StreamingContext) for this serialization. </param>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeTransactionInProgressException">
            <summary>
            The exception thrown when the underlying provider returns a error from a 
            Microsoft SQL Server Compact data source when an operation is attempted while a transcation is in progress.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeTransactionInProgressException.#ctor(System.Data.SqlServerCe.SqlCeErrorCollection)">
            <summary>
            Constructor that takes native error collection and builds managed exception instance.
            </summary>
            <param name="errors">Native error collection</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeTransactionInProgressException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor that helps in serialization.
            </summary>
            <param name="info">The SerializationInfo to populate with data</param>
            <param name="context">The destination (StreamingContext) for this serialization. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeTransactionInProgressException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the <see cref="T:System.Data.SqlServerCe.SqlCeException"></see> object.
            </summary>
            <param name="info">The SerializationInfo to populate with data</param>
            <param name="context">The destination (StreamingContext) for this serialization. </param>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeInvalidDatabaseFormatException">
            <summary>
            The exception thrown when the underlying provider returns a error from a 
            Microsoft SQL Server Compact data source when an database file of older/newer version is attempted to open by SQL Server Compact 3.5.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeInvalidDatabaseFormatException.#ctor(System.Data.SqlServerCe.SqlCeErrorCollection)">
            <summary>
            Constructor that takes native error collection and builds managed exception instance.
            </summary>
            <param name="errors">Native error collection</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeInvalidDatabaseFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor that helps in serialization.
            </summary>
            <param name="info">The SerializationInfo to populate with data</param>
            <param name="context">The destination (StreamingContext) for this serialization. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeInvalidDatabaseFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the <see cref="T:System.Data.SqlServerCe.SqlCeException"></see> object.
            </summary>
            <param name="info">The SerializationInfo to populate with data</param>
            <param name="context">The destination (StreamingContext) for this serialization. </param>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeInfoMessageEventHandler">
            <remarks>
            Represents the method that will handle the <see cref="E:System.Data.SqlServerCe.SqlCeConnection.InfoMessage"></see> event 
            of a <see cref="T:System.Data.SqlServerCe.SqlCeConnection"></see>.
            </remarks>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeRowUpdatedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:System.Data.SqlServerCe.SqlCeDataAdapter.RowUpdated"></see> 
            event of a <see cref="T:System.Data.SqlServerCe.SqlCeDataAdapter"></see>.
            </summary>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeFlushFailureEventHandler">
            <remarks>
            The delegate that must be implemented to listen for <see cref="E:System.Data.SqlServerCe.SqlCeConnection.FlushFailure"></see> events.
            </remarks>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeRowUpdatedEventArgs">
            <remarks>
            Provides data for the <see cref="E:System.Data.SqlServerCe.SqlCeDataAdapter.RowUpdated"></see> event. 
            </remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeRowUpdatedEventArgs"></see> class.
            </summary>
            <param name="statementType">One of the <see cref="T:System.Data.StatementType"></see> values that specifies the 
            type of query executed. </param>
            <param name="tableMapping">The <see cref="T:System.Data.Common.DataTableMapping"></see> sent through an 
            <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"></see>. </param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"></see> executed when 
            <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"></see> is called. </param>
            <param name="dataRow">The <see cref="T:System.Data.DataRow"></see> sent through an 
            <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"></see>. </param>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeRowUpdatedEventArgs.Command">
            <summary>
            Gets the <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> executed when 
            <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"></see> is called.
            </summary>
            <returns>The <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> executed when 
            <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"></see> is called.</returns>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeRowUpdatingEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:System.Data.SqlServerCe.SqlCeDataAdapter.RowUpdating"></see> 
            event of a <see cref="T:System.Data.SqlServerCe.SqlCeDataAdapter"></see>.
            </summary>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeInfoMessageEventArgs">
            <remarks>
            Provides data for the <see cref="E:System.Data.SqlServerCe.SqlCeConnection.InfoMessage"></see> event. 
            This class cannot be inherited.
            </remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeInfoMessageEventArgs.ToString">
            <summary>
            Retrieves a string representation of the <see cref="E:System.Data.SqlServerCe.SqlCeConnection.InfoMessage"></see> event.
            </summary>
            <returns>A string representing the <see cref="E:System.Data.SqlServerCe.SqlCeConnection.InfoMessage"></see> event.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeInfoMessageEventArgs.Errors">
            <summary>
            Gets the collection of warnings sent from the data source.
            </summary>
            <returns>The collection of warnings sent from the data source.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeInfoMessageEventArgs.Message">
            <summary>
            Gets the complete text of the error sent from the data source.
            </summary>
            <returns>The complete text of the error.</returns>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeFlushFailureEventArgs">
            <remarks>
            Encapsulates event arguments for the <see cref="E:System.Data.SqlServerCe.SqlCeConnection.FlushFailure"></see> event.
            </remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeFlushFailureEventArgs.ToString">
            <summary>Retrieves a string representation of the <see cref="T:System.Data.SqlServerCe.SqlCeFailureEventArgs"></see> class.</summary>
            <returns>A string representing the <see cref="T:System.Data.SqlServerCe.SqlCeFailureEventArgs"></see> class.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeFlushFailureEventArgs.Errors">
            <summary>Retrieves the error collection in the <see cref="T:System.Data.SqlServerCe.SqlCeFailureEventArgs"></see> class.</summary>
            <returns>Collection of errors in the <see cref="T:System.Data.SqlServerCe.SqlCeFailureEventArgs"></see> class.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeFlushFailureEventArgs.Message">
            <summary>Gets a string representation of the Message of the <see cref="T:System.Data.SqlServerCe.SqlCeFailureEventArgs"></see> class.</summary>
            <returns>A string representing the <see cref="T:System.Data.SqlServerCe.SqlCeFailureEventArgs"></see> class.</returns>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeErrorCollection">
            <remarks>
            Collects all errors generated by the .NET Framework Data Provider for Microsoft SQL Server 2005 Compact Edition. 
            This class cannot be inherited.
            </remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeErrorCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Data.SqlServerCe.SqlCeErrorCollection"></see> into 
            an <see cref="T:System.Array"></see>, starting at the given index within the <see cref="T:System.Array"></see>.
            </summary>
            <param name="array">The <see cref="T:System.Array"></see> into which to copy the elements. </param>
            <param name="index">The starting index of the array. </param>
            <exception cref="T:System.ArgumentException">The sum of index and the number of elements in the 
            <see cref="T:System.Data.SqlServerCe.SqlCeErrorCollection"></see> is greater than the 
            <see cref="P:System.Array.Length"></see> of the <see cref="T:System.Array"></see>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is not valid for the array. </exception>
            <exception cref="T:System.ArgumentNullException">The array is null. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeErrorCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:System.Data.SqlServerCe.SqlCeErrorCollection"></see>.
            </summary>
            <returns><see cref="T:System.Collections.IEnumerator"></see></returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeErrorCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized"></see>.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeErrorCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot"></see>.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeErrorCollection.Count">
            <summary>
            Gets the number of <see cref="T:System.Data.SqlServerCe.SqlCeError"></see> objects in the collection.
            </summary>
            <returns>The total number of <see cref="T:System.Data.SqlServerCe.SqlCeError"></see> objects in the collection.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeErrorCollection.Item(System.Int32)">
            <summary>
            Gets the error at the specified index.
            </summary>
            <returns>A <see cref="T:System.Data.SqlServerCe.SqlCeError"></see> that contains the error at the specified index.</returns>
            <param name="index">The zero-based index of the <see cref="T:System.Data.SqlServerCe.SqlCeError"></see> to retrieve. </param>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeDataAdapter">
            <remarks>
            Represents a set of data commands and a database connection that are used to fill 
            the <see cref="T:System.Data.DataSet"></see> and update the data source. 
            </remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataAdapter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeDataAdapter"></see> class.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataAdapter.#ctor(System.Data.SqlServerCe.SqlCeCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeDataAdapter"></see> class 
            with the specified <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> as the 
            <see cref="P:System.Data.SqlServerCe.SqlCeDataAdapter.SelectCommand"></see> property.
            </summary>
            <param name="selectCommand">A <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> that is a SELECT 
            statement. This <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> is set as the 
            <see cref="P:System.Data.SqlServerCe.SqlCeDataAdapter.SelectCommand"></see> property of the 
            <see cref="T:System.Data.SqlServerCe.SqlCeDataAdapter"></see>. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataAdapter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeDataAdapter"></see> 
            class with a <see cref="P:System.Data.SqlServerCe.SqlCeDataAdapter.SelectCommand"></see> and a connection string.
            </summary>
            <param name="selectConnectionString">The connection string. </param>
            <param name="selectCommandText">A <see cref="T:System.String"></see> that is an SQL SELECT statement to be 
            used as the <see cref="P:System.Data.SqlServerCe.SqlCeCommand.CommandText"></see> of the 
            <see cref="P:System.Data.SqlServerCe.SqlCeDataAdapter.SelectCommand"></see> property of the 
            <see cref="T:System.Data.SqlServerCe.SqlCeDataAdapter"></see>. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataAdapter.Dispose">
            <summary>
            Releases the resources consumed by this <see cref="T:System.Data.SqlServerCe.SqlCeDataAdapter"></see>.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataAdapter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Data.SqlServerCe.SqlCeDataAdapter"></see> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataAdapter.#ctor(System.String,System.Data.SqlServerCe.SqlCeConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeDataAdapter"></see> 
            class with a <see cref="P:System.Data.SqlServerCe.SqlCeDataAdapter.SelectCommand"></see> and a 
            <see cref="T:System.Data.SqlServerCe.SqlCeConnection"></see> object.
            </summary>
            <param name="selectCommandText">A <see cref="T:System.String"></see> that is an SQL SELECT 
            statement to be used as the <see cref="P:System.Data.SqlServerCe.SqlCeCommand.CommandText"></see> 
            of the <see cref="P:System.Data.SqlServerCe.SqlCeDataAdapter.SelectCommand"></see> property of the 
            <see cref="T:System.Data.SqlServerCe.SqlCeDataAdapter"></see>. </param>
            <param name="selectConnection">A <see cref="T:System.Data.SqlServerCe.SqlCeConnection"></see> that 
            represents the connection. </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataAdapter.System#ICloneable#Clone">
            <summary>
            For a description of this member, see <see cref="M:System.ICloneable.Clone"></see>.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Occurs during a call to Update after an update command is executed against the data source. 
            The attempt to update is made and then this event fires.
            </summary>
            <param name="dataRow">The row which is got updated.</param>
            <param name="command">The command that updated the Row.</param>
            <param name="statementType"> </param>
            <param name="tableMapping"> </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Occurs during a call to Update before an update command is executed against the data source. 
            The attempt to update is made, and then this event fires.
            </summary>
            <param name="dataRow">The row which is got updated.</param>
            <param name="command">The command that updated the Row.</param>
            <param name="statementType"> </param>
            <param name="tableMapping"> </param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Occurs after the call to Update command against the data source.
            </summary>
            <param name="value">RowUpdatedEventArgs object.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            Occurs during the call to Update command against the data source.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeDataAdapter.DeleteCommand">
            <summary>
            Gets or sets an SQL statement for deleting records from the data set.
            </summary>
            <returns>A <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> used during 
            <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"></see> 
            to delete records in the data source that correspond to deleted rows in the 
            <see cref="T:System.Data.DataSet"></see>.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeDataAdapter.InsertCommand">
            <summary>
            Gets or sets an SQL statement used to insert new records into the data source.
            </summary>
            <returns>A <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> used during 
            <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"></see> 
            to insert records in the data source that correspond to new rows in the 
            <see cref="T:System.Data.DataSet"></see>.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeDataAdapter.SelectCommand">
            <summary>
            Gets or sets an SQL statement used to select records in the data source.
            </summary>
            <returns>A <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> that is used 
            during <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)"></see> 
            to select records from data source for placement in the 
            <see cref="T:System.Data.DataSet"></see>.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeDataAdapter.UpdateCommand">
            <summary>
            Gets or sets an SQL statement used to update records in the data source.
            </summary>
            <returns>A <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> used during 
            <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"></see> 
            to update records in the data source that correspond to modified rows in the 
            <see cref="T:System.Data.DataSet"></see>.</returns>
        </member>
        <member name="E:System.Data.SqlServerCe.SqlCeDataAdapter.RowUpdated">
            <summary>
            Occurs during a call to <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"></see> 
            after an update command is executed against the data source. The attempt to update is made and then this 
            event fires.
            </summary>
        </member>
        <member name="E:System.Data.SqlServerCe.SqlCeDataAdapter.RowUpdating">
            <summary>
            Occurs during a call to <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"></see> 
            before an update command is executed against the data source. The attempt to update is made, and then 
            this event fires.
            </summary>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeRowUpdatingEventArgs">
            <remarks>
            Provides data for the <see cref="E:System.Data.SqlServerCe.SqlCeDataAdapter.RowUpdating"></see> event.
            </remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlCeRowUpdatingEventArgs"></see> class.
            </summary>
            <param name="statementType">One of the <see cref="T:System.Data.StatementType"></see> values that specifies the 
            type of query executed. </param>
            <param name="tableMapping">The <see cref="T:System.Data.Common.DataTableMapping"></see> sent through an 
            <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"></see>. </param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"></see> to execute during 
            <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"></see>. </param>
            <param name="dataRow">The <see cref="T:System.Data.DataRow"></see> to 
            <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"></see>. </param>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlCeRowUpdatingEventArgs.Command">
            <summary>
            Gets or sets the <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> to execute when performing an 
            <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"></see>.
            </summary>
            <returns>The <see cref="T:System.Data.SqlServerCe.SqlCeCommand"></see> to execute when performing the 
            <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"></see>.</returns>
        </member>
        <member name="T:System.Data.SqlServerCe.ResultSetView">
            <remarks>Implements data binding interfaces and provides a bridge between user interface controls and the <see cref="T:System.Data.SqlServerCe.SqlCeResultSet"></see>.</remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.ResultSetView.#ctor(System.Data.SqlServerCe.SqlCeResultSet)">
            <summary>
            This class can only be instantiated by SqlCeResultSet
            </summary>
            <param name="resultSet">Parent resultset</param>
            
        </member>
        <member name="M:System.Data.SqlServerCe.ResultSetView.System#IDisposable#Dispose">
            <summary>
            Cleanup object references to fasten garbage collection
            </summary>
            
        </member>
        <member name="M:System.Data.SqlServerCe.ResultSetView.System#Collections#IList#Add(System.Object)">
            <summary>For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)"></see>.</summary>
               <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Data.SqlServerCe.ResultSetView"></see>.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.ResultSetView.System#Collections#IList#Clear">
            <summary>For a description of this member, see <see cref="M:System.Collections.IList.Clear"></see>.</summary>
        </member>
        <member name="M:System.Data.SqlServerCe.ResultSetView.System#Collections#IList#Contains(System.Object)">
            <summary>For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)"></see>.</summary>
               <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Data.SqlServerCe.ResultSetView"></see>.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.ResultSetView.System#Collections#IList#IndexOf(System.Object)">
            <summary>For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)"></see>.</summary>
               <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Data.SqlServerCe.ResultSetView"></see>.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.ResultSetView.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"></see>.</summary>
               <param name="value">The <see cref="T:System.Object"></see> to insert into the <see cref="T:System.Data.SqlServerCe.ResultSetView"></see>.</param>
               <param name="index">The zero-based index at which value should be inserted.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.ResultSetView.System#Collections#IList#Remove(System.Object)">
            <summary>For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)"></see>.</summary>
               <param name="value">The <see cref="T:System.Object"></see> to remove from the <see cref="T:System.Data.SqlServerCe.ResultSetView"></see>.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.ResultSetView.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>For a description of this member, see <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"></see>.</summary>
               <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.ResultSetView.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"></see>.</summary>
               <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Data.SqlServerCe.ResultSetView"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
               <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="P:System.Data.SqlServerCe.ResultSetView.SqlCeResultSet">
            <summary>
            Returns the parent SqlCeResultSet
            </summary>
            
        </member>
        <member name="P:System.Data.SqlServerCe.ResultSetView.Columns">
            <summary>
            Gets or Sets All the columns in the present view.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value was expected, but a null encountered.</exception>        
        </member>
        <member name="P:System.Data.SqlServerCe.ResultSetView.Ordinals">
            <summary>
            Gets or Sets the ordinals of the columns in the present view.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value was expected, but a null encountered.</exception>
            <exception cref="T:System.IndexOutOfRangeException">Index ordinal should be within the limit of the parent table.</exception>
        </member>
        <member name="E:System.Data.SqlServerCe.ResultSetView.ListChanged">
            <summary>This event is raised when items are added or removed from the <see cref="T:System.Data.SqlServerCe.ResultSetView"></see>.</summary>
        </member>
        <member name="P:System.Data.SqlServerCe.ResultSetView.System#Collections#IList#Item(System.Int32)">
            <summary>For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)"></see>.</summary>
               <param name="index">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Data.SqlServerCe.ResultSetView"></see>.</param>
        </member>
        <member name="P:System.Data.SqlServerCe.ResultSetView.System#Collections#ICollection#Count">
            <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.Count"></see>.</summary>
        </member>
        <member name="P:System.Data.SqlServerCe.ResultSetView.System#Collections#ICollection#IsSynchronized">
            <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized"></see>.</summary>
        </member>
        <member name="P:System.Data.SqlServerCe.ResultSetView.System#Collections#ICollection#SyncRoot">
            <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot"></see>.</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.ResultSetEnumerator">
            <remarks>An enumerator that can be used to iterate through a collection of records in a ResultSet object. The <see cref="T:System.Data.SqlServerCe.ResultSetEnumerator"></see> is not designed to be used directly from within your code. You will get more functionality by working directly with the <see cref="T:System.Data.SqlServerCe.SqlCeResultSet"></see> object.</remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.ResultSetEnumerator.#ctor(System.Data.SqlServerCe.SqlCeResultSet)">
            <param name="resultSet">A <see cref="T:System.Data.SqlServerCe.SqlCeResultSet"></see> object containing the records to be enumerated.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.ResultSetEnumerator.MoveNext">
            <summary>Advances the enumerator to the next element of the collection.</summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:System.Data.SqlServerCe.ResultSetEnumerator.Reset">
            <summary>Positions the cursor before the first record in the <see cref="T:System.Data.SqlServerCe.SqlCeResultSet"></see>.</summary>
        </member>
        <member name="P:System.Data.SqlServerCe.ResultSetEnumerator.Current">
            <summary>For a description of this member, see <see cref="P:System.Collections.IEnumerator.Current"></see>.</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.ResultSetOptions">
            <remarks>Sets options for the <see cref="M:System.Data.SqlServerCe.ResultSetEnumerator.#ctor(System.Data.SqlServerCe.SqlCeResultSet)"></see>.</remarks>
        </member>
        <member name="F:System.Data.SqlServerCe.ResultSetOptions.None">
            <summary>No ResultSet options are specified.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.ResultSetOptions.Updatable">
            <summary>The ResultSet allows updates.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.ResultSetOptions.Scrollable">
            <summary>The ResultSet can be scrolled both forward and backward.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.ResultSetOptions.Sensitive">
            <summary>The ResultSet detects changes made to the data source.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.ResultSetOptions.Insensitive">
            <summary>The ResultSet does not detect changes made to the data source. </summary>
        </member>
        <member name="T:System.Data.SqlServerCe.ResultSetSensitivity">
            <remarks>Sets the sensitivity of the <see cref="M:System.Data.SqlServerCe.ResultSetEnumerator.#ctor(System.Data.SqlServerCe.SqlCeResultSet)"></see>.</remarks>
        </member>
        <member name="F:System.Data.SqlServerCe.ResultSetSensitivity.Asensitive">
            <summary>No sensitivity is set for the ResultSet.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.ResultSetSensitivity.Insensitive">
            <summary>The ResultSet does not detect changes made to the data source.</summary>
        </member>
        <member name="F:System.Data.SqlServerCe.ResultSetSensitivity.Sensitive">
            <summary>The ResultSet detects changes made to the data source.</summary>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlMetaData">
            <remarks>
            Specifies and retrieves metadata information from parameters and columns retrieved from a database. This class cannot be inherited.
            </remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.#ctor(System.String,System.Data.SqlDbType)">
            <summary>Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> class with the specified column name and type.</summary>
            <param name="name">The name of the column.</param>
            <param name="dbType">The SQL Server type of the parameter or column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Int64)">
            <summary>Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> class with the specified column name, type, and maximum length.</summary>
            <param name="name">The name of the column.</param>
            <param name="dbType">The SQL Server type of the parameter or column.</param>
            <param name="maxLength">The maximum length of the specified type.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Byte,System.Byte)">
            <summary>Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> class with the specified column name, type, and user-defined type.</summary>
            <param name="scale">The scale of the parameter or column.</param>
            <param name="name">The name of the column.</param>
            <param name="precision">The precision of the parameter or column.</param>
            <param name="dbType">The SQL Server type of the parameter or column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Int64,System.Int64,System.Data.SqlTypes.SqlCompareOptions)">
            <summary>Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> class with the specified column name, type, precision, and scale.</summary>
            <param name="compareOptions">The comparison rules of the parameter or column.</param>
            <param name="name">The name of the parameter or column.</param>
            <param name="dbType">The SQL Server type of the parameter or column.</param>
            <param name="maxLength">The maximum length of the specified type.</param>
            <param name="locale">The locale ID of the parameter or column.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Int64,System.Byte,System.Byte,System.Int64,System.Data.SqlTypes.SqlCompareOptions,System.Type)">
            <summary>Initializes a new instance of the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> class with the specified column name, type, maximum length, precision, scale, locale ID, compare options, and user-defined type.</summary>
            <param name="userDefinedType">A <see cref="T:System.Type"></see> instance that points to the user-defined type.</param>
            <param name="scale">The scale of the parameter or column.</param>
            <param name="compareOptions">The comparison rules of the parameter or column.</param>
            <param name="localeId">The locale ID of the parameter or column.</param>
            <param name="name">The name of the parameter or column</param>
            <param name="precision">The precision of the parameter or column.</param>
            <param name="dbType">The SQL Server type of the parameter or column</param>
            <param name="maxLength">The maximum length of the specified type.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Int16)">
            <summary>Validates the specified <see cref="T:System.Int16"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Int16"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Int32)">
            <summary>Validates the specified <see cref="T:System.Int32"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Int32"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Int64)">
            <summary>Validates the specified <see cref="T:System.Int64"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Int64"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Single)">
            <summary>Validates the specified <see cref="T:System.Single"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Single"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Double)">
            <summary>Validates the specified <see cref="T:System.Double"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Double"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.String)">
            <summary>Validates the specified <see cref="T:System.String"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.String"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Decimal)">
            <summary>Validates the specified <see cref="T:System.Decimal"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Decimal"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.DateTime)">
            <summary>Validates the specified <see cref="T:System.DateTime"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.DataTime"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Guid)">
            <summary>Validates the specified <see cref="T:System.Guid"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Guid"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Data.SqlTypes.SqlBoolean)">
            <summary>Validates the specified <see cref="T:System.Data.SqlTypes.SqlBoolean"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Data.SqlTypes.SqlBoolean"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Data.SqlTypes.SqlByte)">
            <summary>Validates the specified <see cref="T:System.Data.SqlTypes.SqlByte"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Data.SqlTypes.SqlByte"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Data.SqlTypes.SqlInt16)">
            <summary>Validates the specified <see cref="T:System.Data.SqlTypes.SqlInt16"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Data.SqlTypes.SqlInt16"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Data.SqlTypes.SqlInt32)">
            <summary>Validates the specified <see cref="T:System.Data.SqlTypes.SqlInt32"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Data.SqlTypes.SqlInt32"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Data.SqlTypes.SqlInt64)">
            <summary>Validates the specified <see cref="T:System.Data.SqlTypes.SqlInt64"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Data.SqlTypes.SqlInt64"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Data.SqlTypes.SqlSingle)">
            <summary>Validates the specified <see cref="T:System.Data.SqlTypes.SqlSingle"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Data.SqlTypes.SqlSingle"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Data.SqlTypes.SqlDouble)">
            <summary>Validates the specified <see cref="T:System.Data.SqlTypes.SqlDouble"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Data.SqlTypes.SqlDouble"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Data.SqlTypes.SqlMoney)">
            <summary>Validates the specified <see cref="T:System.Data.SqlTypes.SqlMoney"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Data.SqlTypes.SqlMoney"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Data.SqlTypes.SqlDateTime)">
            <summary>Validates the specified <see cref="T:System.Data.SqlTypes.SqlDateTime"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Data.SqlTypes.SqlDateTime"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Data.SqlTypes.SqlDecimal)">
            <summary>Validates the specified <see cref="T:System.Data.SqlTypes.SqlDecimal"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Data.SqlTypes.SqlDecimal"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Data.SqlTypes.SqlString)">
            <summary>Validates the specified <see cref="T:System.Data.SqlTypes.SqlString"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Data.SqlTypes.SqlString"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Data.SqlTypes.SqlBinary)">
            <summary>Validates the specified <see cref="T:System.Data.SqlTypes.SqlBinary"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Data.SqlTypes.SqlBinary"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Data.SqlTypes.SqlGuid)">
            <summary>Validates the specified <see cref="T:System.Data.SqlTypes.SqlGuid"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Data.SqlTypes.SqlGuid"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Data.SqlTypes.SqlChars)">
            <summary>Validates the specified <see cref="T:System.Data.SqlTypes.SqlChars"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Data.SqlTypes.SqlChars"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Data.SqlTypes.SqlBytes)">
            <summary>Validates the specified <see cref="T:System.Data.SqlTypes.SqlBytes"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Data.SqlTypes.SqlBytes"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Object)">
            <summary>Validates the specified <see cref="T:System.Object"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Object"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Boolean)">
            <summary>Validates the specified <see cref="T:System.Boolean"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Boolean"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Byte)">
            <summary>Validates the specified <see cref="T:System.Byte"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Byte"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Byte[])">
            <summary>Validates the specified array of <see cref="T:System.Byte"></see> values against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as an array of <see cref="T:System.Byte"></see> values.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Char)">
            <summary>Validates the specified <see cref="T:System.Char"></see> value against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as a <see cref="T:System.Char"></see>.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlMetaData.Adjust(System.Char[])">
            <summary>Validates the specified array of <see cref="T:System.Char"></see> values against the metadata and adjusts the value if necessary.</summary>
            <returns>The adjusted value as an array <see cref="T:System.Char"></see> values.</returns>
            <param name="value">The value to validate against the <see cref="T:System.Data.SqlServerCe.SqlMetaData"></see> instance.</param>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlMetaData.CompareOptions">
            <returns>The comparison rules used for the column or parameter as a <see cref="T:System.Data.SqlTypes.SqlCompareOptions"></see>.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlMetaData.DbType">
            <returns>The data type of the column or parameter as a <see cref="T:System.Data.DbType"></see>.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlMetaData.LocaleId">
            <returns>The locale ID of the column or parameter as a <see cref="T:System.Int64"></see>.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlMetaData.Max">
            <returns>The length of the text, ntext, and image data types.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlMetaData.MaxLength">
            <returns>The maximum length of the column or parameter as a <see cref="T:System.Int64"></see>.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlMetaData.Name">
            <returns>The name of the column or parameter as a <see cref="T:System.String"></see>.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlMetaData.Precision">
            <returns>The precision of the column or parameter as a <see cref="T:System.Byte"></see>.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlMetaData.Scale">
            <returns>The scale of the column or parameter.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlMetaData.SqlDbType">
            <returns>The data type of the column or parameter as a <see cref="T:System.Data.DbType"></see>.</returns>
        </member>
        <member name="P:System.Data.SqlServerCe.SqlMetaData.TypeName">
            <returns>The name of the user-defined type or SQL Server type as a <see cref="T:System.String"></see>.</returns>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeProviderFactory">
            <remarks>Represents a set of methods for creating instances of a provider's implementation of the data source classes.</remarks>
        </member>
        <member name="F:System.Data.SqlServerCe.SqlCeProviderFactory.Instance">
            <summary>An instance of a <see cref="T:System.Data.SqlServerCe.SqlCeProviderFactory"></see>.</summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeProviderFactory.CreateCommand">
            <summary>Returns a new instance of the provider's class that implements the <see cref="T:System.Data.Common.DbCommand"></see> class.</summary>
            <returns>A new instance of <see cref="T:System.Data.Common.DbCommand"></see>.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeProviderFactory.CreateCommandBuilder">
            <summary>Returns a new instance of the provider's class that implements the <see cref="T:System.Data.Common.DbCommandBuilder"></see> class.</summary>
            <returns>A new instance of <see cref="T:System.Data.Common.DbCommandBuilder"></see>.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeProviderFactory.CreateConnection">
            <summary>Returns a new instance of the provider's class that implements the <see cref="T:System.Data.Common.DbConnection"></see> class.</summary>
            <returns>A new instance of <see cref="T:System.Data.Common.DbConnection"></see>.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeProviderFactory.CreateDataAdapter">
            <summary>Returns a new instance of the provider's class that implements the <see cref="T:System.Data.Common.DbDataAdapter"></see> class.</summary>
            <returns>A new instance of <see cref="T:System.Data.Common.DbDataAdapter"></see>.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeProviderFactory.CreateParameter">
            <summary>Returns a new instance of the provider's class that implements the <see cref="T:System.Data.Common.DbParameter"></see> class.</summary>
            <returns>A new instance of <see cref="T:System.Data.Common.DbParameter"></see>.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeProviderFactory.CreateConnectionStringBuilder">
            <summary>Returns a new instance of the provider's class that implements the <see cref="T:System.Data.Common.DbConnectionStringBuilder"></see> class.</summary>
            <returns>A new instance of <see cref="T:System.Data.Common.DbConnectionStringBuilder"></see>.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeProviderFactory.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Extension mechanism for additional services; currently the only service
            supported is the ProviderServices;
            </summary>
            <returns>requested service provider or null.</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeRestriction.IsWebHosted">
            <summary>
            Check if the caller is using System.Web Hosted
            </summary>
            <returns>True if WebHosted</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeRestriction.IsExplicitlyEnabled">
             <summary>
             Check if the soft switch was enabled which would bypass all ASP.net checking
             </summary>
             <returns>True if the Softswitch was enabled</returns>
             <remarks>To enable SQL Compact Edition under ASP.net scenarios:
             AppDomain.CurrentDomain.SetData("SQLServerCompactEditionUnderWebHosting", true);</remarks>
            
        </member>
        <member name="M:System.Data.SqlServerCe.ExtensionMethods.SystemDataSqlServerCeSqlCeProviderServices_Instance">
             -------------------------------------------------------------------
             <summary>
             Returns the singleton object SqlCeProviderServices.
             </summary>
            
        </member>
        <member name="M:System.Data.SqlServerCe.ExtensionMethods.SystemDataSqlServerCeSqlCeProviderServices_Instance_GetValue">
             -------------------------------------------------------------------
             <summary>
             Returns the singleton object SqlCeProviderServices.
             </summary>
            
        </member>
        <member name="M:System.Data.SqlServerCe.ExtensionMethods.ConstructFullAssemblyName(System.String)">
             -------------------------------------------------------------------
             <summary>
             Use current assembly information to construct
             the full assembly name for an assembly with name           .
             assemblyname. This is called for System.Data.SqlServerCe.Entity.dll only.
             </summary>
            
        </member>
        <member name="M:System.Data.SqlServerCe.ExtensionMethods.GetFullAssemblyName(System.String)">
             -------------------------------------------------------------------
             <summary>
             Get full assembly name of a currently loaded assembly.
             This is called for System.Data.Entity only.
             <param> partial name of required assembly </param>
             </summary>
            
        </member>
        <member name="T:System.Data.SqlServerCe.SchemaCollections">
            <summary>
            A wrapper class implemented to hold the schema collection.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SchemaCollections.GetSchema(System.Data.SqlServerCe.SqlCeConnection)">
            <summary>
            Returns schema information for the data source of this SqlCeConnection.
            </summary>
            <param name="conn">The conn.</param>
            <returns>
            A <see cref="T:System.Data.DataTable"/> that contains schema information.
            </returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SchemaCollections.GetSchema(System.Data.SqlServerCe.SqlCeConnection,System.String)">
            <summary>
            Returns schema information for the data source of this SqlCeConnection.
            </summary>
            <param name="conn">The conn.</param>
            <param name="schemaName">Specifies the name of the schema to return.</param>
            <returns>
            A <see cref="T:System.Data.DataTable"/> that contains schema information.
            </returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SchemaCollections.GetSchema(System.Data.SqlServerCe.SqlCeConnection,System.String,System.String[])">
            <summary>
            Returns schema information for the data source of this SqlCeConnection.
            </summary>
            <param name="conn">The conn.</param>
            <param name="schemaName">Specifies the name of the schema to return.</param>
            <param name="restrictions">Specifies a set of restriction values for the requested schema.</param>
            <returns>
            A <see cref="T:System.Data.DataTable"/> that contains schema information.
            </returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SchemaCollections.GetCustomCollections(System.Data.SqlServerCe.SqlCeConnection,System.Data.DataRow,System.String[])">
            <summary>
            Generates the schema collections which requires the custom steps for thier proper content.
            </summary>
            <param name="conn">The conn.</param>
            <param name="collectionRow">The collection information from metadataCollections.</param>
            <param name="restrictions">The restrictions to be applied to the collection.</param>
            <returns>
            A <see cref="T:System.Data.DataTable"/> that contains schema information.
            </returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SchemaCollections.GetXMLResourceCollections(System.Data.SqlServerCe.SqlCeConnection,System.Data.DataRow,System.String[])">
            <summary>
            Reads the required collection from the XMLResources.
            </summary>
            <param name="conn">The conn.</param>
            <param name="collectionRow">The collection information.</param>
            <param name="restrictions">The restrictions to be applied to collections.</param>
            <returns>
            A <see cref="T:System.Data.DataTable"/> that contains schema information.
            </returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SchemaCollections.GetSqlStatementCollections(System.Data.SqlServerCe.SqlCeConnection,System.Data.DataRow,System.String[])">
            <summary>
            Execute the SQL query on information schema views to generate collections DataTable.
            </summary>
            <param name="conn">The conn.</param>
            <param name="collectionRow">The collection information.</param>
            <param name="restrictions">The restrictions to be applied to collection.</param>
            <returns>
            A <see cref="T:System.Data.DataTable"/> that contains schema information.
            </returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SchemaCollections.IsNullOrEmptyArray(System.Array)">
            <summary>
            Determines whether the specified array is null or empty array .
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.HashProvider.MatchHash(System.String)">
            <summary>
            Matches the hash of provided file with the stored hash of the file.
            </summary>
            <param name="filePath">The file path.</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.SqlServerCe.HashProvider.CalculateHash(System.String)">
            <summary>
            Calculates the hash of the provided file using SHA256.
            </summary>
            <param name="filePath">path of the file.</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.SqlServerCe.KillBitHelper.#cctor">
            <summary>
            Initializes the <see cref="T:System.Data.SqlServerCe.KillBitHelper"/> type.
            Will throw exception if the killbit is set.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.KillBitHelper.GetKillBit">
            <summary>
            Gets the kill bit value from the registry varibles. This function checks if any of the 
            versions above the current version is killbitted. If yes then this return true indicating 
            there is a pottential security vunrability hence does not allow to use this assembly 
            else it return false indicating it is safe to use this assembly.
            </summary>
        </member>
        <member name="T:System.Data.SqlServerCe.CspSafeHandle">
            <remarks>
            A safe handle to CrptoServiceProvider context 
            </remarks>
        </member>
        <member name="T:System.Data.SqlServerCe.HashSafeHandle">
            <remarks>
            A safe handle to Hash object returned by CryptCreateHash Function
            </remarks>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeSHA256">
            <remarks>
            Custom Implemantation of SHA256 class which uses CryptoServiceProvider 
            and workaround the problem mentioned @ 
            http://connect.microsoft.com/VisualStudio/feedback/details/355031/sha512cryptoserviceprovider-throws-platformnotsupportedexception-on-windows-xp-sp2
            </remarks>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeSHA256.#ctor">
            <summary>
            Creates the new SHA256 object 
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeSHA256.InitFields(System.String,System.Data.SqlServerCe.SqlCeSHA256.ProviderType,System.Data.SqlServerCe.SqlCeSHA256.AlgorithmId)">
            <summary>
            Initializes the object with proper values
            </summary>
            <param name="provider">The name of cryto provider to use</param>
            <param name="providerType">The type of provider</param>
            <param name="algorithm">The hash algorithm to use</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeSHA256.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
             Routes data written to the object into the hash algorithm for computing the hash. 
            </summary>
            <param name="array">data whose hash needs to be computed.</param>
            <param name="ibStart">start index in the array.</param>
            <param name="cbSize">lenght to be used from the start index in the array.</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeSHA256.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>The hash computed of the data provided</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeSHA256.Initialize">
            <summary>
            Initializes an implementation of the HashAlgorithm class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeSHA256.Dispose">
            <summary>
            Disposes the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeSHA256.AcquireCsp(System.String,System.String,System.Data.SqlServerCe.SqlCeSHA256.ProviderType,System.Data.SqlServerCe.SqlCeSHA256.CryptAcquireContextFlags)">
            <summary>
            Aquire the CSP contex corresponding to the provided inputs
            see win32 CryptAcquireContext Function fpr more details
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.SqlCeSHA256.GetHashParameter(System.Data.SqlServerCe.HashSafeHandle,System.Data.SqlServerCe.SqlCeSHA256.HashParameter)">
            <summary>
            Get the parameter out of hash object provided
            </summary>
        </member>
        <member name="T:System.Data.SqlServerCe.SqlCeSHA256.UnsafeNativeMethods">
            <summary>
            Helper Pinvoke class for crypto provider
            </summary>
        </member>
        <member name="T:System.Data.SqlServerCe.Res">
             <summary>
                AutoGenerated resource class. Usage:
            
                    string s = Res.GetString(Res.MyIdenfitier);
             </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.Accessor.#ctor(System.Int32)">
            -------------------------------------------------------------------
            <summary>
            Constructor
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:System.Data.SqlServerCe.Accessor.Finalize">
            -------------------------------------------------------------------
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.Accessor.Dispose">
            <summary>
            Releases all objects associated with the accessor.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.Accessor.Dispose(System.Boolean)">
            -------------------------------------------------------------------
            <summary>
            Releases the unmanaged resources used by the Accessor class and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:System.Data.SqlServerCe.Accessor.ReleaseNativeInterfaces">
            <summary>
            Releases the native interfaces. Note that this API gets called even from the Finalize()
            and we should make sure that we don't run into AVs and DllNotFound Exceptions.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.Accessor.AllocData">
            -------------------------------------------------------------------
            <summary>
            Allocated proper data buffer based on the information in binding arr.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.Accessor.CheckTypeValueStatusValue(System.Type)">
            -------------------------------------------------------------------
            <summary>
            Verifies return status.
            </summary>
            <param name="type">Expected Type</param>
            <returns>Exception</returns>
        </member>
        <member name="M:System.Data.SqlServerCe.Accessor.SetValueDBNull">
            -------------------------------------------------------------------
            <summary>
            Sets the current value to DBNULL.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.Accessor.SetValueNull">
            -------------------------------------------------------------------
            <summary>
            Sets the current value to null.
            </summary>
        </member>
        <member name="M:System.Data.SqlServerCe.Accessor.AlignDataSize(System.Int32)">
            -------------------------------------------------------------------
            <summary>
            Aligns the specified value to start on 8-byte boundary.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.DbBinding">
            -------------------------------------------------------------------
            <summary>
            Returns data binding array.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.DataHandle">
            -------------------------------------------------------------------
            <summary>
            Returns a pointer to the data buffer.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.Count">
            -------------------------------------------------------------------
            <summary>
            Returns the number of data bindings in this accessor.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.NumValues">
            -------------------------------------------------------------------
            <summary>
            Number of values in this accessor.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.CurrentIndex">
            -------------------------------------------------------------------
            <summary>
            Current data binding index.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.DataBufferSize">
            -------------------------------------------------------------------
            <summary>
            The size of the data buffer (for one set of values). Data binding
            array describes layout of a set of values. This accessor may contain
            a number of sets mapped by one binding array. 
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.ActualDataBufferSize">
            -------------------------------------------------------------------
            <summary>
            This returns the actual buffer size which is a multiple of the 
            size returned by DataBufferSize.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.Ordinal">
            -------------------------------------------------------------------
            <summary>
            Current ordinal.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.ColumnName">
            -------------------------------------------------------------------
            <summary>
            Current column name.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.ObjectPtr">
            -------------------------------------------------------------------
            <summary>
            Current object pointer.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.MaxLen">
            -------------------------------------------------------------------
            <summary>
            Gets/Sets the maximum length of the current value.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.SeType">
            -------------------------------------------------------------------
            <summary>
            Gets/Sets the SETYPE of the current value.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.Precision">
            -------------------------------------------------------------------
            <summary>
            Gets/Sets the precision of the current value.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.Scale">
            -------------------------------------------------------------------
            <summary>
            Gets/Sets the scale of the current value.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.SizeValue">
            -------------------------------------------------------------------
            <summary>
            Gets/Sets the size of the current value.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.StatusValue">
            -------------------------------------------------------------------
            <summary>
            Gets/Sets the status of the current value.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.Value">
            -------------------------------------------------------------------
            <summary>
            Gets/Sets value in the current accessor position.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.Value_BOOL">
            -------------------------------------------------------------------
            <summary>
            Gets/Sets boolean value.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.Value_BYTES">
            -------------------------------------------------------------------
            <summary>
            Gets/Sets binary value.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.Value_CY">
            -------------------------------------------------------------------
            <summary>
            Gets/Sets currency.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.Value_DATETIME">
            -------------------------------------------------------------------
            <summary>
            Gets/Sets datetime.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.Value_GUID">
            -------------------------------------------------------------------
            <summary>
            Gets/Sets guid.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.Value_TINYINT">
            -------------------------------------------------------------------
            <summary>
            Gets/Sets UI1.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.Value_I2">
            -------------------------------------------------------------------
            <summary>
            Gets/Sets I2.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.Value_I4">
            -------------------------------------------------------------------
            <summary>
            Gets/Sets I4.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.Value_I8">
            -------------------------------------------------------------------
            <summary>
            Gets/Sets I8.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.Value_NUMERIC">
            -------------------------------------------------------------------
            <summary>
            Gets/Sets numeric.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.Value_R4">
            -------------------------------------------------------------------
            <summary>
            Gets/Sets R4.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.Value_R8">
            -------------------------------------------------------------------
            <summary>
            Gets/Sets R8.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.Value_STRING">
            -------------------------------------------------------------------
            <summary>
            Gets/Sets NTEXT, NVARCHAR, NCHAR values.
            </summary>
        </member>
        <member name="P:System.Data.SqlServerCe.Accessor.Value_CHARS">
            -------------------------------------------------------------------
            <summary>
            Sets NTEXT, NVARCHAR, NCHAR values.
            </summary>
        </member>
    </members>
</doc>
